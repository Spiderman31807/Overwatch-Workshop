settings
{
	main
	{
		Description: "A Total Of 100 (71 For Bots) Customisable Effects\nAnd A Custom Next Effect Timer From 5s To 5m\n\nInspired By GTA V Chaos Mod As\nYou Can Tell By Some Of The Effects\n\nI Know Of Said Mod From Watching Darkviper\n\nVist The Description At \"Workshop.Code/3123G\"\nFor All 100 Effects Listed In The Order Made\n\nWorkshop.codes - \"Chaos Mod (100 Effects)\"\n\nPress Interact In Spawn - Select Random Hero\nHold Interact 5 Seconds - Respawn Player"
		Mode Name: "Chaos Mod - 3123G"
	}

	lobby
	{
		Max Team 1 Players: 4
		Max Team 2 Players: 4
	}

	modes
	{
		Assault
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		disabled Bounty Hunter
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		disabled Capture the Flag
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Clash
		{
			Capture Speed Modifier: 45%
		}

		Control
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		disabled Deathmatch
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		disabled Elimination
		{
			Game Mode Start: Immediately
			Limit Roles: 
		}

		Escort
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Flashpoint
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Hybrid
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		disabled LÃºcioball
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		disabled Practice Range
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Push
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		disabled Skirmish
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		disabled Team Deathmatch
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		disabled Winston's Beach Volleyball
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}
	}

	workshop
	{
		Add Ultimate Charge Max Amount: [5]
		Armor Up Temp Armor Disappears After 10s: [3]
		Asleep Max Duration: [20]
		Audio Hallucination: [1]
		Big Ragdoll Change Size To Large During Ragdoll: [8]
		Burning Max Duration: [20]
		Cruise Control Forward Movement Can Only Increase: [2]
		Damage Spounge Deal And Take No Damage: [2]
		Daylight Burns: [2]
		Disable Random Direction: [2]
		Drunk: [3]
		Emote Play Random Equipped Emote: [1]
		Fake Teleport Random Teleport Effect Wait Then Teleport Back: [1]
		Freecam Leaves Player Where Freecam Was When Ended: [2]
		Frozen Max Duration: [20]
		Gravitational Pull Become Other Players Gravity: [1]
		Hacked Max Duration: [20]
		Hammer Time Force Use Torb Hammer Hammer Deals 3x Damage: [2]
		Heavy Hitter 4x Melee Damage Junker Queen Melee Not Detected While Knife Ready: [2]
		Help My W Key Is Stuck Forces Forward Movement: [2]
		Hero Swap Swap Hero With Random Player: [1]
		Hide Other Effects: [5]
		High Sensitivity: [1]
		Hitscan Sets Projectile Speed So High It Becomes Hitscan: [2]
		I Always Come Back If Killed During Effect Resurrect With 0.25 Max HP: [2]
		Increased Healing Max Duration: [20]
		Infinite Ammo: [2]
		Invert Current Velocity: [1]
		Invert Movement: [2]
		Invincible  God Mode Max Duration: [20]
		Invisibility: [2]
		Knocked Down Max Duration: [20]
		Linked Sensitivity To Movement: [2]
		Location Swap Swap Places With Random Player: [1]
		Long Jump: [3]
		Low Gravity: [3]
		Low Sensitivity: [1]
		Mind Control: [2]
		Misclick Use Random Ability: [1]
		No Arc Removes Gravity From Projectile: [3]
		No Cooldowns Includes Charge And Resource: [2]
		No Crit Cant Deal Headshot Damage: [2]
		No Gravity: [3]
		No Healing Max Duration: [20]
		No Huds: [1]
		No Objective Disables Objective Hud: [2]
		Objective Bound: [3]
		OHKO Stuck At 1HP Previous HP Restored After: [1]
		Only Crit Only Deal Headshot Damage: [2]
		Only Headshots Only Take Headshot Damage: [2]
		Pacifist Any Damage Dealt Is Uno-Reversed Back: [1]
		Phantom No Wall Collision: [2]
		Phased Out  God Mode With No Collision Max Duration: [20]
		Ragdoll: [8]
		Random Healthpool: [2]
		Random Sensitivity: [2]
		Randomise Hero Reverts Hero After Timer: [3]
		Randomise Ultimate Charge Max Change Amount: [15]
		Realism Mode: [5]
		Refill Ammo: [1]
		Refill Health: [1]
		Remote Unit: [4]
		Remove Invisable Barriers: Off
		Remove Ultimate Charge Max Amount: [10]
		Reverse Gravity Fall Upwards: [2]
		Ride Random Player: [2]
		Rooted Max Duration: [20]
		Scale Size Big: [2]
		Scale Size Random: [1]
		Scale Size Small: [2]
		Script Kiddie Aimbot: [3]
		Seer See Out The Eyes Of A Random Player: [12]
		Slippery Floor Acts As Ice: [3]
		Slow Projectiles Projectiles Speed Reduced To 25%: [1]
		Small Ragdoll Change Size To Small During Ragdoll: [8]
		Snail Set Move Speed To 25%: [1]
		Speed Is Key 300% Movement Speed The Speed Of A Reinhardt Charge: [2]
		Split Personality: [4]
		Strong Arc 300% Gravity For Projectiles: [2]
		Strong Gravity 3x Normal: [2]
		Stun Gun: [2]
		Stunned Max Duration: [20]
		Suicide: [1]
		Swap Team Swap Team With A Random Player From The Other Team: [1]
		Teleport To Objective: [1]
		Teleport To Random Location: [1]
		Teleport To Random Player: [1]
		Teleport To Spawn: [1]
		Teleporter Malfunction TPs To Nearby Random Locations: [3]
		Third Person: [2]
		Thorns Deal 50% Of Damage Back To The Attacker: [2]
		Time Between Effects: 10
		U-Turn: [1]
		Unkillable Max Duration: [20]
		Use Random Ultimate: [1]
		Vampire Heal 50% Of Damage Dealt: [2]
		Visual Hallucination: [1]
		Wallhacks: [12]
		Wierd Pitch Only Affects Audio: [6]
		Your The Bomb: [3]
	}

	extensions
	{
		Buff Status Effects
		Debuff Status Effects
		Energy Explosion Effects
		Kinetic Explosion Effects
		Explosion Sounds
	}
}

variables
{
	global:
		0: Effects
		1: Broken_Bot_Effects
		2: All_Heros
		3: Ultimate_Duration
		4: Effect_Settings
		5: Timer
		6: Third_Person_Pos
		7: Primary_Speed
		9: Aimbot_Triggers
		12: Primary_Arc
		16: Indexed_Player
		17: Indexed_Stats

	player:
		0: Is_Bot
		1: Trigger_Effect
		2: Effect
		3: Active_Effects_ID
		4: Randomise
		5: Save_Hero
		6: Original_Hero
		7: Camera_Pos
		8: Cruise_Control_Throttle
		9: Stored_Position
		10: Increased_Healing_ID
		11: No_Healing_ID
		12: New_Scale
		13: Slide_Direction
		14: Stored_OHKO_HP
		15: Gravitational_Pull
		16: Seer_Target
		17: Stored_HP_Ragdoll
		18: Swap_Effect
		19: Hero_Size
		20: Disabled_Direction
		21: Mind_Control_Target
		22: Size
		23: Script_Target
		24: Script_Targets
		25: Script_Projectile_Speed
		26: Script_Projectile_Arc
		27: Projectile_Speed
		28: Projectile_Gravity
		29: Freecam_Pos
		30: Swap_Team_With
		31: Save_Character
		32: Load_Character
		33: Drop_Location
		34: Package_Position
		35: Hit_By_Explosion
		36: New_Care_Package
		37: Effects_Used
		38: Split_Personality_Original
		39: Split_Personality_Save
		40: Split_Personality_Toggle
		41: Random_Hero
		42: Random_Ultimate
		43: Hide_Effects
		44: Replaced_Spawn_With
		45: Realistic_Ammo
		46: Realistic_Fall_Damage
		47: Realistic_Abilitys
		48: Realistic_Hero
		49: Realistic_Fuel
		50: Attach
		51: Random_Healthpools_ID
		52: Stored_HP
		53: Drunk_Effect_Movement
		54: Trigger_StunGun
}

subroutines
{
	0: Start_Throttle
	1: Start_Throttle_In_Direction
	2: Start_Transforming_Throttle
	3: Start_Accelerating
	4: Start_Camera
	5: Start_Facing
	6: Start_Forcing_Position
	7: Modify_Speed
	8: Modify_Gravity
	9: Modify_Projectile_Speed
	10: Modify_Projectile_Gravity
	11: Stop_Throttle
	12: Stop_Throttle_In_Direction
	13: Stop_Transforming_Throttle
	14: Stop_Accelerating
	15: Stop_Camera
	16: Stop_Facing
	17: Long_Jump
	18: Stop_Invisibility
	19: Stop_Forcing_Position
	20: Reset_Speed
	21: Reset_Gravity
	22: Reset_Projectile_Speed
	23: Reset_Projectile_Gravity
	24: Disable_Bindings
	25: Enable_Bindings
	26: Disallow_Bindings
	27: Allow_Bindings
	28: Increased_Healing
	29: No_Healing
	30: Randomise_Hero
	31: Save_Hero
	32: Load_Hero
	33: Wallhacks
	34: OHKO
	35: Disable_Random_Direction
	36: Cruise_Control
	37: Stuck_W
	38: Teleport_Spawn
	39: Teleport_Objective
	40: Teleport_Random_Player
	41: Teleport_Random_Location
	42: Fake_Teleport
	43: Scale_Random
	44: Scale_Big
	45: Scale_Small
	46: Ice_Floor
	47: No_Gravity
	48: Infinite_Ammo
	49: Teleporter_Malfunction
	50: Random_Ultimate
	51: Infinite_Ammo_Loop
	52: Teleport_Malfuction_Loop
	53: Misclick
	54: Heavy_Hitter
	55: Invisibility
	56: Cruise_Control_Update_Speed
	57: Strong_Gravity
	58: Gravitational_Pull
	59: Reverse_Gravity
	60: Wierd_Pitch
	61: Wierd_Pitch_Loop
	62: Seer
	63: Damage_Spounge
	64: Only_Headshots
	65: Only_Crits
	66: No_Crits
	67: Settings2
	68: Ragdoll
	69: Ragdoll_Large
	70: Ragdoll_Small
	71: Location_Swap
	72: Hero_Swap
	73: Phantom
	74: No_Huds
	75: No_Objective
	76: Armor_Up
	77: Thorns
	78: Vampire
	79: Pacifist
	80: No_Arc
	81: Strong_Arc
	82: Slow_Projectile
	83: Only_Hitscan
	84: Snail
	85: Hammer_Time
	86: Third_Person
	87: Mind_Control
	88: Mimic_Bindings
	89: Stop_Bindings
	90: Trigger_Random_Effect
	91: Script_Kiddie
	92: Daylight_Burns
	93: Springtrap
	94: Low_Gravity
	95: No_Cooldowns
	96: Freecam
	97: Swap_Team
	98: Speed_Is_Key
	99: Reset_Cooldowns
	100: Index_Hero
	101: Care_Package
	102: Package_E54
	103: Package_OR14
	104: Package_A7000_Wargod
	105: Package_C455_Sharpshooter
	106: Package_S900_Sentry
	107: Package_K2000_Blademaster
	108: Package_P900_Warhead
	109: Package_Inbound
	110: Package_Riptire
	111: Your_The_Bomb
	112: Package_Tokki
	113: Objective_Bound
	114: Verp
	115: Invert_Movement
	116: Linked_Camera
	117: Modify_Camera
	118: Reset_Camera
	119: Low_Sensitivity
	120: High_Sensitivity
	121: Random_Sensitivity
	122: Split_Personality
	123: Hide_Effects
	124: Realistic
	125: Attach
	126: Random_Healthpool
	127: Drunk
}

disabled rule("Debug")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("Effects {0}\nBot Broken Effects {1}\nTimer {2}", Count Of(Global.Effects),
			Count Of(Global.Broken_Bot_Effects), Custom String("{0}\n\nSetting Count {1}\nTime Elapsed {2}", Global.Timer, Count Of(
			Global.Effect_Settings), Total Time Elapsed)), Null, Null, Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Wait Until(Is Assembling Heroes || Has Spawned(Host Player), 99999);
		Skip If(!Is Assembling Heroes, 6);
		Set Match Time(0);
		Wait Until(Is In Setup, 99999);
		Set Match Time(0);
		Wait Until(Is Game In Progress, 99999);
		Pause Match Time;
		While(True);
			Wait Until(!Is Button Held(Host Player, Button(Crouch)) && Is Button Held(Host Player, Button(Interact)), 99999);
			Global.Timer = 100;
			Wait Until(!Is Button Held(Host Player, Button(Interact)), 99999);
		End;
	}
}

disabled rule("Debug Dummy")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Total Time Elapsed > 5;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), Team 1, -1, Objective Position(0), Vector(0, 0, 0));
	}
}

disabled rule("Test Effect Debug")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player == Host Player;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Button(Interact)), 3);
		(Is Button Held(Event Player, Button(Jump)) ? Remove From Array(All Players(All Teams), Event Player) : Event Player)
			.Trigger_Effect = Is Button Held(Event Player, Button(Melee)) ? Custom String("Stun Gun") : Custom String("Drunk");
		Wait(0.250, Ignore Condition);
		Abort;
		For Player Variable(Event Player, Is_Bot, 0, Count Of(Event Player.Effects_Used), 1);
			Log To Inspector(Custom String("{0}: {1}", Event Player.Is_Bot, Event Player.Effects_Used[Event Player.Is_Bot]));
		End;
	}
}

rule("Setup Global")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.All_Heros = Array(Hero(Ana), Hero(Ashe), Hero(Baptiste), Hero(Bastion), Hero(Brigitte), Hero(Cassidy), Hero(D.Va), Hero(
			Doomfist), Hero(Echo), Hero(Genji), Hero(Hanzo), Hero(Junker Queen), Hero(Junkrat), Hero(Kiriko), Hero(Lifeweaver), Hero(
			LÃºcio), Hero(Mei), Hero(Mercy), Hero(Moira), Hero(Orisa), Hero(Pharah), Hero(Ramattra), Hero(Reaper), Hero(Reinhardt), Hero(
			Roadhog), Hero(Sigma), Hero(Soldier: 76), Hero(Sombra), Hero(Sojourn), Hero(Symmetra), Hero(TorbjÃ¶rn), Hero(Tracer), Hero(
			Widowmaker), Hero(Winston), Hero(Wrecking Ball), Hero(Zarya), Hero(Zenyatta), Hero(Illari));
		Global.Third_Person_Pos = Array(Vector(-0.400, 1.300, -1.400), Vector(-0.300, 1.500, -1), Vector(-0.400, 1.700, -1.400), Vector(0,
			3, -1.600), Vector(-0.400, 1.700, -1.400), Vector(-0.400, 1.800, -1.300), Vector(-1, 2.600, -2), Vector(0, 2.300, -2), Vector(
			-0.400, 2, -1.300), Vector(-0.400, 1.500, -1.300), Vector(-0.400, 1.500, -1.300), Vector(-0.900, 1.900, -2), Vector(-0.400, 2,
			-1.500), Vector(-0.400, 1.300, -1.400), Vector(-0.400, 1.700, -1.400), Vector(-0.400, 1.300, -1.400), Vector(-0.300, 1.600,
			-1.500), Vector(-0.400, 1.700, -1.400), Vector(-0.400, 1.700, -1.400), Vector(-1, 2.600, -2), Vector(-0.500, 1.700, -1.600),
			Vector(-1, 2.600, -2), Vector(-0.500, 1.700, -1.600), Vector(-1, 2.600, -2), Vector(-1, 2.600, -2), Vector(-0.900, 2.300, -2),
			Vector(-0.300, 1.600, -1.200), Vector(-0.300, 1.400, -1.200), Vector(-0.300, 1.400, -1.200), Vector(-0.300, 1.400, -1.200),
			Vector(0, 1.600, -1.200), Vector(-0.300, 1.400, -1.200), Vector(-0.300, 1.600, -1.200), Vector(-0.900, 1.800, -2), Vector(-1,
			2.600, -2), Vector(-0.900, 1.900, -2), Vector(-0.400, 1.700, -1.400), Vector(-0.400, 1.700, -1.400));
		Global.Primary_Speed = Array(125, 0, 0, 0, 0, 0, 0, 80, 75, 60, 110, 0, 25, 20, 0, 50, 0, 50, 0, 90, 35, 80, 0, 0, 60, 50, 0, 0,
			160, 0, 70, 0, 0, 0, 0, 0, 90, 0);
		Global.Primary_Arc = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.020, 0, -0.400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			-0.050, 0, 0, 0, 0, 0, 0, 0);
		Global.Ultimate_Duration = Array(6, 1, 1, 1, 0, 1, 5, 1, 1, 1, 6, 6, 1, 1, 1, 8, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 2, 1,
			1, 6, 3, 1, 4);
		Global.Indexed_Player = Empty Array;
		Global.Indexed_Stats = Empty Array;
	}
}

rule("Setup Player")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Event Player.Size = 1;
		Event Player.Projectile_Speed = 1;
		Event Player.Projectile_Gravity = 1;
	}
}

rule("Check If Bot")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Start Forcing Dummy Bot Name(Event Player, Custom String("â"));
		If(Custom String("{0}", Event Player) == Custom String("â"));
			Event Player.Is_Bot = True;
		Else;
			Event Player.Is_Bot = True;
		End;
		Stop Forcing Dummy Bot Name(Event Player);
	}
}

rule("Effect List")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Effects = Empty Array;
		Modify Global Variable(Effects, Append To Array, Custom String("Randomise Hero"));
		Modify Global Variable(Effects, Append To Array, Custom String("Randomise Ultimate Charge"));
		Modify Global Variable(Effects, Append To Array, Custom String("Remove Ultimate Charge"));
		Modify Global Variable(Effects, Append To Array, Custom String("Add Ultimate Charge"));
		Modify Global Variable(Effects, Append To Array, Custom String("Hacked"));
		Modify Global Variable(Effects, Append To Array, Custom String("Burning"));
		Modify Global Variable(Effects, Append To Array, Custom String("Knocked Down"));
		Modify Global Variable(Effects, Append To Array, Custom String("Asleep"));
		Modify Global Variable(Effects, Append To Array, Custom String("Frozen"));
		Modify Global Variable(Effects, Append To Array, Custom String("Unkillable"));
		Modify Global Variable(Effects, Append To Array, Custom String("Invincible"));
		Modify Global Variable(Effects, Append To Array, Custom String("Phased Out"));
		Modify Global Variable(Effects, Append To Array, Custom String("Rooted"));
		Modify Global Variable(Effects, Append To Array, Custom String("Stunned"));
		Modify Global Variable(Effects, Append To Array, Custom String("Increased Healing"));
		Modify Global Variable(Effects, Append To Array, Custom String("No Healing"));
		Modify Global Variable(Effects, Append To Array, Custom String("Wallhacks"));
		Modify Global Variable(Effects, Append To Array, Custom String("OHKO"));
		Modify Global Variable(Effects, Append To Array, Custom String("Help My W Key Is Stuck"));
		Modify Global Variable(Effects, Append To Array, Custom String("Disable Random Direction"));
		Modify Global Variable(Effects, Append To Array, Custom String("Cruise Control"));
		Modify Global Variable(Effects, Append To Array, Custom String("Suicide"));
		Modify Global Variable(Effects, Append To Array, Custom String("Teleport To Spawn"));
		Modify Global Variable(Effects, Append To Array, Custom String("Teleport To Objective"));
		Modify Global Variable(Effects, Append To Array, Custom String("Teleport To Random Player"));
		Modify Global Variable(Effects, Append To Array, Custom String("Teleport To Random Location"));
		Modify Global Variable(Effects, Append To Array, Custom String("Fake Teleport"));
		Modify Global Variable(Effects, Append To Array, Custom String("Scale Size Random"));
		Modify Global Variable(Effects, Append To Array, Custom String("Scale Size Big"));
		Modify Global Variable(Effects, Append To Array, Custom String("Scale Size Small"));
		Modify Global Variable(Effects, Append To Array, Custom String("Slippery"));
		Modify Global Variable(Effects, Append To Array, Custom String("No Gravity"));
		Modify Global Variable(Effects, Append To Array, Custom String("Use Random Ultimate"));
		Modify Global Variable(Effects, Append To Array, Custom String("Infinite Ammo"));
		Modify Global Variable(Effects, Append To Array, Custom String("Refill Ammo"));
		Modify Global Variable(Effects, Append To Array, Custom String("Refill Health"));
		Modify Global Variable(Effects, Append To Array, Custom String("Misclick"));
		Modify Global Variable(Effects, Append To Array, Custom String("Teleporter Malfunction"));
		Modify Global Variable(Effects, Append To Array, Custom String("Heavy Hitter"));
		Modify Global Variable(Effects, Append To Array, Custom String("Invisibility"));
		Modify Global Variable(Effects, Append To Array, Custom String("Strong Gravity"));
		Modify Global Variable(Effects, Append To Array, Custom String("Gravitational Pull"));
		Modify Global Variable(Effects, Append To Array, Custom String("Reverse Gravity"));
		Modify Global Variable(Effects, Append To Array, Custom String("Wierd Pitch"));
		Modify Global Variable(Effects, Append To Array, Custom String("Seer"));
		Modify Global Variable(Effects, Append To Array, Custom String("Emote"));
		Modify Global Variable(Effects, Append To Array, Custom String("Damage Spounge"));
		Modify Global Variable(Effects, Append To Array, Custom String("Only Headshot"));
		Modify Global Variable(Effects, Append To Array, Custom String("Only Crit"));
		Modify Global Variable(Effects, Append To Array, Custom String("No Crit"));
		Modify Global Variable(Effects, Append To Array, Custom String("Ragdoll"));
		Modify Global Variable(Effects, Append To Array, Custom String("Ragdoll Big"));
		Modify Global Variable(Effects, Append To Array, Custom String("Ragdoll Small"));
		Modify Global Variable(Effects, Append To Array, Custom String("Location Swap"));
		Modify Global Variable(Effects, Append To Array, Custom String("Hero Swap"));
		Modify Global Variable(Effects, Append To Array, Custom String("Phantom"));
		Modify Global Variable(Effects, Append To Array, Custom String("No Huds"));
		Modify Global Variable(Effects, Append To Array, Custom String("No Objective"));
		Modify Global Variable(Effects, Append To Array, Custom String("U-Turn"));
		Modify Global Variable(Effects, Append To Array, Custom String("Armor Up"));
		Modify Global Variable(Effects, Append To Array, Custom String("Thorns"));
		Modify Global Variable(Effects, Append To Array, Custom String("Vampire"));
		Modify Global Variable(Effects, Append To Array, Custom String("Pacifist"));
		Modify Global Variable(Effects, Append To Array, Custom String("No Arc"));
		Modify Global Variable(Effects, Append To Array, Custom String("Strong Arc"));
		Modify Global Variable(Effects, Append To Array, Custom String("Slow Projectile"));
		Modify Global Variable(Effects, Append To Array, Custom String("Only Hitscan"));
		Modify Global Variable(Effects, Append To Array, Custom String("Snail"));
		Modify Global Variable(Effects, Append To Array, Custom String("Hammer Time"));
		Modify Global Variable(Effects, Append To Array, Custom String("Third Person"));
		Modify Global Variable(Effects, Append To Array, Custom String("Mind Control"));
		Modify Global Variable(Effects, Append To Array, Custom String("Long Jump"));
		Modify Global Variable(Effects, Append To Array, Custom String("Script Kiddie"));
		Modify Global Variable(Effects, Append To Array, Custom String("Daylight Burns"));
		Modify Global Variable(Effects, Append To Array, Custom String("Springtrap"));
		Modify Global Variable(Effects, Append To Array, Custom String("Low Gravity"));
		Modify Global Variable(Effects, Append To Array, Custom String("No Cooldowns"));
		Modify Global Variable(Effects, Append To Array, Custom String("Freecam"));
		Modify Global Variable(Effects, Append To Array, Custom String("Swap Team"));
		Modify Global Variable(Effects, Append To Array, Custom String("Speed Is Key"));
		Modify Global Variable(Effects, Append To Array, Custom String("Care Package"));
		Modify Global Variable(Effects, Append To Array, Custom String("Your The Bomb"));
		Modify Global Variable(Effects, Append To Array, Custom String("Invert Current Velocity"));
		Modify Global Variable(Effects, Append To Array, Custom String("Objective Bound"));
		Modify Global Variable(Effects, Append To Array, Custom String("Verp"));
		Modify Global Variable(Effects, Append To Array, Custom String("Invert Movement"));
		Modify Global Variable(Effects, Append To Array, Custom String("Linked Sensitivity To Movement"));
		Modify Global Variable(Effects, Append To Array, Custom String("Low Sensitivity"));
		Modify Global Variable(Effects, Append To Array, Custom String("High Sensitivity"));
		Modify Global Variable(Effects, Append To Array, Custom String("Random Sensitivity"));
		Modify Global Variable(Effects, Append To Array, Custom String("Split Personality"));
		Modify Global Variable(Effects, Append To Array, Custom String("Hide Effects"));
		Modify Global Variable(Effects, Append To Array, Custom String("Replace Spawn"));
		Modify Global Variable(Effects, Append To Array, Custom String("Visual Hallucination"));
		Modify Global Variable(Effects, Append To Array, Custom String("Audio Hallucination"));
		Modify Global Variable(Effects, Append To Array, Custom String("Realistic"));
		Modify Global Variable(Effects, Append To Array, Custom String("Attach"));
		Modify Global Variable(Effects, Append To Array, Custom String("Random Healthpool"));
		Modify Global Variable(Effects, Append To Array, Custom String("Drunk"));
		Modify Global Variable(Effects, Append To Array, Custom String("Stun Gun"));
	}
}

rule("Broken Bot Effect List")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Broken_Bot_Effects = Empty Array;
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Randomise Hero"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Wallhacks"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Help My W Key Is Stuck"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Disable Random Direction"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Cruise Control"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Use Random Ultimate"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Seer"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Emote"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Hero Swap"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Phantom"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("No Huds"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("No Objective"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Hammer Time"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Third Person"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Mind Control"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Script Kiddie"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Freecam"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Swap Team"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Care Package"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Invert Movement"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Linked Sensitivity To Movement"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Low Sensitivity"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("High Sensitivity"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Random Sensitivity"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Split Personality"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Hide Effects"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Visual Hallucination"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Audio Hallucination"));
		Modify Global Variable(Broken_Bot_Effects, Append To Array, Custom String("Drunk"));
	}
}

rule("Setting List 1/2")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Effect_Settings = Empty Array;
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Hero Effects"), Custom String("Randomise Hero (Reverts Hero After Timer)"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 0)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75,
			80, 85, 90, 95, 100)[Workshop Setting Combo(Custom String("Ultimate Effects"), Custom String(
			"Randomise Ultimate Charge (Max Change Amount)"), 0, Array(Custom String("Disabled"), Custom String("5%"), Custom String(
			"10%"), Custom String("15%"), Custom String("20%"), Custom String("25%"), Custom String("30%"), Custom String("35%"),
			Custom String("40%"), Custom String("45%"), Custom String("50%"), Custom String("55%"), Custom String("60%"), Custom String(
			"65%"), Custom String("70%"), Custom String("75%"), Custom String("80%"), Custom String("85%"), Custom String("90%"),
			Custom String("95%"), Custom String("100%")), 0)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75,
			80, 85, 90, 95, 100)[Workshop Setting Combo(Custom String("Ultimate Effects"), Custom String(
			"Remove Ultimate Charge (Max Amount)"), 0, Array(Custom String("Disabled"), Custom String("5%"), Custom String("10%"),
			Custom String("15%"), Custom String("20%"), Custom String("25%"), Custom String("30%"), Custom String("35%"), Custom String(
			"40%"), Custom String("45%"), Custom String("50%"), Custom String("55%"), Custom String("60%"), Custom String("65%"),
			Custom String("70%"), Custom String("75%"), Custom String("80%"), Custom String("85%"), Custom String("90%"), Custom String(
			"95%"), Custom String("100%")), 1)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75,
			80, 85, 90, 95, 100)[Workshop Setting Combo(Custom String("Ultimate Effects"), Custom String(
			"Add Ultimate Charge (Max Amount)"), 0, Array(Custom String("Disabled"), Custom String("5%"), Custom String("10%"),
			Custom String("15%"), Custom String("20%"), Custom String("25%"), Custom String("30%"), Custom String("35%"), Custom String(
			"40%"), Custom String("45%"), Custom String("50%"), Custom String("55%"), Custom String("60%"), Custom String("65%"),
			Custom String("70%"), Custom String("75%"), Custom String("80%"), Custom String("85%"), Custom String("90%"), Custom String(
			"95%"), Custom String("100%")), 2)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Status Effects"),
			Custom String("Hacked (Max Duration)"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"), Custom String(
			"0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"), Custom String(
			"1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"), Custom String(
			"2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"), Custom String(
			"3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"), Custom String(
			"4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 0)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Status Effects"),
			Custom String("Burning (Max Duration)"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"), Custom String(
			"0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"), Custom String(
			"1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"), Custom String(
			"2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"), Custom String(
			"3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"), Custom String(
			"4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 1)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Status Effects"),
			Custom String("Knocked Down (Max Duration)"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"), Custom String(
			"0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"), Custom String(
			"1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"), Custom String(
			"2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"), Custom String(
			"3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"), Custom String(
			"4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 2)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Status Effects"),
			Custom String("Asleep (Max Duration)"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"), Custom String(
			"0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"), Custom String(
			"1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"), Custom String(
			"2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"), Custom String(
			"3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"), Custom String(
			"4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 3)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Status Effects"),
			Custom String("Frozen (Max Duration)"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"), Custom String(
			"0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"), Custom String(
			"1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"), Custom String(
			"2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"), Custom String(
			"3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"), Custom String(
			"4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 4)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Status Effects"),
			Custom String("Unkillable (Max Duration)"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"), Custom String(
			"0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"), Custom String(
			"1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"), Custom String(
			"2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"), Custom String(
			"3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"), Custom String(
			"4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 5)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Status Effects"),
			Custom String("Invincible / God Mode (Max Duration)"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"),
			Custom String("0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"),
			Custom String("1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"),
			Custom String("2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"),
			Custom String("3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"),
			Custom String("4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 6)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Status Effects"),
			Custom String("Phased Out / God Mode With No Collision (Max Duration)"), 0, Array(Custom String("Disabled"), Custom String(
			"0.25 Seconds"), Custom String("0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String(
			"1.25 Seconds"), Custom String("1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String(
			"2.25 Seconds"), Custom String("2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String(
			"3.25 Seconds"), Custom String("3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String(
			"4.25 Seconds"), Custom String("4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 7)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Status Effects"),
			Custom String("Rooted (Max Duration)"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"), Custom String(
			"0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"), Custom String(
			"1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"), Custom String(
			"2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"), Custom String(
			"3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"), Custom String(
			"4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 8)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Status Effects"),
			Custom String("Stunned (Max Duration)"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"), Custom String(
			"0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"), Custom String(
			"1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"), Custom String(
			"2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"), Custom String(
			"3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"), Custom String(
			"4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 9)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Status Effects"),
			Custom String("Increased Healing (Max Duration)"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"),
			Custom String("0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"),
			Custom String("1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"),
			Custom String("2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"),
			Custom String("3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"),
			Custom String("4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 10)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Status Effects"),
			Custom String("No Healing (Max Duration)"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"), Custom String(
			"0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"), Custom String(
			"1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"), Custom String(
			"2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"), Custom String(
			"3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"), Custom String(
			"4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 11)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Workshop Effects"),
			Custom String("Wallhacks"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"), Custom String("0.5 Seconds"),
			Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"), Custom String("1.5 Seconds"),
			Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"), Custom String("2.5 Seconds"),
			Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"), Custom String("3.5 Seconds"),
			Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"), Custom String("4.5 Seconds"),
			Custom String("4.75 Seconds"), Custom String("5 Seconds")), 0)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("OHKO (Stuck At 1HP, Previous HP Restored After)"), 0,
			Array(Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"),
			Custom String("20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"),
			Custom String("40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"),
			Custom String("60 Seconds")), 1)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Movement Effects"), Custom String("Help My W Key Is Stuck (Forces Forward Movement)"),
			0, Array(Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"),
			Custom String("20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"),
			Custom String("40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"),
			Custom String("60 Seconds")), 0)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Movement Effects"), Custom String("Disable Random Direction"), 0, Array(Custom String(
			"Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 1)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Movement Effects"), Custom String(
			"Cruise Control (Forward Movement Can Only Increase)"), 0, Array(Custom String("Disabled"), Custom String("5 Seconds"),
			Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"), Custom String("25 Seconds"),
			Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"), Custom String("45 Seconds"),
			Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 2)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Workshop Effects"), Custom String("Suicide"), 0, Array(Custom String("Disabled"), Custom String("Enabled")), 2)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Teleport Effects"), Custom String("Teleport To Spawn"), 0, Array(Custom String("Disabled"), Custom String("Enabled")), 0)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Teleport Effects"), Custom String("Teleport To Objective"), 0, Array(Custom String("Disabled"), Custom String("Enabled")), 1)
			]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Teleport Effects"), Custom String("Teleport To Random Player"), 0, Array(Custom String("Disabled"), Custom String("Enabled")),
			2)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Teleport Effects"), Custom String("Teleport To Random Location"), 0, Array(Custom String("Disabled"), Custom String(
			"Enabled")), 3)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 1, 2)[Workshop Setting Combo(Custom String(
			"Teleport Effects"), Custom String("Fake Teleport (Random Teleport Effect Wait Then Teleport Back)"), 0, Array(Custom String(
			"Disabled"), Custom String("Fake Teleport And Fake Fake Teleport"), Custom String("Just Fake Teleport")), 4)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Hero Effects"), Custom String("Scale Size Random"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 1)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Hero Effects"), Custom String("Scale Size Big"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 2)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Hero Effects"), Custom String("Scale Size Small"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 3)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Movement Effects"), Custom String("Slippery (Floor Acts As Ice)"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 0)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Gravity Effects"), Custom String("No Gravity"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 0)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Ultimate Effects"), Custom String("Use Random Ultimate"), 0, Array(Custom String("Disabled"), Custom String("Enabled")), 4)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Hero Effects"), Custom String("Infinite Ammo"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 5)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String("Hero Effects"),
			Custom String("Refill Ammo"), 0, Array(Custom String("Disabled"), Custom String("Enabled")), 6)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String("Hero Effects"),
			Custom String("Refill Health"), 0, Array(Custom String("Disabled"), Custom String("Enabled")), 7)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 1, 2)[Workshop Setting Combo(Custom String("Hero Effects"),
			Custom String("Misclick (Use Random Ability)"), 0, Array(Custom String("Disabled"), Custom String("Enabled"), Custom String(
			"Enabled (But Exclude Ultimate)")), 8)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Teleport Effects"), Custom String(
			"Teleporter Malfunction (TPs To Nearby Random Locations)"), 0, Array(Custom String("Disabled"), Custom String("5 Seconds"),
			Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"), Custom String("25 Seconds"),
			Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"), Custom String("45 Seconds"),
			Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 5)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Damage Effects"), Custom String(
			"Heavy Hitter (4x Melee Damage, Junker Queen Melee Not Detected While Knife Ready)"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 0)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Hero Effects"), Custom String("Invisibility"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 9)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Gravity Effects"), Custom String("Strong Gravity (3x Normal)"), 0, Array(Custom String(
			"Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 1)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Gravity Effects"), Custom String("Gravitational Pull (Become Other Players Gravity)"),
			0, Array(Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"),
			Custom String("20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"),
			Custom String("40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"),
			Custom String("60 Seconds")), 2)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Gravity Effects"), Custom String("Reverse Gravity (Fall Upwards)"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 3)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Hero Effects"), Custom String("Wierd Pitch (Only Affects Audio)"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 10)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Camera Effects"),
			Custom String("Seer (See Out The Eyes Of A Random Player)"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"),
			Custom String("0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"),
			Custom String("1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"),
			Custom String("2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"),
			Custom String("3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"),
			Custom String("4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 0)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String("Hero Effects"),
			Custom String("Emote (Play Random Equipped Emote)"), 0, Array(Custom String("Disabled"), Custom String("Enabled")), 11)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Damage Spounge (Deal And Take No Damage)"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 5)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Damage Effects"), Custom String("Only Headshots (Only Take Headshot Damage)"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 1)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Damage Effects"), Custom String("Only Crit (Only Deal Headshot Damage)"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 2)]);
		Call Subroutine(Settings2);
	}
}

rule("Setting List 2/2")
{
	event
	{
		Subroutine;
		Settings2;
	}

	actions
	{
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Damage Effects"), Custom String("No Crit (Cant Deal Headshot Damage)"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 3)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Workshop Effects"),
			Custom String("Ragdoll"), 0, Array(Custom String("Disabled"), Custom String("0.25 Seconds"), Custom String("0.5 Seconds"),
			Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String("1.25 Seconds"), Custom String("1.5 Seconds"),
			Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String("2.25 Seconds"), Custom String("2.5 Seconds"),
			Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String("3.25 Seconds"), Custom String("3.5 Seconds"),
			Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String("4.25 Seconds"), Custom String("4.5 Seconds"),
			Custom String("4.75 Seconds"), Custom String("5 Seconds")), 6)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Workshop Effects"),
			Custom String("Big Ragdoll (Change Size To Large During Ragdoll)"), 0, Array(Custom String("Disabled"), Custom String(
			"0.25 Seconds"), Custom String("0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String(
			"1.25 Seconds"), Custom String("1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String(
			"2.25 Seconds"), Custom String("2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String(
			"3.25 Seconds"), Custom String("3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String(
			"4.25 Seconds"), Custom String("4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 7)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 0.250, 0.500, 0.750, 1, 1.250, 1.500, 1.750, 2, 2.250, 2.500,
			2.750, 3, 3.250, 3.500, 3.750, 4, 4.250, 4.500, 4.750, 5)[Workshop Setting Combo(Custom String("Workshop Effects"),
			Custom String("Small Ragdoll (Change Size To Small During Ragdoll)"), 0, Array(Custom String("Disabled"), Custom String(
			"0.25 Seconds"), Custom String("0.5 Seconds"), Custom String("0.75 Seconds"), Custom String("1 Seconds"), Custom String(
			"1.25 Seconds"), Custom String("1.5 Seconds"), Custom String("1.75 Seconds"), Custom String("2 Seconds"), Custom String(
			"2.25 Seconds"), Custom String("2.5 Seconds"), Custom String("2.75 Seconds"), Custom String("3 Seconds"), Custom String(
			"3.25 Seconds"), Custom String("3.5 Seconds"), Custom String("3.75 Seconds"), Custom String("4 Seconds"), Custom String(
			"4.25 Seconds"), Custom String("4.5 Seconds"), Custom String("4.75 Seconds"), Custom String("5 Seconds")), 8)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Workshop Effects"), Custom String("Location Swap (Swap Places With Random Player)"), 0, Array(Custom String("Disabled"),
			Custom String("Enabled")), 9)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Workshop Effects"), Custom String("Hero Swap (Swap Hero With Random Player)"), 0, Array(Custom String("Disabled"),
			Custom String("Enabled")), 10)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Phantom (No Wall Collision)"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 11)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("No Huds"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 12)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("No Objective (Disables Objective Hud)"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 13)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Workshop Effects"), Custom String("U-Turn"), 0, Array(Custom String("Disabled"), Custom String("Enabled")), 14)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 25, 50, 75, 100, 125, 150, 175, 200, 225, 250)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Armor Up (Temp Armor, Disappears After 10s)"), 0,
			Array(Custom String("Disabled"), Custom String("25"), Custom String("50"), Custom String("75"), Custom String("100"),
			Custom String("125"), Custom String("150"), Custom String("175"), Custom String("200"), Custom String("225"), Custom String(
			"250")), 15)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Thorns (Deal 50% Of Damage Back To The Attacker)"),
			0, Array(Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"),
			Custom String("20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"),
			Custom String("40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"),
			Custom String("60 Seconds")), 16)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Vampire (Heal 50% Of Damage Dealt)"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 17)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Pacifist (Any Damage Dealt Is Uno-Reversed Back)"),
			0, Array(Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"),
			Custom String("20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"),
			Custom String("40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"),
			Custom String("60 Seconds")), 18)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Projectile Effects"), Custom String("No Arc (Removes Gravity From Projectile)"), 0,
			Array(Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"),
			Custom String("20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"),
			Custom String("40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"),
			Custom String("60 Seconds")), 0)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Projectile Effects"), Custom String("Strong Arc (300% Gravity For Projectiles)"), 0,
			Array(Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"),
			Custom String("20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"),
			Custom String("40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"),
			Custom String("60 Seconds")), 1)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Projectile Effects"), Custom String(
			"Slow Projectiles (Projectiles Speed Reduced To 25%)"), 0, Array(Custom String("Disabled"), Custom String("5 Seconds"),
			Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"), Custom String("25 Seconds"),
			Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"), Custom String("45 Seconds"),
			Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 2)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Projectile Effects"), Custom String(
			"Hitscan (Sets Projectile Speed So High It Becomes Hitscan)"), 0, Array(Custom String("Disabled"), Custom String("5 Seconds"),
			Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"), Custom String("25 Seconds"),
			Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"), Custom String("45 Seconds"),
			Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 3)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Movement Effects"), Custom String("Snail (Set Move Speed To 25%)"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 6)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Hero Effects"), Custom String(
			"Hammer Time (Force Use Torb Hammer, Hammer Deals 3x Damage)"), 0, Array(Custom String("Disabled"), Custom String("5 Seconds"),
			Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"), Custom String("25 Seconds"),
			Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"), Custom String("45 Seconds"),
			Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 12)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Camera Effects"), Custom String("Third Person"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 1)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Mind Control"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 19)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Long Jump"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 20)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Script Kiddie (Aimbot)"), 0, Array(Custom String(
			"Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 21)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Daylight Burns"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 22)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String(
			"I Always Come Back (If Killed During Effect Resurrect With 0.25 Max HP)"), 0, Array(Custom String("Disabled"), Custom String(
			"5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"), Custom String(
			"25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"), Custom String(
			"45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 23)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Gravity Effects"), Custom String("Low Gravity"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 4)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("No Cooldowns (Includes Charge And Resource)"), 0,
			Array(Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"),
			Custom String("20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"),
			Custom String("40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"),
			Custom String("60 Seconds")), 24)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String(
			"Freecam (Leaves Player Where Freecam Was When Ended)"), 0, Array(Custom String("Disabled"), Custom String("5 Seconds"),
			Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"), Custom String("25 Seconds"),
			Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"), Custom String("45 Seconds"),
			Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 25)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Workshop Effects"), Custom String("Swap Team (Swap Team With A Random Player From The Other Team)"), 0, Array(Custom String(
			"Disabled"), Custom String("Enabled")), 26)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Movement Effects"), Custom String(
			"Speed Is Key (300% Movement Speed, The Speed Of A Reinhardt Charge)"), 0, Array(Custom String("Disabled"), Custom String(
			"5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"), Custom String(
			"25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"), Custom String(
			"45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 6)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Hero Effects"), Custom String("Remote Unit"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 14)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Your The Bomb"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 27)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Workshop Effects"), Custom String("Invert Current Velocity"), 0, Array(Custom String("Disabled"), Custom String("Enabled")),
			28)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Objective Bound"), 0, Array(Custom String(
			"Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 29)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Invert Movement"), 0, Array(Custom String(
			"Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 30)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Sensitivity Effects"), Custom String("Linked Sensitivity To Movement"), 0, Array(
			Custom String("Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String(
			"20 Seconds"), Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String(
			"40 Seconds"), Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String(
			"60 Seconds")), 0)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Sensitivity Effects"), Custom String("Low Sensitivity"), 0, Array(Custom String(
			"Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 1)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Sensitivity Effects"), Custom String("High Sensitivity"), 0, Array(Custom String(
			"Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 2)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Sensitivity Effects"), Custom String("Random Sensitivity"), 0, Array(Custom String(
			"Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 3)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Hero Effects"), Custom String("Split Personality"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 14)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Hide Other Effects"), 0, Array(Custom String(
			"Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 31)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Workshop Effects"), Custom String("Visual Hallucination"), 0, Array(Custom String("Disabled"), Custom String("Enabled")), 32)
			]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, True)[Workshop Setting Combo(Custom String(
			"Workshop Effects"), Custom String("Audio Hallucination"), 0, Array(Custom String("Disabled"), Custom String("Enabled")), 33)
			]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Realism Mode"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 34)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Ride Random Player"), 0, Array(Custom String(
			"Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 35)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Random Healthpool"), 0, Array(Custom String(
			"Disabled"), Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 36)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Drunk"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 37)]);
		Modify Global Variable(Effect_Settings, Append To Array, Array(False, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60)
			[Workshop Setting Combo(Custom String("Workshop Effects"), Custom String("Stun Gun"), 0, Array(Custom String("Disabled"),
			Custom String("5 Seconds"), Custom String("10 Seconds"), Custom String("15 Seconds"), Custom String("20 Seconds"),
			Custom String("25 Seconds"), Custom String("30 Seconds"), Custom String("35 Seconds"), Custom String("40 Seconds"),
			Custom String("45 Seconds"), Custom String("50 Seconds"), Custom String("55 Seconds"), Custom String("60 Seconds")), 38)]);
	}
}

rule("Global Timer")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Is Game In Progress || Is Waiting For Players) == True;
	}

	actions
	{
		Destroy All Progress Bar HUD Text;
		Create Progress Bar HUD Text(All Players(All Teams), Global.Timer, Null, Top, -5, Color(Purple), Color(White),
			Visible To Values and Color, Default Visibility);
		While(Is Game In Progress || Is Waiting For Players);
			Global.Timer = 0;
			Chase Global Variable Over Time(Timer, 100, Workshop Setting Integer(Custom String("Game"), Custom String("Time Between Effects"),
				30, 5, 300, 0), Destination and Duration);
			Wait Until(Global.Timer == 100, 9999);
			All Players(All Teams).Trigger_Effect = Custom String("");
			All Players(All Teams).Trigger_Effect = Random Value In Array(Filtered Array(Global.Effects,
				Global.Effect_Settings[Current Array Index] != False));
		End;
	}
}

rule("Anti-Invisable Barriers")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Update Every Frame(Ray Cast Hit Position(World Vector Of(Vector(0, 0.100, 0), Event Player, Rotation And Translation),
			World Vector Of(Vector(0, 0.100, 0), Event Player, Rotation And Translation) + Velocity Of(Event Player), Null, Event Player,
			False)) == World Vector Of(Vector(0, 0.100, 0), Event Player, Rotation And Translation) + Velocity Of(Event Player);
		Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Velocity Of(Event Player), Null,
			Event Player, False)) == Eye Position(Event Player) + Velocity Of(Event Player);
		Workshop Setting Toggle(Custom String("Game"), Custom String("Remove Invisable Barriers"), True, 0) == True;
	}

	actions
	{
		Disable Movement Collision With Environment(Event Player, False);
		Wait Until(Update Every Frame(Ray Cast Hit Position(World Vector Of(Vector(0, 0.100, 0), Event Player, Rotation And Translation),
			World Vector Of(Vector(0, 0.100, 0), Event Player, Rotation And Translation) + Velocity Of(Event Player), Null, Event Player,
			False)) != World Vector Of(Vector(0, 0.100, 0), Event Player, Rotation And Translation) + Velocity Of(Event Player)
			|| Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Velocity Of(Event Player),
			Null, Event Player, False)) != Eye Position(Event Player) + Velocity Of(Event Player), 99999);
		Wait Until(Event Player.Active_Effects_ID[25] == 0, 99999);
		Enable Movement Collision With Environment(Event Player);
	}
}

rule("Reset Trigger Effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Trigger_Effect != Custom String("");
	}

	actions
	{
		Wait(0.250, Abort When False);
		Event Player.Trigger_Effect = Custom String("");
		Loop If Condition Is True;
	}
}

rule("Trigger Effects")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Trigger_Effect != Custom String("");
	}

	actions
	{
		If(Is True For Any(Array(Custom String("Hero Swap"), Custom String("Mind Control")),
			Event Player.Trigger_Effect == Current Array Element) && Is True For All(Remove From Array(All Players(All Teams),
			Event Player), Current Array Element.Is_Bot == True));
			Event Player.Trigger_Effect = Remove From Array(Global.Effects, Array(Custom String("Hero Swap"), Custom String("Mind Control")));
		End;
		Skip If(Event Player.Is_Bot == True && Array Contains(Global.Broken_Bot_Effects, Event Player.Trigger_Effect), 1);
		Skip(1);
		Event Player.Trigger_Effect = Remove From Array(Global.Effects, Global.Broken_Bot_Effects);
		Event Player.Effect = Event Player.Trigger_Effect;
		Modify Player Variable(Event Player, Effects_Used, Append To Array, Event Player.Trigger_Effect);
		Event Player.Trigger_Effect = Custom String("");
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		If(Event Player.Effect == Custom String("Randomise Hero"));
			Start Rule(Randomise_Hero, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Randomise Ultimate Charge"));
			Event Player.Randomise = Random Real(Global.Effect_Settings[1] * -1, Global.Effect_Settings[1]);
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Player.Randomise);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ???????? ?????? ??? ???") : Custom String(
				"{1}{0}% Ultimate Charge", Round To Integer(Event Player.Randomise, Down), Event Player.Randomise == Absolute Value(
				Event Player.Randomise) ? Custom String("+") : Custom String("")));
			Abort;
		Else If(Event Player.Effect == Custom String("Remove Ultimate Charge"));
			Event Player.Randomise = Random Real(Global.Effect_Settings[2] * -1, 0);
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Player.Randomise);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ???????? ?????? ??? ???") : Custom String(
				"{1}{0}% Ultimate Charge", Round To Integer(Event Player.Randomise, Down), Event Player.Randomise == Absolute Value(
				Event Player.Randomise) ? Custom String("+") : Custom String("")));
			Abort;
		Else If(Event Player.Effect == Custom String("Add Ultimate Charge"));
			Event Player.Randomise = Random Real(0, Global.Effect_Settings[3]);
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Player.Randomise);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ???????? ?????? ??? ???") : Custom String(
				"{1}{0}% Ultimate Charge", Round To Integer(Event Player.Randomise, Down), Event Player.Randomise == Absolute Value(
				Event Player.Randomise) ? Custom String("+") : Custom String("")));
			Abort;
		Else If(Event Player.Effect == Custom String("Hacked"));
			Event Player.Randomise = Random Real(0.250, Global.Effect_Settings[4]);
			Set Status(Event Player, Null, Hacked, Event Player.Randomise);
			Cancel Primary Action(Event Player);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??? ???") : Custom String("Hacked For {0}s",
				Event Player.Randomise));
			Abort;
		Else If(Event Player.Effect == Custom String("Burning"));
			Event Player.Randomise = Random Real(0.250, Global.Effect_Settings[5]);
			Skip If(Has Status(Event Player, Burning), 1);
			Start Damage Over Time(Event Player, Null, Event Player.Randomise, 20);
			Set Status(Event Player, Null, Burning, Event Player.Randomise);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??????? ??? ???") : Custom String("Burning For {0}s",
				Event Player.Randomise));
			Abort;
		Else If(Event Player.Effect == Custom String("Knocked Down"));
			Event Player.Randomise = Random Real(0.250, Global.Effect_Settings[6]);
			Set Status(Event Player, Null, Knocked Down, Event Player.Randomise);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??????? ???? ??? ???") : Custom String(
				"Knocked Down For {0}s", Event Player.Randomise));
			Abort;
		Else If(Event Player.Effect == Custom String("Asleep"));
			Event Player.Randomise = Random Real(0.250, Global.Effect_Settings[7]);
			Set Status(Event Player, Null, Asleep, Event Player.Randomise);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??? ???") : Custom String("Asleep For {0}s",
				Event Player.Randomise));
			Abort;
		Else If(Event Player.Effect == Custom String("Frozen"));
			Event Player.Randomise = Random Real(0.250, Global.Effect_Settings[8]);
			Set Status(Event Player, Null, Frozen, Event Player.Randomise);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??? ???") : Custom String("Frozen For {0}s",
				Event Player.Randomise));
			Abort;
		Else If(Event Player.Effect == Custom String("Unkillable"));
			Event Player.Randomise = Random Real(0.250, Global.Effect_Settings[9]);
			Set Status(Event Player, Null, Unkillable, Event Player.Randomise);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????????? ??? ???") : Custom String("Unkillable For {0}s",
				Event Player.Randomise));
			Destroy Effect(Event Player.Active_Effects_ID[52]);
			Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Effect, Team Of(Event Player) == Team 1 ? Color(Team 1)
				: Color(Team 2), Event Player, 1, Visible To Position and Radius);
			Event Player.Active_Effects_ID[52] = Last Created Entity;
			Wait(Event Player.Randomise, Ignore Condition);
			Destroy Effect(Event Player.Active_Effects_ID[52]);
			Abort;
		Else If(Event Player.Effect == Custom String("Invincible"));
			Event Player.Randomise = Random Real(0.250, Global.Effect_Settings[10]);
			Set Status(Event Player, Null, Invincible, Event Player.Randomise);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????????? ??? ???") : Custom String("Invinible For {0}s",
				Event Player.Randomise));
			Destroy Effect(Event Player.Active_Effects_ID[52]);
			Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Effect, Team Of(Event Player) == Team 1 ? Color(Team 1)
				: Color(Team 2), Event Player, 1, Visible To Position and Radius);
			Event Player.Active_Effects_ID[52] = Last Created Entity;
			Wait(Event Player.Randomise, Ignore Condition);
			Destroy Effect(Event Player.Active_Effects_ID[52]);
			Abort;
		Else If(Event Player.Effect == Custom String("Phased Out"));
			Event Player.Randomise = Random Real(0.250, Global.Effect_Settings[11]);
			Set Status(Event Player, Null, Phased Out, Event Player.Randomise);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??? ??? ???") : Custom String("Phased Out For {0}s",
				Event Player.Randomise));
			Destroy Effect(Event Player.Active_Effects_ID[52]);
			Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Effect, Team Of(Event Player) == Team 1 ? Color(Team 1)
				: Color(Team 2), Event Player, 1, Visible To Position and Radius);
			Event Player.Active_Effects_ID[52] = Last Created Entity;
			Wait(Event Player.Randomise, Ignore Condition);
			Destroy Effect(Event Player.Active_Effects_ID[52]);
			Abort;
		Else If(Event Player.Effect == Custom String("Rooted"));
			Event Player.Randomise = Random Real(0.250, Global.Effect_Settings[12]);
			Set Status(Event Player, Null, Rooted, Event Player.Randomise);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??? ???") : Custom String("Rooted For {0}s",
				Event Player.Randomise));
			Abort;
		Else If(Event Player.Effect == Custom String("Stunned"));
			Event Player.Randomise = Random Real(0.250, Global.Effect_Settings[13]);
			Set Status(Event Player, Null, Stunned, Event Player.Randomise);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??????? ??? ???") : Custom String("Stunned For {0}s",
				Event Player.Randomise));
			Abort;
		Else If(Event Player.Effect == Custom String("Increased Healing"));
			Start Rule(Increased_Healing, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("No Healing"));
			Start Rule(No_Healing, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Wallhacks"));
			Start Rule(Wallhacks, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("OHKO"));
			Start Rule(OHKO, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Help My W Key Is Stuck"));
			Start Rule(Stuck_W, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Disable Random Direction"));
			Start Rule(Disable_Random_Direction, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Cruise Control"));
			Start Rule(Cruise_Control, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Suicide"));
			Kill(Event Player, Null);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????") : Custom String("Suicide"));
			Abort;
		Else If(Event Player.Effect == Custom String("Teleport To Spawn"));
			Start Rule(Teleport_Spawn, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Teleport To Objective"));
			Start Rule(Teleport_Objective, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Teleport To Random Player"));
			Start Rule(Teleport_Random_Player, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Teleport To Random Location"));
			Start Rule(Teleport_Random_Location, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Fake Teleport"));
			Start Rule(Fake_Teleport, Do Nothing);
			Abort;
		Else If(Event Player.Effect == Custom String("Scale Size Random"));
			Start Rule(Scale_Random, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Scale Size Big"));
			Start Rule(Scale_Big, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Scale Size Small"));
			Start Rule(Scale_Small, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Slippery"));
			Start Rule(Ice_Floor, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("No Gravity"));
			Start Rule(No_Gravity, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Use Random Ultimate"));
			Start Rule(Random_Ultimate, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Infinite Ammo"));
			Start Rule(Infinite_Ammo, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Refill Ammo"));
			Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
			Set Ammo(Event Player, 1, Max Ammo(Event Player, 1));
			Set Ability Resource(Event Player, Button(Primary Fire), 100);
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ????") : Custom String("Refill Ammo"));
			Abort;
		Else If(Event Player.Effect == Custom String("Refill Health"));
			Set Player Health(Event Player, Max Health(Event Player));
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??????") : Custom String("Refill Health"));
			Abort;
		Else If(Event Player.Effect == Custom String("Misclick"));
			Start Rule(Misclick, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Teleporter Malfunction"));
			Start Rule(Teleporter_Malfunction, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Heavy Hitter"));
			Start Rule(Heavy_Hitter, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Invisibility"));
			Start Rule(Invisibility, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Strong Gravity"));
			Start Rule(Strong_Gravity, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Gravitational Pull"));
			Start Rule(Gravitational_Pull, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Reverse Gravity"));
			Start Rule(Reverse_Gravity, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Seer"));
			Start Rule(Seer, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Emote"));
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????") : Custom String("Emote"));
			Communicate(Event Player, Emote Up);
			Communicate(Event Player, Emote Down);
			Communicate(Event Player, Emote Left);
			Communicate(Event Player, Emote Right);
			Abort;
		Else If(Event Player.Effect == Custom String("Damage Spounge"));
			Start Rule(Damage_Spounge, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Only Headshots"));
			Start Rule(Only_Headshots, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Only Crit"));
			Start Rule(Only_Crits, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("No Crit"));
			Start Rule(No_Crits, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Ragdoll"));
			Start Rule(Ragdoll, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Ragdoll Large"));
			Start Rule(Ragdoll_Large, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Ragdoll Small"));
			Start Rule(Ragdoll_Small, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Location Swap"));
			Start Rule(Location_Swap, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Hero Swap"));
			Start Rule(Hero_Swap, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Phantom"));
			Start Rule(Phantom, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("No Huds"));
			Start Rule(No_Huds, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("No Objective"));
			Start Rule(No_Objective, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("U-Turn"));
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??????") : Custom String("U-Turn"));
			Set Facing(Event Player, Direction From Angles(Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player),
				Eye Position(Event Player) - Facing Direction Of(Event Player))), Vertical Facing Angle Of(Event Player)), To World);
			Abort;
		Else If(Event Player.Effect == Custom String("Armor Up"));
			Start Rule(Armor_Up, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Thorns"));
			Start Rule(Thorns, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Vampire"));
			Start Rule(Vampire, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Pacifist"));
			Start Rule(Pacifist, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("No Arc"));
			Start Rule(No_Arc, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Strong Arc"));
			Start Rule(Strong_Arc, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Slow Projectile"));
			Start Rule(Slow_Projectile, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Only Hitscan"));
			Start Rule(Only_Hitscan, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Snail"));
			Start Rule(Snail, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Hammer Time"));
			Start Rule(Hammer_Time, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Third Person"));
			Start Rule(Third_Person, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Mind Control"));
			Start Rule(Mind_Control, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Long Jump"));
			Start Rule(Long_Jump, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Script Kiddie"));
			Start Rule(Script_Kiddie, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Daylight Burns"));
			Start Rule(Daylight_Burns, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Springtrap"));
			Start Rule(Springtrap, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Low Gravity"));
			Start Rule(Low_Gravity, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("No Cooldowns"));
			Start Rule(No_Cooldowns, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Freecam"));
			Start Rule(Freecam, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Swap Team"));
			Start Rule(Swap_Team, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Speed Is Key"));
			Start Rule(Speed_Is_Key, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Care Package"));
			Start Rule(Care_Package, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Your The Bomb"));
			Start Rule(Your_The_Bomb, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Invert Current Velocity"));
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??????? ????????") : Custom String(
				"Invert Current Velocity"));
			Apply Impulse(Event Player, Direction From Angles(Horizontal Angle From Direction(Velocity Of(Event Player) * -1), Is On Ground(
				Event Player) ? Min(Vertical Angle From Direction(Velocity Of(Event Player) * -1), -10) : Vertical Angle From Direction(
				Velocity Of(Event Player) * -1)), Speed Of In Direction(Event Player, Velocity Of(Event Player)) * 1.500, To World,
				Cancel Contrary Motion);
			Abort;
		Else If(Event Player.Effect == Custom String("Objective Bound"));
			Start Rule(Objective_Bound, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Verp"));
			Start Rule(Verp, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Invert Movement"));
			Start Rule(Invert_Movement, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Linked Camera"));
			Start Rule(Linked_Camera, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Low Sensitivity"));
			Start Rule(Low_Sensitivity, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("High Sensitivity"));
			Start Rule(High_Sensitivity, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Random Sensitivity"));
			Start Rule(Random_Sensitivity, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Split Personality"));
			Start Rule(Split_Personality, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Hide Effects"));
			Start Rule(Hide_Effects, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Replace Spawn"));
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ????? ???????? ???? ??????? ?????????")
				: Custom String("Next Spawn Replaced With Current Location"));
			Event Player.Replaced_Spawn_With = Array(Position Of(Event Player), Facing Direction Of(Event Player));
			Abort;
		Else If(Event Player.Effect == Custom String("Visual Hallucination"));
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ?????????????") : Custom String(
				"Visual Hallucination"));
			Event Player.Randomise = Random Integer(0, 4);
			If(Event Player.Randomise == 0);
				Play Effect(Event Player, Good Explosion, Random Value In Array(Array(Color(White), Color(Yellow), Color(Green), Color(Purple),
					Color(Red), Color(Blue), Color(Team 1), Color(Team 2), Color(Aqua), Color(Orange), Color(Sky Blue), Color(Turquoise), Color(
					Lime Green), Color(Black), Color(Rose), Color(Violet), Color(Gray), Custom Color(Random Real(0, 255), Random Real(0, 255),
					Random Real(0, 255), 255))), World Vector Of(Vector(Random Real(-5, 5), Random Real(-5, 5), Random Real(1, 5)), Event Player,
					Rotation And Translation), Random Real(1, 5));
			Else If(Event Player.Randomise == 1);
				Play Effect(Event Player, Bad Explosion, Random Value In Array(Array(Color(White), Color(Yellow), Color(Green), Color(Purple),
					Color(Red), Color(Blue), Color(Team 1), Color(Team 2), Color(Aqua), Color(Orange), Color(Sky Blue), Color(Turquoise), Color(
					Lime Green), Color(Black), Color(Rose), Color(Violet), Color(Gray), Custom Color(Random Real(0, 255), Random Real(0, 255),
					Random Real(0, 255), 255))), World Vector Of(Vector(Random Real(-5, 5), Random Real(-5, 5), Random Real(1, 5)), Event Player,
					Rotation And Translation), Random Real(1, 5));
			Else If(Event Player.Randomise == 2);
				Play Effect(Event Player, Ring Explosion, Random Value In Array(Array(Color(White), Color(Yellow), Color(Green), Color(Purple),
					Color(Red), Color(Blue), Color(Team 1), Color(Team 2), Color(Aqua), Color(Orange), Color(Sky Blue), Color(Turquoise), Color(
					Lime Green), Color(Black), Color(Rose), Color(Violet), Color(Gray), Custom Color(Random Real(0, 255), Random Real(0, 255),
					Random Real(0, 255), 255))), World Vector Of(Vector(Random Real(-5, 5), Random Real(-5, 5), Random Real(1, 5)), Event Player,
					Rotation And Translation), Random Real(1, 5));
			Else If(Event Player.Randomise == 3);
				Play Effect(Event Player, Good Pickup Effect, Random Value In Array(Array(Color(White), Color(Yellow), Color(Green), Color(Purple),
					Color(Red), Color(Blue), Color(Team 1), Color(Team 2), Color(Aqua), Color(Orange), Color(Sky Blue), Color(Turquoise), Color(
					Lime Green), Color(Black), Color(Rose), Color(Violet), Color(Gray), Custom Color(Random Real(0, 255), Random Real(0, 255),
					Random Real(0, 255), 255))), World Vector Of(Vector(Random Real(-5, 5), Random Real(-5, 5), Random Real(1, 5)), Event Player,
					Rotation And Translation), Random Real(1, 5));
			Else If(Event Player.Randomise == 4);
				Play Effect(Event Player, Bad Pickup Effect, Random Value In Array(Array(Color(White), Color(Yellow), Color(Green), Color(Purple),
					Color(Red), Color(Blue), Color(Team 1), Color(Team 2), Color(Aqua), Color(Orange), Color(Sky Blue), Color(Turquoise), Color(
					Lime Green), Color(Black), Color(Rose), Color(Violet), Color(Gray), Custom Color(Random Real(0, 255), Random Real(0, 255),
					Random Real(0, 255), 255))), World Vector Of(Vector(Random Real(-5, 5), Random Real(-5, 5), Random Real(1, 5)), Event Player,
					Rotation And Translation), Random Real(1, 5));
			End;
			Abort;
		Else If(Event Player.Effect == Custom String("Audio Hallucination"));
			Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????? ?????????????") : Custom String(
				"Audio Hallucination"));
			Event Player.Randomise = Random Integer(0, 4);
			If(Event Player.Randomise == 0);
				Play Effect(Event Player, Debuff Impact Sound, Null, World Vector Of(Vector(Random Real(-5, 5), Random Real(-5, 5), Random Real(1,
					5)), Event Player, Rotation And Translation), Random Real(1, 200));
			Else If(Event Player.Randomise == 1);
				Play Effect(Event Player, Buff Impact Sound, Null, World Vector Of(Vector(Random Real(-5, 5), Random Real(-5, 5), Random Real(1,
					5)), Event Player, Rotation And Translation), Random Real(1, 200));
			Else If(Event Player.Randomise == 2);
				Play Effect(Event Player, Ring Explosion Sound, Null, World Vector Of(Vector(Random Real(-5, 5), Random Real(-5, 5), Random Real(1,
					5)), Event Player, Rotation And Translation), Random Real(1, 200));
			Else If(Event Player.Randomise == 3);
				Play Effect(Event Player, Buff Explosion Sound, Null, World Vector Of(Vector(Random Real(-5, 5), Random Real(-5, 5), Random Real(1,
					5)), Event Player, Rotation And Translation), Random Real(1, 200));
			Else If(Event Player.Randomise == 4);
				Play Effect(Event Player, Explosion Sound, Null, World Vector Of(Vector(Random Real(-5, 5), Random Real(-5, 5), Random Real(1, 5)),
					Event Player, Rotation And Translation), Random Real(1, 200));
			End;
			Abort;
		Else If(Event Player.Effect == Custom String("Realistic"));
			Start Rule(Realistic, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Attach"));
			Start Rule(Attach, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Random Healthpool"));
			Start Rule(Random_Healthpool, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Drunk"));
			Start Rule(Drunk, Restart Rule);
			Abort;
		Else If(Event Player.Effect == Custom String("Stun Gun"));
			Event Player.Trigger_StunGun = True;
			Abort;
	}
}

rule("Hero : Save")
{
	event
	{
		Subroutine;
		Save_Hero;
	}

	actions
	{
		"Empty Save Array"
		Event Player.Save_Hero = Empty Array;
		"Save Hero"
		Event Player.Original_Hero = Hero Of(Event Player);
		"Save Health"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Health(Event Player));
		"Save Normal Health"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Health Of Type(Event Player, Health));
		"Save Armor Health"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Health Of Type(Event Player, Armor));
		"Save Shield Health"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Health Of Type(Event Player, Shields));
		"Save Brigitte Shield Bash Cooldown"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Cooldown(Event Player, Button(Primary Fire)));
		"Save Secondary Cooldowns"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Cooldown(Event Player, Button(Secondary Fire)));
		"Save Ability 1 Cooldowns"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Cooldown(Event Player, Button(Ability 1)));
		"Save Ability 2 Cooldowns"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Cooldown(Event Player, Button(Ability 2)));
		"Save Hanzo Lunge & Lifeweaver Dash Cooldowns"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Cooldown(Event Player, Button(Jump)));
		"Save Wreaking Ball Piledriver Cooldown"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Cooldown(Event Player, Button(Crouch)));
		"Save Melee Cooldown"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Cooldown(Event Player, Button(Melee)));
		"Save Secondary Charge"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Charge(Event Player, Button(Secondary Fire)));
		"Save Ability 1 Charge"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Charge(Event Player, Button(Ability 1)));
		"Save Ability 2 Charge"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Charge(Event Player, Button(Ability 2)));
		"Save Moria Heal Resource"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Resource(Event Player, Button(Primary Fire)));
		"Save Secondary Resource"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Resource(Event Player, Button(Secondary Fire)));
		"Save Ability 1 Resource"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Resource(Event Player, Button(Ability 1)));
		"Save Ability 2 Resource"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ability Resource(Event Player, Button(Ability 2)));
		"Save Weapon Equiped"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Weapon(Event Player));
		"Save Primary Weapon Ammo"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ammo(Event Player, 0));
		"Save Secondary Weapon Ammo"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ammo(Event Player, 1));
		"Save Hero Form"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Is In Alternate Form(Event Player));
		"Save Ultimate Charge"
		Modify Player Variable(Event Player, Save_Hero, Append To Array, Ultimate Charge Percent(Event Player));
	}
}

rule("Hero : Load")
{
	event
	{
		Subroutine;
		Load_Hero;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Event Player.Original_Hero);
		Wait(0.010, Ignore Condition);
		If(Event Player.Original_Hero == Hero(D.Va) && Event Player.Save_Hero[21] == True);
			Kill(Event Player, Null);
			Wait Until(Is In Alternate Form(Event Player), 99999);
		End;
		Set Player Health(Event Player, Event Player.Save_Hero[0]);
		Set Ability Cooldown(Event Player, Button(Primary Fire), Event Player.Save_Hero[4]);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), Event Player.Save_Hero[5]);
		Set Ability Cooldown(Event Player, Button(Ability 1), Event Player.Save_Hero[6]);
		Set Ability Cooldown(Event Player, Button(Ability 2), Event Player.Save_Hero[7]);
		Set Ability Cooldown(Event Player, Button(Jump), Event Player.Save_Hero[8]);
		Set Ability Cooldown(Event Player, Button(Crouch), Event Player.Save_Hero[9]);
		Set Ability Cooldown(Event Player, Button(Melee), Event Player.Save_Hero[10]);
		Set Ability Charge(Event Player, Button(Secondary Fire), Event Player.Save_Hero[11]);
		Set Ability Charge(Event Player, Button(Ability 1), Event Player.Save_Hero[12]);
		Set Ability Charge(Event Player, Button(Ability 2), Event Player.Save_Hero[13]);
		Set Ability Resource(Event Player, Button(Primary Fire), Event Player.Save_Hero[14]);
		Set Ability Resource(Event Player, Button(Secondary Fire), Event Player.Save_Hero[15]);
		Set Ability Resource(Event Player, Button(Ability 1), Event Player.Save_Hero[16]);
		Set Ability Resource(Event Player, Button(Ability 2), Event Player.Save_Hero[17]);
		Set Weapon(Event Player, Event Player.Original_Hero == Hero(Lifeweaver) ? (Event Player.Save_Hero[21] ? 2 : 1)
			: Event Player.Save_Hero[17]);
		Skip If(Is True For Any(Array(Hero(Orisa), Hero(Lifeweaver)), Event Player.Original_Hero == Current Array Element), 2);
		Set Ammo(Event Player, 0, Min(Event Player.Save_Hero[19], Max Ammo(Event Player, 0)));
		Set Ammo(Event Player, 1, Min(Event Player.Save_Hero[20], Max Ammo(Event Player, 1)));
		Stop Forcing Player To Be Hero(Event Player);
		Set Ultimate Charge(Event Player, Event Player.Save_Hero[22]);
		Event Player.Original_Hero = Null;
	}
}

rule("Bindings : Disable")
{
	event
	{
		Subroutine;
		Disable_Bindings;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Disallow Button(Event Player, Button(Ultimate));
		Disallow Button(Event Player, Button(Interact));
		Set Jump Enabled(Event Player, False);
		Set Crouch Enabled(Event Player, False);
		Set Melee Enabled(Event Player, False);
		Set Reload Enabled(Event Player, False);
	}
}

rule("Bindings : Enable")
{
	event
	{
		Subroutine;
		Enable_Bindings;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Button(Ultimate));
		Allow Button(Event Player, Button(Interact));
		Set Jump Enabled(Event Player, True);
		Set Crouch Enabled(Event Player, True);
		Set Melee Enabled(Event Player, True);
		Set Reload Enabled(Event Player, True);
	}
}

rule("Bindings : Disallow")
{
	event
	{
		Subroutine;
		Disallow_Bindings;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Ultimate));
		Disallow Button(Event Player, Button(Interact));
		Disallow Button(Event Player, Button(Jump));
		Disallow Button(Event Player, Button(Crouch));
		Disallow Button(Event Player, Button(Melee));
		Disallow Button(Event Player, Button(Reload));
	}
}

rule("Bindings : Allow")
{
	event
	{
		Subroutine;
		Allow_Bindings;
	}

	actions
	{
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ultimate));
		Allow Button(Event Player, Button(Interact));
		Allow Button(Event Player, Button(Jump));
		Allow Button(Event Player, Button(Crouch));
		Allow Button(Event Player, Button(Melee));
		Allow Button(Event Player, Button(Reload));
	}
}

rule("Start : Throttle")
{
	event
	{
		Subroutine;
		Start_Throttle;
	}

	actions
	{
		If(Is True For All(Array(55), Event Player.Active_Effects_ID[Current Array Element] == 0)
			&& Event Player.Active_Effects_ID[3] != 0);
			Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 1);
		Else If(Is True For All(Array(), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(3, 55),
				Event Player.Active_Effects_ID[Current Array Element] != 0));
			Start Forcing Throttle(Event Player, 0, 0, 1, 1, 0, 1);
	}
}

rule("Start : Throttle In Direction")
{
	event
	{
		Subroutine;
		Start_Throttle_In_Direction;
	}

	actions
	{
		If(Is True For All(Array(), Event Player.Active_Effects_ID[Current Array Element] == 0)
			&& Event Player.Active_Effects_ID[41] != 0);
			Start Throttle In Direction(Event Player, Update Every Frame(World Vector Of(Throttle Of(Evaluate Once(First Of(Filtered Array(
				All Players(All Teams), Current Array Element.Mind_Control_Target == Event Player)))), Evaluate Once(First Of(Filtered Array(
				All Players(All Teams), Current Array Element.Mind_Control_Target == Event Player))), Rotation)), Update Every Frame(
				Magnitude Of(Throttle Of(Evaluate Once(First Of(Filtered Array(All Players(All Teams),
				Current Array Element.Mind_Control_Target == Event Player)))))), To World, Replace existing throttle, Direction and Magnitude);
	}
}

rule("Start : Transforming Throttle")
{
	event
	{
		Subroutine;
		Start_Transforming_Throttle;
	}

	actions
	{
		If(Is True For All(Array(55), Event Player.Active_Effects_ID[Current Array Element] == 0)
			&& Event Player.Active_Effects_ID[4] != 0);
			If(Event Player.Disabled_Direction == Forward);
				Start Transforming Throttle(Event Player, 1, Update Every Frame(Z Component Of(Throttle Of(Event Player)) > 0 ? 0.010 : 1),
					Update Every Frame(Facing Direction Of(Event Player)));
			Else If(Event Player.Disabled_Direction == Backward);
				Start Transforming Throttle(Event Player, 1, Update Every Frame(Z Component Of(Throttle Of(Event Player)) < 0 ? 0.010 : 1),
					Update Every Frame(Facing Direction Of(Event Player)));
			Else If(Event Player.Disabled_Direction == Left);
				Start Transforming Throttle(Event Player, Update Every Frame(X Component Of(Throttle Of(Event Player)) > 0 ? 0.010 : 1), 1,
					Update Every Frame(Facing Direction Of(Event Player)));
			Else If(Event Player.Disabled_Direction == Right);
				Start Transforming Throttle(Event Player, Update Every Frame(X Component Of(Throttle Of(Event Player)) < 0 ? 0.010 : 1), 1,
					Update Every Frame(Facing Direction Of(Event Player)));
			End;
		Else If(Is True For All(Array(4), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[55] != 0);
			Start Transforming Throttle(Event Player, 1, 1, Update Every Frame(Facing Direction Of(Event Player) * -1));
		Else If(Is True For All(Array(), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(4, 55),
				Event Player.Active_Effects_ID[Current Array Element] != 0));
			If(Event Player.Disabled_Direction == Forward);
				Start Transforming Throttle(Event Player, 1, Update Every Frame(Z Component Of(Throttle Of(Event Player)) < 0 ? 0.010 : 1),
					Update Every Frame(Facing Direction Of(Event Player) * -1));
			Else If(Event Player.Disabled_Direction == Backward);
				Start Transforming Throttle(Event Player, 1, Update Every Frame(Z Component Of(Throttle Of(Event Player)) > 0 ? 0.010 : 1),
					Update Every Frame(Facing Direction Of(Event Player) * -1));
			Else If(Event Player.Disabled_Direction == Left);
				Start Transforming Throttle(Event Player, Update Every Frame(X Component Of(Throttle Of(Event Player)) < 0 ? 0.010 : 1), 1,
					Update Every Frame(Facing Direction Of(Event Player) * -1));
			Else If(Event Player.Disabled_Direction == Right);
				Start Transforming Throttle(Event Player, Update Every Frame(X Component Of(Throttle Of(Event Player)) > 0 ? 0.010 : 1), 1,
					Update Every Frame(Facing Direction Of(Event Player) * -1));
			End;
		Else If(Is True For All(Array(4, 55), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[71] != 0);
			Start Transforming Throttle(Event Player, Update Every Frame(0.850 - Min(Distance Between(Vector(Total Time Elapsed * Random Real(
				1, 10) % 100, 0, 0), Vector(0, 0, 0)) / 100, 0.350)), Update Every Frame(0.700 - Min(Distance Between(Vector(
				Total Time Elapsed * Random Real(1, 10) % 100, 0, 0), Vector(0, 0, 0)) / 100, 0.200)), Update Every Frame(
				Direction From Angles(Horizontal Facing Angle Of(Event Player) + Update Every Frame(Event Player.Drunk_Effect_Movement),
				Vertical Facing Angle Of(Event Player))));
	}
}

rule("Start : Accelerating")
{
	event
	{
		Subroutine;
		Start_Accelerating;
	}

	actions
	{
		If(Is True For All(Array(18), Event Player.Active_Effects_ID[Current Array Element] == 0)
			&& Event Player.Active_Effects_ID[5] != 0);
			Start Accelerating(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 0), 999,
				Event Player.Cruise_Control_Throttle, To World, Direction Rate and Max Speed);
		Else If(Is True For All(Array(5, 18), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[10] != 0);
			Start Accelerating(Event Player, Direction Towards(Position Of(Event Player), Position Of(Event Player)
				+ Event Player.Slide_Direction), 999, Event Player.Slide_Direction == Vector(0, 0, 0) ? 0 : 5, To World,
				Direction Rate and Max Speed);
		Else If(Is True For All(Array(5), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[18] != 0);
			Start Accelerating(Event Player, Up, 999, 5, To World, Direction Rate and Max Speed);
		Else If(Is True For All(Array(), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(5, 18),
				Event Player.Active_Effects_ID[Current Array Element] != 0));
			Start Accelerating(Event Player, Total Time Elapsed % 0.200 <= 0.100 ? Direction From Angles(Horizontal Facing Angle Of(
				Event Player), 0) : Up, 999, Total Time Elapsed % 0.200 <= 0.100 ? Event Player.Cruise_Control_Throttle : 5, To World,
				Direction Rate and Max Speed);
	}
}

rule("Start : Camera")
{
	event
	{
		Subroutine;
		Start_Camera;
	}

	actions
	{
		If(Is True For All(Array(39, 40, 48, 50), Event Player.Active_Effects_ID[Current Array Element] == 0)
			&& Event Player.Active_Effects_ID[20] != 0);
			Start Camera(Event Player, Eye Position(Event Player.Seer_Target) + World Vector Of(Vector(0, 0.200, 0.500),
				Event Player.Seer_Target, Rotation), Eye Position(Event Player.Seer_Target) + World Vector Of(Vector(0, 0.200, 1),
				Event Player.Seer_Target, Rotation), 0);
		Else If(Is True For All(Array(20, 40, 48), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For Any(Array(39,
				41, 50), Event Player.Active_Effects_ID[Current Array Element] != 0));
			Start Camera(Event Player, Update Every Frame(World Vector Of(First Of(Event Player.Hero_Size), Event Player,
				Rotation And Translation)), Update Every Frame(Eye Position(Event Player) + Facing Direction Of(Event Player) * 99), 0);
		Else If(Is True For All(Array(40, 48), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(20,
				39), Event Player.Active_Effects_ID[Current Array Element] != 0));
			Start Camera(Event Player, Update Every Frame(World Vector Of(Global.Third_Person_Pos[Index Of Array Value(Global.All_Heros,
				Is Duplicating(Event Player.Seer_Target) ? Hero Being Duplicated(Event Player.Seer_Target) : Hero Of(Event Player.Seer_Target))
				], Event Player.Seer_Target, Rotation And Translation)), Update Every Frame(Eye Position(Event Player.Seer_Target)
				+ Facing Direction Of(Event Player.Seer_Target) * 99), 0);
		Else If(Is True For All(Array(20, 48), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[40] != 0);
			Start Camera(Event Player, Update Every Frame(World Vector Of(First Of(Event Player.Mind_Control_Target.Hero_Size),
				Event Player.Mind_Control_Target, Rotation And Translation)), Update Every Frame(Eye Position(Event Player.Mind_Control_Target)
				+ Facing Direction Of(Event Player.Mind_Control_Target) * 99), 0);
		Else If(Is True For All(Array(), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[48] != 0);
			Start Camera(Event Player, Update Every Frame(Event Player.Freecam_Pos + Vector(0, Evaluate Once(Distance Between(Eye Position(
				Event Player), Position Of(Event Player))), 0)), Update Every Frame(Event Player.Freecam_Pos + Vector(0, Evaluate Once(
				Distance Between(Eye Position(Event Player), Position Of(Event Player))), 0) + Facing Direction Of(Event Player)), 0);
	}
}

rule("Start : Facing")
{
	event
	{
		Subroutine;
		Start_Facing;
	}

	actions
	{
		If(Is True For All(Array(43), Event Player.Active_Effects_ID[Current Array Element] == 0)
			&& Event Player.Active_Effects_ID[41] != 0);
			Start Facing(Event Player, Update Every Frame(Facing Direction Of(Evaluate Once(First Of(Filtered Array(All Players(All Teams),
				Current Array Element.Mind_Control_Target == Event Player))))), Is True For Any(Array(Has Status(Event Player, Knocked Down),
				Has Status(Event Player, Asleep), Has Status(Event Player, Frozen), Has Status(Event Player, Stunned), Is Dead(Event Player)),
				Current Array Element) ? 0 : 9999, To World, Direction and Turn Rate);
		Else If((Is True For All(Array(), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[43] != 0 && Is True For Any(Global.Aimbot_Triggers[Index Of Array Value(Global.All_Heros,
				Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player))], Is Button Held(Event Player,
				Current Array Element))) || Is True For All(Array(Entity Exists(Event Player.Script_Target),
				Event Player.Active_Effects_ID[43] != 0, Is Alive(Event Player)), Current Array Element));
			Start Facing(Event Player, Update Every Frame(Direction From Angles(Horizontal Angle From Direction(Direction Towards(Eye Position(
				Event Player), Eye Position(Event Player.Script_Target) + Velocity Of(Event Player.Script_Target) * (Distance Between(
				Eye Position(Event Player), Eye Position(Event Player.Script_Target)) / Event Player.Script_Projectile_Speed))),
				Vertical Angle From Direction(Direction Towards(Eye Position(Event Player), Eye Position(Event Player.Script_Target)))
				+ Distance Between(Eye Position(Event Player), Eye Position(Event Player.Script_Target))
				* Event Player.Script_Projectile_Arc)), 9999, To World, Direction and Turn Rate);
	}
}

rule("Start : Forcing Position")
{
	event
	{
		Subroutine;
		Start_Forcing_Position;
	}

	actions
	{
		If(Is True For All(Array(48), Event Player.Active_Effects_ID[Current Array Element] == 0)
			&& Event Player.Active_Effects_ID[40] != 0);
			Start Forcing Player Position(Event Player, Position Of(Event Player), False);
		Else If(Is True For All(Array(), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[48] != 0);
			Start Forcing Player Position(Event Player, Event Player.Freecam_Pos, True);
		Else If(Is True For All(Array(40, 48), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[51] != 0);
			Start Forcing Player Position(Event Player, Vector(0, 9999, 0), True);
	}
}

rule("Modify : Speed")
{
	event
	{
		Subroutine;
		Modify_Speed;
	}

	actions
	{
		If(Is True For All(Array(37, 49), Event Player.Active_Effects_ID[Current Array Element] == 0)
			&& Event Player.Active_Effects_ID[10] != 0);
			Set Move Speed(Event Player, 125);
		Else If(Is True For All(Array(10, 49), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[37] != 0);
			Set Move Speed(Event Player, 25);
		Else If(Is True For All(Array(49), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(10, 37),
				Event Player.Active_Effects_ID[Current Array Element] != 0));
			Set Move Speed(Event Player, 50);
		Else If(Is True For All(Array(10, 37), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[49] != 0);
			Set Move Speed(Event Player, 300);
		Else If(Is True For All(Array(10), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(37, 49),
				Event Player.Active_Effects_ID[Current Array Element] != 0));
			Set Move Speed(Event Player, 225);
		Else If(Is True For All(Array(37), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(10, 49),
				Event Player.Active_Effects_ID[Current Array Element] != 0));
			Set Move Speed(Event Player, 325);
		Else If(Is True For All(Array(), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(10, 37, 49),
				Event Player.Active_Effects_ID[Current Array Element] != 0));
			Set Move Speed(Event Player, 250);
	}
}

rule("Modify : Gravity")
{
	event
	{
		Subroutine;
		Modify_Gravity;
	}

	actions
	{
		If(Is True For All(Array(16), Event Player.Active_Effects_ID[Current Array Element] == 0)
			&& Event Player.Active_Effects_ID[11] != 0);
			Set Gravity(Event Player, 0);
		Else If(Is True For All(Array(11, 46), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[16] != 0);
			Set Gravity(Event Player, 300);
		Else If(Is True For All(Array(46), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(11, 16),
				Event Player.Active_Effects_ID[Current Array Element] != 0));
			Set Gravity(Event Player, 200);
		Else If(Is True For All(Array(11), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(16, 46),
				Event Player.Active_Effects_ID[Current Array Element] != 0));
			Set Gravity(Event Player, 225);
		Else If(Is True For All(Array(), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(11, 16, 46),
				Event Player.Active_Effects_ID[Current Array Element] != 0));
			Set Gravity(Event Player, 150);
		Else If(Is True For All(Array(11, 16), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(46),
				Event Player.Active_Effects_ID[Current Array Element] != 0));
			Set Gravity(Event Player, 25);
	}
}

rule("Modify : Projectile Speed")
{
	event
	{
		Subroutine;
		Modify_Projectile_Speed;
	}

	actions
	{
		If(Is True For All(Array(36), Event Player.Active_Effects_ID[Current Array Element] == 0)
			&& Event Player.Active_Effects_ID[35] != 0);
			Set Projectile Speed(Event Player, 25);
		Else If(Is True For All(Array(), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[36] != 0);
			Set Projectile Speed(Event Player, 500);
	}
}

rule("Modify : Projectile Gravity")
{
	event
	{
		Subroutine;
		Modify_Projectile_Gravity;
	}

	actions
	{
		If(Is True For All(Array(34, 36), Event Player.Active_Effects_ID[Current Array Element] == 0)
			&& Event Player.Active_Effects_ID[33] != 0);
			Set Projectile Gravity(Event Player, 0);
		Else If(Is True For All(Array(33, 36), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[34] != 0);
			Set Projectile Gravity(Event Player, 300);
		Else If(Is True For All(Array(), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[36] != 0);
			Set Projectile Gravity(Event Player, 0);
		Else If(Is True For All(Array(36), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(33, 34),
				Event Player.Active_Effects_ID[Current Array Element] != 0));
			Set Projectile Gravity(Event Player, 200);
	}
}

rule("Modify : Camera")
{
	event
	{
		Subroutine;
		Modify_Camera;
	}

	actions
	{
		If(Is True For All(Array(56, 58, 59), Event Player.Active_Effects_ID[Current Array Element] == 0)
			&& Event Player.Active_Effects_ID[57] != 0);
			Set Aim Speed(Event Player, 25);
		Else If(Is True For All(Array(56, 57, 59), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[58] != 0);
			Set Aim Speed(Event Player, 300);
		Else If(Is True For All(Array(56, 59), Event Player.Active_Effects_ID[Current Array Element] == 0) && Is True For All(Array(57,
				58), Event Player.Active_Effects_ID[Current Array Element] != 0));
			Set Aim Speed(Event Player, 225);
		Else If(Is True For All(Array(56, 57, 58), Event Player.Active_Effects_ID[Current Array Element] == 0)
				&& Event Player.Active_Effects_ID[59] != 0);
			Set Aim Speed(Event Player, Random Real(10, 500));
	}
}

rule("Stop : Throttle")
{
	event
	{
		Subroutine;
		Stop_Throttle;
	}

	actions
	{
		Skip If(Is True For Any(Array(3), Event Player.Active_Effects_ID[Current Array Element] != 0), 2);
		Stop Forcing Throttle(Event Player);
		Abort;
		Start Rule(Start_Throttle, Restart Rule);
	}
}

rule("Stop : Throttle In Direction")
{
	event
	{
		Subroutine;
		Stop_Throttle_In_Direction;
	}

	actions
	{
		Skip If(Is True For Any(Array(41), Event Player.Active_Effects_ID[Current Array Element] != 0), 2);
		Stop Throttle In Direction(Event Player);
		Abort;
		Start Rule(Start_Throttle_In_Direction, Restart Rule);
	}
}

rule("Stop : Transforming Throttle")
{
	event
	{
		Subroutine;
		Stop_Transforming_Throttle;
	}

	actions
	{
		Skip If(Is True For Any(Array(4), Event Player.Active_Effects_ID[Current Array Element] != 0), 2);
		Stop Transforming Throttle(Event Player);
		Abort;
		Start Rule(Start_Transforming_Throttle, Restart Rule);
	}
}

rule("Stop : Accelerating")
{
	event
	{
		Subroutine;
		Stop_Accelerating;
	}

	actions
	{
		Skip If(Is True For Any(Array(5, 10, 18), Event Player.Active_Effects_ID[Current Array Element] != 0), 2);
		Stop Accelerating(Event Player);
		Abort;
		Start Rule(Start_Accelerating, Restart Rule);
	}
}

rule("Stop : Camera")
{
	event
	{
		Subroutine;
		Stop_Camera;
	}

	actions
	{
		Skip If(Is True For Any(Array(20, 39, 40, 41, 48, 50), Event Player.Active_Effects_ID[Current Array Element] != 0), 2);
		Stop Camera(Event Player);
		Abort;
		Start Rule(Start_Camera, Restart Rule);
	}
}

rule("Stop : Facing")
{
	event
	{
		Subroutine;
		Stop_Facing;
	}

	actions
	{
		Skip If(Is True For Any(Array(41, 43), Event Player.Active_Effects_ID[Current Array Element] != 0), 2);
		Stop Facing(Event Player);
		Abort;
		Skip If(Is True For Any(Array(41), Event Player.Active_Effects_ID[Current Array Element] != 0), 3);
		Skip If(Is True For Any(Global.Aimbot_Triggers[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))], Is Button Held(Event Player, Current Array Element))
			&& Is True For All(Array(Entity Exists(Event Player.Script_Target), Event Player.Active_Effects_ID[43] != 0, Is Alive(
			Event Player)), Current Array Element), 2);
		Stop Facing(Event Player);
		Abort;
		Start Rule(Start_Facing, Restart Rule);
	}
}

rule("Stop : Invisibility")
{
	event
	{
		Subroutine;
		Stop_Invisibility;
	}

	actions
	{
		If(Is True For Any(Array(15, 40, 48), Event Player.Active_Effects_ID[Current Array Element] != 0));
			Set Invisible(Event Player, All);
		Else;
			Set Invisible(Event Player, None);
		End;
	}
}

rule("Stop : Forcing Position")
{
	event
	{
		Subroutine;
		Stop_Forcing_Position;
	}

	actions
	{
		Skip If(Is True For Any(Array(40, 48, 51), Event Player.Active_Effects_ID[Current Array Element] != 0), 2);
		Stop Forcing Player Position(Event Player);
		Abort;
		Start Rule(Start_Forcing_Position, Restart Rule);
	}
}

rule("Reset : Speed")
{
	event
	{
		Subroutine;
		Reset_Speed;
	}

	actions
	{
		Skip If(Is True For Any(Array(10, 37, 49), Event Player.Active_Effects_ID[Current Array Element] != 0), 2);
		Set Move Speed(Event Player, 100);
		Abort;
		Start Rule(Modify_Speed, Restart Rule);
	}
}

rule("Reset : Gravity")
{
	event
	{
		Subroutine;
		Reset_Gravity;
	}

	actions
	{
		Skip If(Is True For Any(Array(11, 16, 46), Event Player.Active_Effects_ID[Current Array Element] != 0), 2);
		Set Gravity(Event Player, 100);
		Abort;
		Start Rule(Modify_Gravity, Restart Rule);
	}
}

rule("Reset : Projectile Speed")
{
	event
	{
		Subroutine;
		Reset_Projectile_Speed;
	}

	actions
	{
		Skip If(Is True For Any(Array(35, 36), Event Player.Active_Effects_ID[Current Array Element] != 0), 2);
		Set Projectile Speed(Event Player, 100);
		Abort;
		Start Rule(Modify_Projectile_Speed, Restart Rule);
	}
}

rule("Reset : Projectile Gravity")
{
	event
	{
		Subroutine;
		Reset_Projectile_Gravity;
	}

	actions
	{
		Skip If(Is True For Any(Array(33, 34, 36), Event Player.Active_Effects_ID[Current Array Element] != 0), 2);
		Set Projectile Gravity(Event Player, 100);
		Abort;
		Start Rule(Modify_Projectile_Gravity, Restart Rule);
	}
}

rule("Reset : Camera")
{
	event
	{
		Subroutine;
		Reset_Camera;
	}

	actions
	{
		Skip If(Is True For Any(Array(57, 58, 59), Event Player.Active_Effects_ID[Current Array Element] != 0), 2);
		Set Aim Speed(Event Player, 100);
		Abort;
		Start Rule(Modify_Camera, Restart Rule);
	}
}

rule("Effect : Randomise Hero")
{
	event
	{
		Subroutine;
		Randomise_Hero;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Event Player.Random_Hero = Random Value In Array(Remove From Array(All Heroes, Event Player.Original_Hero));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????????? ???? ?? ??? ??? ???") : Custom String(
			"Randomised Hero To {0} For {1}s", Hero Icon String(Event Player.Random_Hero), Global.Effect_Settings[0]));
		Start Forcing Player To Be Hero(Event Player, Event Player.Random_Hero);
		Destroy Effect(Event Player.Active_Effects_ID[9]);
		Create Effect(All Players(All Teams), Echo Cloning Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(Team 2),
			Event Player, 1, Visible To Position and Radius);
		Event Player.Active_Effects_ID[9] = Last Created Entity;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[0]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[0] / 100), Event Player.Hide_Effects ? Custom String("????????? ???? ???") : Custom String(
			"Randomise Hero ({0})", Evaluate Once(Hero Icon String(Event Player.Random_Hero))), Left, 0, Color(Yellow), Color(White),
			Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[0] = Last Text ID;
		Preload Hero(Event Player, Event Player.Original_Hero);
		Set Ultimate Charge(Event Player, 0);
		Wait Until(Is Dead(Event Player) || Hero Of(Event Player) != Event Player.Random_Hero, Global.Effect_Settings[0]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[0]);
		Wait Until(Is Alive(Event Player), 9999);
		Destroy Effect(Event Player.Active_Effects_ID[9]);
		Skip If(Event Player.New_Care_Package == True, 1);
		Call Subroutine(Load_Hero);
	}
}

rule("Effect : Increased Healing")
{
	event
	{
		Subroutine;
		Increased_Healing;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player) || Event Player.No_Healing_ID != Null);
		Event Player.Randomise = Random Real(0.250, Global.Effect_Settings[14]);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????????? ??????? ??? ???") : Custom String(
			"Increased Healing For {0}s", Event Player.Randomise));
		Set Healing Received(Event Player, 150);
		Skip If(Event Player.Increased_Healing_ID != Null, 2);
		Create Effect(All Players(All Teams), Ana Biotic Grenade Increased Healing Effect, Team Of(Event Player) == Team 1 ? Color(Team 1)
			: Color(Team 2), Event Player, 1, Visible To Position and Radius);
		Event Player.Increased_Healing_ID = Last Created Entity;
		Wait Until(Is Dead(Event Player) || Event Player.No_Healing_ID != Null, Evaluate Once(Event Player.Randomise));
		Destroy Effect(Event Player.Increased_Healing_ID);
		Event Player.Increased_Healing_ID = Null;
		Set Healing Received(Event Player, 100);
	}
}

rule("Effect : No Healing")
{
	event
	{
		Subroutine;
		No_Healing;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.Randomise = Random Real(0.250, Global.Effect_Settings[15]);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?? ??????? ??? ???") : Custom String("No Healing For {0}s",
			Event Player.Randomise));
		Wait(0.010, Ignore Condition);
		Set Healing Received(Event Player, 0);
		Skip If(Event Player.No_Healing_ID != Null, 2);
		Create Effect(All Players(All Teams), Ana Biotic Grenade No Healing Effect, Team Of(Event Player) == Team 1 ? Color(Team 1)
			: Color(Team 2), Event Player, 1, Visible To Position and Radius);
		Event Player.No_Healing_ID = Last Created Entity;
		Wait Until(Is Dead(Event Player), Evaluate Once(Event Player.Randomise));
		Destroy Effect(Event Player.No_Healing_ID);
		Event Player.No_Healing_ID = Null;
		Set Healing Received(Event Player, 100);
	}
}

rule("Effect : Wallhacks")
{
	event
	{
		Subroutine;
		Wallhacks;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ??? ???") : Custom String("Wallhacks For {0}s",
			Global.Effect_Settings[16]));
		Start Forcing Player Outlines(All Players(Opposite Team Of(Team Of(Event Player))), Event Player, True, Color(Red), Always);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[1]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[16] / 100), Event Player.Hide_Effects ? Custom String("?????????") : Custom String("Wallhacks"), Left,
			0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[1] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[16]);
		Stop Forcing Player Outlines(All Players(Opposite Team Of(Team Of(Event Player))), Event Player);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[1]);
	}
}

rule("Effect : OHKO")
{
	event
	{
		Subroutine;
		OHKO;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??? ???") : Custom String("OHKO For {0}s",
			Global.Effect_Settings[17]));
		Event Player.Stored_OHKO_HP = Array(Health(Event Player), Hero Of(Event Player), Event Player.Original_Hero == Null);
		Set Player Health(Event Player, 1);
		Set Healing Received(Event Player, 0);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[2]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[17] / 100), Event Player.Hide_Effects ? Custom String("??? ??? ??") : Custom String("One Hit KO"), Left,
			0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[2] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[17]);
		Skip If(Event Player.Original_Hero == Null && Last Of(Event Player.Stored_OHKO_HP) == False, 5);
		If(Hero Of(Event Player) == Event Player.Stored_OHKO_HP[1]);
			Set Player Health(Event Player, First Of(Event Player.Stored_OHKO_HP));
		Else;
			Event Player.Save_Hero[0] = First Of(Event Player.Stored_OHKO_HP);
		End;
		Set Healing Received(Event Player, 100);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[2]);
	}
}

rule("Effect : Help My W Key Is Stuck")
{
	event
	{
		Subroutine;
		Stuck_W;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ?? ? ??? ?? ????? ??? ???") : Custom String(
			"Help My W Key Is Stuck For {0}s", Global.Effect_Settings[18]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[3]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[18] / 100), Event Player.Hide_Effects ? Custom String("???? ?? ? ??? ?? ?????") : Custom String(
			"Help My W Key Is Stuck"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[3] = Last Text ID;
		Start Rule(Start_Throttle, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[18]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[3]);
		Event Player.Active_Effects_ID[3] = 0;
		Start Rule(Stop_Throttle, Restart Rule);
	}
}

rule("Effect : Disable Random Direction")
{
	event
	{
		Subroutine;
		Disable_Random_Direction;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.Disabled_Direction = Random Value In Array(Array(Forward, Backward, Left, Right));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ??? ??? ???") : Custom String(
			"Disabled {1} For {0}s", Global.Effect_Settings[19], Array(String("Forward"), String("Backward"), String("Left"), String(
			"Right"))[Index Of Array Value(Array(Forward, Backward, Left, Right), Event Player.Disabled_Direction)]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[4]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[19] / 100), Event Player.Hide_Effects ? Custom String("???????? ???") : Custom String("Disabled {0}",
			Evaluate Once(Array(String("Forward"), String("Backward"), String("Left"), String("Right"))[Index Of Array Value(Array(Forward,
			Backward, Left, Right), Event Player.Disabled_Direction)])), Left, 0, Color(Yellow), Color(White), Visible To Values and Color,
			Default Visibility);
		Event Player.Active_Effects_ID[4] = Last Text ID;
		Start Rule(Start_Transforming_Throttle, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[19]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[4]);
		Event Player.Active_Effects_ID[4] = 0;
		Start Rule(Stop_Transforming_Throttle, Restart Rule);
	}
}

rule("Effect : Cruise Control")
{
	event
	{
		Subroutine;
		Cruise_Control;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.Cruise_Control_Throttle = 0;
		Chase Player Variable At Rate(Event Player, Cruise_Control_Throttle, Min(Max(Event Player.Cruise_Control_Throttle,
			Speed Of In Direction(Event Player, World Vector Of(Forward, Event Player, Rotation)) > 50 ? 0 : Speed Of In Direction(
			Event Player, World Vector Of(Forward, Event Player, Rotation))), 50), 9999, Destination and Rate);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??????? ??? ???") : Custom String(
			"Cruise Control For {0}s", Global.Effect_Settings[20]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[5]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[20] / 100), Event Player.Hide_Effects ? Custom String("?????? ???????") : Custom String(
			"Cruise Control"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[5] = Last Text ID;
		Start Rule(Start_Accelerating, Restart Rule);
		Start Rule(Cruise_Control_Update_Speed, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[20]);
		Stop Accelerating(Event Player);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[5]);
		Event Player.Active_Effects_ID[5] = 0;
		Stop Chasing Player Variable(Event Player, Cruise_Control_Throttle);
		Start Rule(Stop_Accelerating, Restart Rule);
	}
}

rule("Update : Cruise Control Speed")
{
	event
	{
		Subroutine;
		Cruise_Control_Update_Speed;
	}

	actions
	{
		While(Event Player.Active_Effects_ID[5] != 0);
			Abort If(Event Player.Active_Effects_ID[5] == 0);
			Start Forcing Throttle(Event Player, Event Player.Active_Effects_ID[3] != 0 ? (Is True For Any(Array(Hero(Genji), Hero(Tracer)),
				Hero Of(Event Player) == Current Array Element) ? 6 : 5.500) / Max(Event Player.Cruise_Control_Throttle, 5.500) : 0, (
				Is True For Any(Array(Hero(Genji), Hero(Tracer)), Hero Of(Event Player) == Current Array Element) ? 6 : 5.500) / Max(
				Event Player.Cruise_Control_Throttle, 5.500), 0, (Is True For Any(Array(Hero(Genji), Hero(Tracer)), Hero Of(Event Player)
				== Current Array Element) ? 6 : 5.500) / Max(Event Player.Cruise_Control_Throttle, 5.500), 0, (Is True For Any(Array(Hero(
				Genji), Hero(Tracer)), Hero Of(Event Player) == Current Array Element) ? 6 : 5.500) / Max(Event Player.Cruise_Control_Throttle,
				5.500));
			Set Move Speed(Event Player, Max(Event Player.Cruise_Control_Throttle, 5.500) / (Is True For Any(Array(Hero(Genji), Hero(Tracer)),
				Hero Of(Event Player) == Current Array Element) ? 0.060 : 0.055));
			Wait(1, Ignore Condition);
		End;
		Start Rule(Reset_Speed, Restart Rule);
		Start Rule(Stop_Throttle, Restart Rule);
	}
}

rule("Effect : Teleport To Spawn")
{
	event
	{
		Subroutine;
		Teleport_Spawn;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.Randomise = Nearest Walkable Position(Random Value In Array(Spawn Points(Team Of(Event Player))));
		If(Event Player.Randomise == Vector(0, 0, 0));
			Call Subroutine(Trigger_Random_Effect);
			Abort;
		End;
		Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(Position Of(Event Player)), 1);
		Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Event Player, 100);
		Event Player.Camera_Pos = Eye Position(Event Player);
		Start Camera(Event Player, Event Player.Camera_Pos, Event Player.Camera_Pos + Facing Direction Of(Event Player), 0);
		Set Invisible(Event Player, All);
		Start Forcing Player Position(Event Player, Event Player.Randomise, False);
		Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
		Chase Player Variable Over Time(Event Player, Camera_Pos, Eye Position(Event Player), 0.500, Destination and Duration);
		Wait(0.500, Ignore Condition);
		Start Rule(Stop_Forcing_Position, Restart Rule);
		Start Rule(Stop_Camera, Restart Rule);
		Start Rule(Stop_Facing, Restart Rule);
		Start Rule(Stop_Invisibility, Restart Rule);
		Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(Position Of(Event Player)), 1);
		Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Event Player, 100);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ?? ?????") : Custom String("Teleport To Spawn"));
	}
}

rule("Effect : Teleport To Objective")
{
	event
	{
		Subroutine;
		Teleport_Objective;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.Randomise = Nearest Walkable Position((Current Game Mode == Game Mode(Hybrid) && Is Objective Complete(0) == True)
			|| (Current Game Mode == Game Mode(Escort) || Current Game Mode == Game Mode(Push)) ? Ray Cast Hit Position(
			Payload Position + Vector(0, 5, 0), Payload Position, Null, Event Player, False) : Objective Position(Objective Index));
		If(Event Player.Randomise == Vector(0, 0, 0));
			Call Subroutine(Trigger_Random_Effect);
			Abort;
		End;
		Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(Position Of(Event Player)), 1);
		Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Event Player, 100);
		Event Player.Camera_Pos = Eye Position(Event Player);
		Start Camera(Event Player, Event Player.Camera_Pos, Event Player.Camera_Pos + Facing Direction Of(Event Player), 0);
		Set Invisible(Event Player, All);
		Start Forcing Player Position(Event Player, Event Player.Randomise, False);
		Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
		Chase Player Variable Over Time(Event Player, Camera_Pos, Eye Position(Event Player), 0.500, Destination and Duration);
		Wait(0.500, Ignore Condition);
		Start Rule(Stop_Forcing_Position, Restart Rule);
		Start Rule(Stop_Camera, Restart Rule);
		Start Rule(Stop_Facing, Restart Rule);
		Start Rule(Stop_Invisibility, Restart Rule);
		Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(Position Of(Event Player)), 1);
		Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Event Player, 100);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ?? ?????????") : Custom String(
			"Teleport To Objective"));
	}
}

rule("Effect : Teleport To Random Player")
{
	event
	{
		Subroutine;
		Teleport_Random_Player;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Skip If(Count Of(Filtered Array(Remove From Array(All Players(All Teams), Event Player), Team Of(Event Player) == Team Of(
			Current Array Element) || !Is In Spawn Room(Current Array Element))) == 0, 2);
		Event Player.Randomise = Nearest Walkable Position(Random Value In Array(Filtered Array(Remove From Array(All Players(All Teams),
			Event Player), Team Of(Event Player) == Team Of(Current Array Element) || !Is In Spawn Room(Current Array Element))));
		If(Event Player.Randomise == Vector(0, 0, 0));
			Call Subroutine(Trigger_Random_Effect);
			Abort;
		End;
		Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(Position Of(Event Player)), 1);
		Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Event Player, 100);
		Event Player.Camera_Pos = Eye Position(Event Player);
		Start Camera(Event Player, Event Player.Camera_Pos, Event Player.Camera_Pos + Facing Direction Of(Event Player), 0);
		Set Invisible(Event Player, All);
		Start Forcing Player Position(Event Player, Event Player.Randomise, False);
		Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
		Chase Player Variable Over Time(Event Player, Camera_Pos, Eye Position(Event Player), 0.500, Destination and Duration);
		Wait(0.500, Ignore Condition);
		Start Rule(Stop_Forcing_Position, Restart Rule);
		Start Rule(Stop_Camera, Restart Rule);
		Start Rule(Stop_Facing, Restart Rule);
		Start Rule(Stop_Invisibility, Restart Rule);
		Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(Position Of(Event Player)), 1);
		Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Event Player, 100);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ?? ?????? ??????") : Custom String(
			"Teleport To Random Player"));
	}
}

rule("Effect : Teleport To Random Location")
{
	event
	{
		Subroutine;
		Teleport_Random_Location;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.Randomise = Nearest Walkable Position(World Vector Of(Vector(Random Real(-100, 100), Random Real(-20, 20),
			Random Real(-100, 100)), Event Player, Rotation));
		If(Event Player.Randomise == Vector(0, 0, 0));
			Call Subroutine(Trigger_Random_Effect);
			Abort;
		End;
		Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(Position Of(Event Player)), 1);
		Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Event Player, 100);
		Event Player.Camera_Pos = Eye Position(Event Player);
		Start Camera(Event Player, Event Player.Camera_Pos, Event Player.Camera_Pos + Facing Direction Of(Event Player), 0);
		Set Invisible(Event Player, All);
		Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
		Start Forcing Player Position(Event Player, Event Player.Randomise, False);
		Chase Player Variable Over Time(Event Player, Camera_Pos, Eye Position(Event Player), 0.500, Destination and Duration);
		Wait(0.500, Ignore Condition);
		Start Rule(Stop_Forcing_Position, Restart Rule);
		Start Rule(Stop_Camera, Restart Rule);
		Start Rule(Stop_Facing, Restart Rule);
		Start Rule(Stop_Invisibility, Restart Rule);
		Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(Position Of(Event Player)), 1);
		Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Event Player, 100);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ?? ?????? ????????") : Custom String(
			"Teleport To Random Location"));
	}
}

rule("Effect : Fake Teleport")
{
	event
	{
		Subroutine;
		Fake_Teleport;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.Randomise = Filtered Array(Global.Effects, Global.Effect_Settings[Current Array Index] != False && String Contains(
			Current Array Element, Custom String("Teleport")) == True);
		Event Player.Stored_Position = Array(Position Of(Event Player));
		If(Event Player.Randomise == Custom String("Teleport To Spawn"));
			Call Subroutine(Teleport_Spawn);
		Else If(Event Player.Randomise == Custom String("Teleport To Objective"));
			Call Subroutine(Teleport_Objective);
		Else If(Event Player.Randomise == Custom String("Teleport To Random Player"));
			Call Subroutine(Teleport_Random_Player);
		Else;
			Call Subroutine(Teleport_Random_Location);
		End;
		Wait(Random Real(1, 4), Ignore Condition);
		Event Player.Stored_Position = Array(First Of(Event Player.Stored_Position), Position Of(Event Player));
		Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(Position Of(Event Player)), 1);
		Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Event Player, 100);
		Event Player.Camera_Pos = Eye Position(Event Player);
		Start Camera(Event Player, Event Player.Camera_Pos, Event Player.Camera_Pos + Facing Direction Of(Event Player), 0);
		Set Invisible(Event Player, All);
		Start Forcing Player Position(Event Player, First Of(Event Player.Stored_Position), False);
		Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
		Chase Player Variable Over Time(Event Player, Camera_Pos, Eye Position(Event Player), 0.500, Destination and Duration);
		Wait(0.500, Ignore Condition);
		Start Rule(Stop_Forcing_Position, Restart Rule);
		Start Rule(Stop_Facing, Restart Rule);
		Start Rule(Stop_Camera, Restart Rule);
		Start Rule(Stop_Invisibility, Restart Rule);
		Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(Position Of(Event Player)), 1);
		Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Event Player, 100);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ????????") : Custom String("Fake Teleport"));
		If(Global.Effect_Settings[25] == 1);
			Event Player.Randomise = Random Integer(1, 2);
			If(Event Player.Randomise == 1);
				Wait(Random Real(1, 4), Ignore Condition);
				Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
					Team 2), Evaluate Once(Position Of(Event Player)), 1);
				Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
					Team 2), Event Player, 100);
				Event Player.Camera_Pos = Eye Position(Event Player);
				Start Camera(Event Player, Event Player.Camera_Pos, Event Player.Camera_Pos + Facing Direction Of(Event Player), 0);
				Set Invisible(Event Player, All);
				Start Forcing Player Position(Event Player, Last Of(Event Player.Stored_Position), False);
				Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
				Chase Player Variable Over Time(Event Player, Camera_Pos, Eye Position(Event Player), 0.500, Destination and Duration);
				Wait(0.500, Ignore Condition);
				Start Rule(Stop_Forcing_Position, Restart Rule);
				Start Rule(Stop_Facing, Restart Rule);
				Start Rule(Stop_Camera, Restart Rule);
				Start Rule(Stop_Invisibility, Restart Rule);
				Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
					Team 2), Evaluate Once(Position Of(Event Player)), 1);
				Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
					Team 2), Event Player, 100);
				Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ???? ????????") : Custom String("Fake Fake Teleport"));
			End;
		End;
	}
}

rule("Effect : Scale Size Random")
{
	event
	{
		Subroutine;
		Scale_Random;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.New_Scale = True;
		Wait(0.016, Ignore Condition);
		Event Player.Randomise = Random Real(0, 10);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????? ?????? ??? ???") : Custom String(
			"Scale Random For {0}s", Global.Effect_Settings[27]));
		Start Scaling Player(Event Player, Event Player.Randomise, False);
		Event Player.Size = Event Player.Randomise;
		Start Scaling Barriers(Event Player, Event Player.Randomise, False);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[6]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[27] / 100), Event Player.Hide_Effects ? Custom String("????? ??????") : Custom String("Scale Random"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[6] = Last Text ID;
		Event Player.New_Scale = False;
		Wait Until(Is Dead(Event Player) || Event Player.New_Scale, Global.Effect_Settings[27]);
		Stop Scaling Player(Event Player);
		Event Player.Size = 1;
		Stop Scaling Barriers(Event Player);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[6]);
	}
}

rule("Effect : Scale Size Big")
{
	event
	{
		Subroutine;
		Scale_Big;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.New_Scale = True;
		Wait(0.016, Ignore Condition);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????? ??? ??? ???") : Custom String("Scale Big For {0}s",
			Global.Effect_Settings[28]));
		Start Scaling Player(Event Player, 2, False);
		Event Player.Size = 2;
		Start Scaling Barriers(Event Player, 2, False);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[7]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[28] / 100), Event Player.Hide_Effects ? Custom String("????? ???") : Custom String("Scale Big"), Left,
			0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[7] = Last Text ID;
		Event Player.New_Scale = False;
		Wait Until(Is Dead(Event Player) || Event Player.New_Scale, Global.Effect_Settings[28]);
		Stop Scaling Player(Event Player);
		Event Player.Size = 1;
		Stop Scaling Barriers(Event Player);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[7]);
	}
}

rule("Effect : Scale Size Small")
{
	event
	{
		Subroutine;
		Scale_Small;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.New_Scale = True;
		Wait(0.016, Ignore Condition);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????? ???? ??? ???") : Custom String("Scale Small For {0}s",
			Global.Effect_Settings[29]));
		Start Scaling Player(Event Player, 0.330, False);
		Event Player.Size = 0.330;
		Start Scaling Barriers(Event Player, 0.330, False);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[8]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[29] / 100), Event Player.Hide_Effects ? Custom String("????? ????") : Custom String("Scale Small"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[8] = Last Text ID;
		Event Player.New_Scale = False;
		Wait Until(Is Dead(Event Player) || Event Player.New_Scale, Global.Effect_Settings[29]);
		Stop Scaling Player(Event Player);
		Event Player.Size = 1;
		Stop Scaling Barriers(Event Player);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[8]);
	}
}

rule("Effect : Ice Floor")
{
	event
	{
		Subroutine;
		Ice_Floor;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.Slide_Direction = Vector(0, 0, 0);
		Chase Player Variable At Rate(Event Player, Slide_Direction, Vector(Absolute Value(X Component Of(Velocity Of(Event Player)))
			< 0.100 ? X Component Of(Event Player.Slide_Direction) : X Component Of(Velocity Of(Event Player)), 0, Absolute Value(
			Z Component Of(Velocity Of(Event Player))) < 0.100 ? Z Component Of(Event Player.Slide_Direction) : Z Component Of(Velocity Of(
			Event Player))), 999, Destination and Rate);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ??? ???") : Custom String("Slippery For {0}s",
			Global.Effect_Settings[30]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[10]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[30] / 100), Event Player.Hide_Effects ? Custom String("????????") : Custom String("Slippery"), Left, 0,
			Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[10] = Last Text ID;
		Start Rule(Modify_Speed, Restart Rule);
		Start Rule(Start_Accelerating, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[30]);
		Stop Accelerating(Event Player);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[10]);
		Event Player.Active_Effects_ID[10] = 0;
		Stop Chasing Player Variable(Event Player, Slide_Direction);
		Start Rule(Reset_Speed, Restart Rule);
		Start Rule(Stop_Accelerating, Restart Rule);
	}
}

rule("Effect : No Gravity")
{
	event
	{
		Subroutine;
		No_Gravity;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?? ??????? ??? ???") : Custom String("No Gravity For {0}s",
			Global.Effect_Settings[31]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[11]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[31] / 100), Event Player.Hide_Effects ? Custom String("?? ???????") : Custom String("No Gravity"), Left,
			0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[11] = Last Text ID;
		Start Rule(Modify_Gravity, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[31]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[11]);
		Event Player.Active_Effects_ID[11] = 0;
		Start Rule(Reset_Gravity, Restart Rule);
	}
}

rule("Effect : Use Random Ultimate")
{
	event
	{
		Subroutine;
		Random_Ultimate;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Event Player.Random_Ultimate = Random Value In Array(Remove From Array(Remove From Array(All Heroes, Hero(Echo)),
			Event Player.Original_Hero));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??? ?????? ???????? ??? ???") : Custom String(
			"Use Random Ultimate ({0})", Ability Icon String(Event Player.Random_Ultimate, Button(Ultimate))));
		Start Forcing Player To Be Hero(Event Player, Event Player.Random_Ultimate);
		Destroy Effect(Event Player.Active_Effects_ID[9]);
		Create Effect(All Players(All Teams), Echo Cloning Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(Team 2),
			Event Player, 1, Visible To Position and Radius);
		Event Player.Active_Effects_ID[9] = Last Created Entity;
		Preload Hero(Event Player, Event Player.Original_Hero);
		Wait(Is True For Any(Array(Hero(D.Va), Hero(Wrecking Ball)), Event Player.Random_Ultimate == Current Array Element) ? Array(1,
			0.500)[Index Of Array Value(Array(Hero(D.Va), Hero(Wrecking Ball)), Event Player.Randomise)] : 0.010, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Press Button(Event Player, Button(Primary Fire));
		Wait Until((!Is Using Ultimate(Event Player) && Total Time Elapsed > Evaluate Once(Total Time Elapsed)
			+ Global.Ultimate_Duration[Index Of Array Value(Global.All_Heros, Event Player.Random_Ultimate)]) || (Hero Of(Event Player)
			!= Event Player.Random_Ultimate), 15);
		Wait Until(Is Alive(Event Player), 9999);
		Destroy Effect(Event Player.Active_Effects_ID[9]);
		Skip If(Event Player.New_Care_Package == True, 1);
		Call Subroutine(Load_Hero);
	}
}

rule("Effect : Infinite Ammo")
{
	event
	{
		Subroutine;
		Infinite_Ammo;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ???? ??? ???") : Custom String(
			"Infinite Ammo For {0}s", Global.Effect_Settings[33]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[12]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[33] / 100), Event Player.Hide_Effects ? Custom String("???????? ????") : Custom String("Infinite Ammo"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[12] = Last Text ID;
		Start Rule(Infinite_Ammo_Loop, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[33]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[12]);
		Event Player.Active_Effects_ID[12] = 0;
	}
}

rule("Loop : Infinte Ammo")
{
	event
	{
		Subroutine;
		Infinite_Ammo_Loop;
	}

	actions
	{
		While(Event Player.Active_Effects_ID[12] != 0);
			Wait Until(Ammo(Event Player, 0) != Max Ammo(Event Player, 0), 1);
			Wait Until(!Is Firing Primary(Event Player), 99999);
			Set Ammo(Event Player, 0, Hero Of(Event Player) == Hero(Orisa) ? 100 : Max Ammo(Event Player, 0));
			Set Ammo(Event Player, 1, Max Ammo(Event Player, 1));
			Set Ability Resource(Event Player, Button(Primary Fire), 100);
		End;
	}
}

rule("Effect : Teleporter Malfuction")
{
	event
	{
		Subroutine;
		Teleporter_Malfunction;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????????? ?????????? ??? ???") : Custom String(
			"Teleporter Malfuction For {0}s", Global.Effect_Settings[37]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[13]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[37] / 100), Event Player.Hide_Effects ? Custom String("?????????? ??????????") : Custom String(
			"Teleporter Malfuction"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[13] = Last Text ID;
		Start Rule(Teleport_Malfuction_Loop, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[37]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[13]);
		Event Player.Active_Effects_ID[13] = 0;
	}
}

rule("Loop : Teleporter Malfuction")
{
	event
	{
		Subroutine;
		Teleport_Malfuction_Loop;
	}

	actions
	{
		While(Event Player.Active_Effects_ID[13] != 0);
			Abort If(Event Player.Active_Effects_ID[13] == 0);
			Event Player.Randomise = Nearest Walkable Position(Vector(Random Real(-25, 25), Random Real(-20, 20), Random Real(-25, 25)));
			If(Event Player.Randomise == Vector(0, 0, 0));
				Continue;
			End;
			Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
				Team 2), Evaluate Once(Position Of(Event Player)), 1);
			Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
				Team 2), Event Player, 100);
			Event Player.Camera_Pos = Eye Position(Event Player);
			Start Camera(Event Player, Event Player.Camera_Pos, Event Player.Camera_Pos + Facing Direction Of(Event Player), 0);
			Set Invisible(Event Player, All);
			Start Forcing Player Position(Event Player, Nearest Walkable Position(World Vector Of(Vector(Random Integer(-25, 25),
				Random Integer(-25, 25), Random Integer(-25, 25)), Event Player, Rotation And Translation)), False);
			Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
			Chase Player Variable Over Time(Event Player, Camera_Pos, Eye Position(Event Player), 0.500, Destination and Duration);
			Wait(0.500, Ignore Condition);
			Start Rule(Stop_Forcing_Position, Restart Rule);
			Start Rule(Stop_Facing, Restart Rule);
			Start Rule(Stop_Camera, Restart Rule);
			Start Rule(Stop_Invisibility, Restart Rule);
			Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
				Team 2), Evaluate Once(Position Of(Event Player)), 1);
			Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
				Team 2), Event Player, 100);
			Wait(Random Real(1, 5), Ignore Condition);
		End;
	}
}

rule("Effect : Misclick")
{
	event
	{
		Subroutine;
		Misclick;
	}

	actions
	{
		Event Player.Randomise = Randomized Array(Array(Button(Secondary Fire), Button(Ability 1), Button(Ability 2), Button(Ultimate),
			Button(Crouch), Button(Jump), Button(Primary Fire)));
		Skip If(Hero Of(Event Player) == Hero(Wrecking Ball) && Altitude Of(Event Player) >= 2, 1);
		Modify Player Variable(Event Player, Randomise, Remove From Array By Value, Button(Crouch));
		Skip If(Hero Of(Event Player) == Hero(Brigitte) && Is Firing Secondary(Event Player), 1);
		Modify Player Variable(Event Player, Randomise, Remove From Array By Value, Button(Primary Fire));
		Skip If(Hero Of(Event Player) == Hero(Hanzo) || (Hero Of(Event Player) == Hero(Lifeweaver) && Is In Air(Event Player)), 1);
		Modify Player Variable(Event Player, Randomise, Remove From Array By Value, Button(Jump));
		Skip If(Global.Effect_Settings[36] == 1, 1);
		Modify Player Variable(Event Player, Randomise, Remove From Array By Value, Button(Ultimate));
		Event Player.Randomise = First Of(Event Player.Randomise);
		Press Button(Event Player, Event Player.Randomise);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ? ?? ?? ??") : Custom String(
			"Misclick - {0} {1} {2}", Input Binding String(Event Player.Randomise), Event Player.Randomise, Ability Icon String(Hero Of(
			Event Player), Event Player.Randomise)));
	}
}

rule("Effect : Heavy Hitter")
{
	event
	{
		Subroutine;
		Heavy_Hitter;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????? ?????? ??? ???") : Custom String(
			"Heavy Hitter For {0}s", Global.Effect_Settings[38]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[14]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[38] / 100), Event Player.Hide_Effects ? Custom String("????? ??????") : Custom String("Heavy Hitter"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[14] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[38]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[14]);
		Event Player.Active_Effects_ID[14] = 0;
	}
}

rule("Trigger : Heavy Hitter")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[14] != 0;
		Event Ability == Button(Melee);
	}

	actions
	{
		Damage(Victim, Attacker, Event Damage * 3);
	}
}

rule("Unique Trigger : Heavy Hitter")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[14] != 0;
		((Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)) == Hero(Brigitte) || (Is Duplicating(
			Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)) == Hero(Reinhardt)) == True;
		Event Ability == Button(Primary Fire);
	}

	actions
	{
		Damage(Victim, Attacker, Event Damage * 3);
	}
}

rule("Effect : Invisibility")
{
	event
	{
		Subroutine;
		Invisibility;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????????? ??? ???") : Custom String(
			"Invisibility For {0}s", Global.Effect_Settings[39]));
		Set Invisible(Event Player, All);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[15]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[39] / 100), Event Player.Hide_Effects ? Custom String("????????????") : Custom String("Invisibility"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[15] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[39]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[15]);
		Event Player.Active_Effects_ID[15] = 0;
		Start Rule(Stop_Invisibility, Restart Rule);
	}
}

rule("Effect : Strong Gravity")
{
	event
	{
		Subroutine;
		Strong_Gravity;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??????? ??? ???") : Custom String(
			"Strong Gravity For {0}s", Global.Effect_Settings[40]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[16]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[40] / 100), Event Player.Hide_Effects ? Custom String("?????? ???????") : Custom String(
			"Strong Gravity"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[16] = Last Text ID;
		Start Rule(Modify_Gravity, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[40]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[16]);
		Event Player.Active_Effects_ID[16] = 0;
		Start Rule(Reset_Gravity, Restart Rule);
	}
}

rule("Effect : Gravitational Pull")
{
	event
	{
		Subroutine;
		Gravitational_Pull;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????????????? ???? ??? ???") : Custom String(
			"Gravitational Pull For {0}s", Global.Effect_Settings[41]));
		All Players(All Teams).Gravitational_Pull = Event Player;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[17]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[41] / 100), Event Player.Hide_Effects ? Custom String("????????????? ????") : Custom String(
			"Gravitational Pull"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[17] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[41]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[17]);
		Filtered Array(All Players(All Teams), Current Array Element.Gravitational_Pull == Event Player).Gravitational_Pull = Null;
	}
}

rule("Loop : Gravitational Pull")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Entity Exists(Event Player.Gravitational_Pull) == True;
		Event Player.Gravitational_Pull != Event Player;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.Gravitational_Pull), Barriers Do Not Block LOS) == True;
	}

	actions
	{
		While(Entity Exists(Event Player.Gravitational_Pull) == True && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player.Gravitational_Pull), Barriers Do Not Block LOS));
			Wait(0.100, Ignore Condition);
			Apply Impulse(Event Player, Direction Towards(Position Of(Event Player), Position Of(Event Player.Gravitational_Pull)),
				Distance Between(Event Player, Event Player.Gravitational_Pull) * (Is In Air(Event Player) ? 1 : 5), To World,
				Incorporate Contrary Motion);
		End;
	}
}

rule("Effect : Reverse Gravity")
{
	event
	{
		Subroutine;
		Reverse_Gravity;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??????? ??????? ??? ???") : Custom String(
			"Reverse Gravity For {0}s", Global.Effect_Settings[42]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[18]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[42] / 100), Event Player.Hide_Effects ? Custom String("??????? ???????") : Custom String(
			"Reverse Gravity"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[18] = Last Text ID;
		Start Rule(Start_Accelerating, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[42]);
		Stop Accelerating(Event Player);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[18]);
		Event Player.Active_Effects_ID[18] = 0;
		Start Rule(Stop_Accelerating, Restart Rule);
	}
}

rule("Effect : Wierd Pitch")
{
	event
	{
		Subroutine;
		Wierd_Pitch;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????? ????? ??? ???") : Custom String(
			"Wierd Pitch For {0}s", Global.Effect_Settings[43]));
		Start Rule(Wierd_Pitch_Loop, Restart Rule);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[19]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[43] / 100), Event Player.Hide_Effects ? Custom String("????? ?????") : Custom String("Wierd Pitch"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[19] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[43]);
		Stop Accelerating(Event Player);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[19]);
		Event Player.Active_Effects_ID[19] = 0;
	}
}

rule("Loop : Wierd Pitch")
{
	event
	{
		Subroutine;
		Wierd_Pitch_Loop;
	}

	actions
	{
		While(Event Player.Active_Effects_ID[19] != 0);
			Wait(Random Real(0.100, 0.500), Ignore Condition);
			Start Modifying Hero Voice Lines(Event Player, Random Real(0.500, 1.500), False);
		End;
		Stop Modifying Hero Voice Lines(Event Player);
	}
}

rule("Effect : Seer")
{
	event
	{
		Subroutine;
		Seer;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.Seer_Target = Random Value In Array(Remove From Array(All Living Players(All Teams), Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ?????? ??? ???") : Custom String(
			"Seer ({1}{2}) For {0}s", Global.Effect_Settings[44], Team Of(Event Player) == Team Of(Event Player.Seer_Target)
			? Custom String("Friendly") : Custom String("Enemy"), Hero Icon String(Hero Of(Event Player.Seer_Target))));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[20]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[44] / 100), Event Player.Hide_Effects ? Custom String("????") : Custom String("Seer"), Left, 0, Color(
			Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[20] = Last Text ID;
		Start Rule(Start_Camera, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[44]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[20]);
		Event Player.Active_Effects_ID[20] = 0;
		Start Rule(Stop_Camera, Restart Rule);
	}
}

rule("Effect : Damage Sponge")
{
	event
	{
		Subroutine;
		Damage_Spounge;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Set Damage Dealt(Event Player, 0);
		Set Damage Received(Event Player, 0);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ?????? ??? ???") : Custom String(
			"Damage Sponge For {0}s", Global.Effect_Settings[46]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[21]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[46] / 100), Event Player.Hide_Effects ? Custom String("?????? ??????") : Custom String("Damage Sponge"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[21] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[46]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[21]);
		Set Damage Dealt(Event Player, 100);
		Set Damage Received(Event Player, 100);
	}
}

rule("Effect : Only Headshots")
{
	event
	{
		Subroutine;
		Only_Headshots;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ????????? ??? ???") : Custom String(
			"Only Headshots For {0}s", Global.Effect_Settings[47]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[22]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[47] / 100), Event Player.Hide_Effects ? Custom String("???? ?????????") : Custom String(
			"Only Headshots"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[22] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[47]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[22]);
		Event Player.Active_Effects_ID[22] = 0;
	}
}

rule("Trigger : Only Headshots")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[22] != 0;
		Event Was Critical Hit != True;
		Victim != Attacker;
	}

	actions
	{
		Set Player Health(Event Player, Health(Event Player) + Event Damage);
	}
}

rule("Effect : Only Crits")
{
	event
	{
		Subroutine;
		Only_Crits;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ????? ??? ???") : Custom String("Only Crits For {0}s",
			Global.Effect_Settings[48]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[23]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[48] / 100), Event Player.Hide_Effects ? Custom String("???? ?????") : Custom String("Only Crits"), Left,
			0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[23] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[48]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[23]);
		Event Player.Active_Effects_ID[23] = 0;
	}
}

rule("Trigger : Only Crits")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[23] != 0;
		Event Was Critical Hit != True;
		Event Ability != Null;
		Victim != Attacker;
	}

	actions
	{
		Damage(Victim, Event Player, Event Damage);
	}
}

rule("Effect : No Headshots")
{
	event
	{
		Subroutine;
		No_Crits;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?? ????????? ??? ???") : Custom String(
			"No Headshots For {0}s", Global.Effect_Settings[49]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[24]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[49] / 100), Event Player.Hide_Effects ? Custom String("?? ?????????") : Custom String("No Headshots"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[24] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[49]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[24]);
		Event Player.Active_Effects_ID[24] = 0;
	}
}

rule("Trigger : No Headshots")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[24] != 0;
		Event Was Critical Hit == True;
		Victim != Attacker;
	}

	actions
	{
		Set Player Health(Victim, Health(Victim) + Event Damage / 2);
	}
}

rule("Effect : Ragdoll")
{
	event
	{
		Subroutine;
		Ragdoll;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????") : Custom String("Ragdoll"));
		Event Player.Stored_HP_Ragdoll = Health(Event Player);
		Kill(Event Player, Null);
		Wait(Global.Effect_Settings[50], Ignore Condition);
		Resurrect(Event Player);
		Set Player Health(Event Player, Event Player.Stored_HP_Ragdoll);
	}
}

rule("Effect : Ragdoll Large")
{
	event
	{
		Subroutine;
		Ragdoll_Large;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??????? ?????") : Custom String("Ragdoll Large"));
		Event Player.Stored_HP_Ragdoll = Health(Event Player);
		Start Scaling Player(Event Player, 3, False);
		Event Player.Size = 3;
		Kill(Event Player, Null);
		Wait(Global.Effect_Settings[51], Ignore Condition);
		Stop Scaling Player(Event Player);
		Event Player.Size = 1;
		Resurrect(Event Player);
		Set Player Health(Event Player, Event Player.Stored_HP_Ragdoll);
	}
}

rule("Effect : Ragdoll Small")
{
	event
	{
		Subroutine;
		Ragdoll_Small;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??????? ????") : Custom String("Ragdoll Small"));
		Event Player.Stored_HP_Ragdoll = Health(Event Player);
		Start Scaling Player(Event Player, 0.330, False);
		Event Player.Size = 0.330;
		Kill(Event Player, Null);
		Wait(Global.Effect_Settings[52], Ignore Condition);
		Stop Scaling Player(Event Player);
		Event Player.Size = 1;
		Resurrect(Event Player);
		Set Player Health(Event Player, Event Player.Stored_HP_Ragdoll);
	}
}

rule("Effect : Location Swap")
{
	event
	{
		Subroutine;
		Location_Swap;
	}

	actions
	{
		Skip If(Count Of(Filtered Array(Remove From Array(All Players(All Teams), Event Player), Team Of(Event Player) == Team Of(
			Current Array Element) || !Is In Spawn Room(Current Array Element))) == 0, 2);
		Event Player.Swap_Effect = Array(Random Value In Array(Filtered Array(Remove From Array(All Players(All Teams), Event Player),
			Team Of(Event Player) == Team Of(Current Array Element) || !Is In Spawn Room(Current Array Element))));
		If(!Entity Exists(First Of(Event Player.Swap_Effect)));
			Call Subroutine(Trigger_Random_Effect);
			Abort;
		End;
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ???? ???? ??????") : Custom String(
			"Location Swap With {0}{1}", Team Of(Event Player) == Team Of(First Of(Event Player.Swap_Effect)) ? Custom String("Friendly")
			: Custom String("Enemy"), Hero Icon String(Hero Of(First Of(Event Player.Swap_Effect)))));
		Small Message(First Of(Event Player.Swap_Effect), First Of(Event Player.Swap_Effect).Hide_Effects ? Custom String(
			"???????? ???? ???? ??????") : Custom String("Location Swap With {0}{1}", Team Of(Event Player) == Team Of(First Of(
			Event Player.Swap_Effect)) ? Custom String("Friendly") : Custom String("Enemy"), Hero Icon String(Hero Of(Event Player))));
		Modify Player Variable(Event Player, Swap_Effect, Append To Array, Position Of(First Of(Event Player.Swap_Effect)));
		Modify Player Variable(Event Player, Swap_Effect, Append To Array, Facing Direction Of(First Of(Event Player.Swap_Effect)));
		Disable Movement Collision With Players(Event Player);
		Teleport(First Of(Event Player.Swap_Effect), Position Of(Event Player));
		Set Facing(First Of(Event Player.Swap_Effect), Facing Direction Of(Event Player), To World);
		Teleport(Event Player, Event Player.Swap_Effect[1]);
		Set Facing(Event Player, Event Player.Swap_Effect[2], To World);
		Enable Movement Collision With Players(Event Player);
	}
}

rule("Effect : Hero Swap")
{
	event
	{
		Subroutine;
		Hero_Swap;
	}

	actions
	{
		Event Player.Swap_Effect = Array(Random Value In Array(Filtered Array(Remove From Array(All Players(All Teams), Event Player),
			Current Array Element.Is_Bot == 0)), Event Player.Original_Hero == Null ? Hero Of(Event Player) : Event Player.Original_Hero);
		Event Player.Swap_Effect[2] = First Of(Event Player.Swap_Effect).Original_Hero == Null ? Hero Of(First Of(
			Event Player.Swap_Effect)) : First Of(Event Player.Swap_Effect).Original_Hero;
		If(!Entity Exists(First Of(Event Player.Swap_Effect)));
			Call Subroutine(Trigger_Random_Effect);
			Abort;
		End;
		If(First Of(Event Player.Swap_Effect).Original_Hero == Null);
			Start Forcing Player To Be Hero(First Of(Event Player.Swap_Effect), Event Player.Swap_Effect[1]);
			Stop Forcing Player To Be Hero(First Of(Event Player.Swap_Effect));
		Else;
			First Of(Event Player.Swap_Effect).Original_Hero = Event Player.Swap_Effect[1];
		End;
		If(Event Player.Original_Hero == Null);
			Start Forcing Player To Be Hero(Event Player, Last Of(Event Player.Swap_Effect));
			Stop Forcing Player To Be Hero(Event Player);
		Else;
			Event Player.Original_Hero = Last Of(Event Player.Swap_Effect);
		End;
		Wait(0.100, Ignore Condition);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ????") : Custom String("Hero Swap"));
		Small Message(First Of(Event Player.Swap_Effect), First Of(Event Player.Swap_Effect).Hide_Effects ? Custom String("???? ????")
			: Custom String("Hero Swapped"));
	}
}

rule("Effect : Phantom")
{
	event
	{
		Subroutine;
		Phantom;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??????? ??? ???") : Custom String("Phantom For {0}s",
			Global.Effect_Settings[55]));
		Disable Movement Collision With Environment(Event Player, False);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[25]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[55] / 100), Event Player.Hide_Effects ? Custom String("???????") : Custom String("Phantom"), Left, 0,
			Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[25] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[55]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[25]);
		Enable Movement Collision With Environment(Event Player);
	}
}

rule("Effect : No Huds")
{
	event
	{
		Subroutine;
		No_Huds;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?? ???? ??? ???") : Custom String("No Huds For {0}s",
			Global.Effect_Settings[56]));
		Disable Game Mode HUD(Event Player);
		Disable Hero HUD(Event Player);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[26]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[56] / 100), Event Player.Hide_Effects ? Custom String("?? ????") : Custom String("No Huds"), Left, 0,
			Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[26] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[56]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[26]);
		Enable Game Mode HUD(Event Player);
		Enable Hero HUD(Event Player);
	}
}

rule("Effect : No Objective")
{
	event
	{
		Subroutine;
		No_Objective;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?? ????????? ??? ???") : Custom String(
			"No Objective For {0}s", Global.Effect_Settings[57]));
		Disable Game Mode HUD(Event Player);
		Disable Game Mode In-World UI(Event Player);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[27]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[57] / 100), Event Player.Hide_Effects ? Custom String("?? ?????????") : Custom String("No Objective"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[27] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[57]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[27]);
		Enable Game Mode HUD(Event Player);
		Enable Game Mode In-World UI(Event Player);
	}
}

rule("Effect : Armor Up")
{
	event
	{
		Subroutine;
		Armor_Up;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????? ?? ??? ???") : Custom String("Armor Up For 10s"));
		Remove Health Pool From Player(Event Player.Active_Effects_ID[29]);
		"Using Health Instead Of Armor Becasue Temp Armor/Shield Are Displayed As Empty Health On The Healthbar"
		Add Health Pool To Player(Event Player, Health, Global.Effect_Settings[59], False, False);
		Event Player.Active_Effects_ID[29] = Last Created Health Pool;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[28]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / 0.100,
			Event Player.Hide_Effects ? Custom String("????? ??") : Custom String("Armor Up"), Left, 0, Color(Yellow), Color(White),
			Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[28] = Last Text ID;
		Wait Until(Is Dead(Event Player), 10);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[28]);
		Remove Health Pool From Player(Event Player.Active_Effects_ID[29]);
	}
}

rule("Effect : Thorns")
{
	event
	{
		Subroutine;
		Thorns;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??? ???") : Custom String("Thorns For {0}s",
			Global.Effect_Settings[60]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[30]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[60] / 100), Event Player.Hide_Effects ? Custom String("??????") : Custom String("Thorns"), Left, 0,
			Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[30] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[60]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[30]);
		Event Player.Active_Effects_ID[30] = 0;
	}
}

rule("Trigger : Thorns")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[30] != 0;
		Victim != Attacker;
		"To Prevent Feedback Loop When They Both Have Thorns"
		Attacker.Active_Effects_ID[30] == Null;
	}

	actions
	{
		Damage(Attacker, Event Player, Event Damage / 2);
	}
}

rule("Effect : Vampire")
{
	event
	{
		Subroutine;
		Vampire;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??????? ??? ???") : Custom String("Vampire For {0}s",
			Global.Effect_Settings[61]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[31]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[61] / 100), Event Player.Hide_Effects ? Custom String("????????") : Custom String("Vampire"), Left, 0,
			Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[31] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[61]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[31]);
		Event Player.Active_Effects_ID[31] = 0;
	}
}

rule("Trigger : Vampire")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[31] != 0;
		Victim != Attacker;
	}

	actions
	{
		Heal(Event Player, Event Player, Event Damage / 2);
	}
}

rule("Effect : Pacifist")
{
	event
	{
		Subroutine;
		Pacifist;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ??? ???") : Custom String("Pacifist For {0}s",
			Global.Effect_Settings[62]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[32]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[62] / 100), Event Player.Hide_Effects ? Custom String("????????") : Custom String("Pacifist"), Left, 0,
			Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[32] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[62]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[32]);
		Event Player.Active_Effects_ID[32] = 0;
	}
}

rule("Trigger : Pacifist")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[32] != 0;
		Victim != Attacker;
	}

	actions
	{
		Set Player Health(Victim, Health(Victim) + Event Damage);
		Damage(Event Player, Event Player, Event Damage);
	}
}

rule("Effect : No Arc")
{
	event
	{
		Subroutine;
		No_Arc;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?? ??? ??? ???") : Custom String("No Arc For {0}s",
			Global.Effect_Settings[63]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[33]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[63] / 100), Event Player.Hide_Effects ? Custom String("?? ???") : Custom String("No Arc"), Left, 0,
			Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[33] = Last Text ID;
		Start Rule(Modify_Projectile_Gravity, Restart Rule);
		Event Player.Projectile_Gravity = 0;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[63]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[33]);
		Event Player.Active_Effects_ID[33] = 0;
		Start Rule(Reset_Projectile_Gravity, Restart Rule);
		Event Player.Projectile_Gravity = 1;
	}
}

rule("Effect : Strong Arc")
{
	event
	{
		Subroutine;
		Strong_Arc;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??? ??? ???") : Custom String("Strong Arc For {0}s",
			Global.Effect_Settings[64]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[34]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[64] / 100), Event Player.Hide_Effects ? Custom String("?????? ???") : Custom String("Strong Arc"), Left,
			0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[34] = Last Text ID;
		Start Rule(Modify_Projectile_Gravity, Restart Rule);
		Event Player.Projectile_Gravity = 3;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[64]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[34]);
		Event Player.Active_Effects_ID[34] = 0;
		Start Rule(Reset_Projectile_Gravity, Restart Rule);
		Event Player.Projectile_Gravity = 1;
	}
}

rule("Effect : Slow Projectile")
{
	event
	{
		Subroutine;
		Slow_Projectile;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??????????? ??? ???") : Custom String(
			"Slow Projectiles For {0}s", Global.Effect_Settings[65]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[35]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[65] / 100), Event Player.Hide_Effects ? Custom String("???? ???????????") : Custom String(
			"Slow Projectiles"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[35] = Last Text ID;
		Start Rule(Modify_Projectile_Speed, Restart Rule);
		Event Player.Projectile_Speed = 0.250;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[65]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[35]);
		Event Player.Active_Effects_ID[35] = 0;
		Start Rule(Reset_Projectile_Speed, Restart Rule);
		Event Player.Projectile_Speed = 1;
	}
}

rule("Effect : Hitscan")
{
	event
	{
		Subroutine;
		Only_Hitscan;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??????? ??? ???") : Custom String("Hitscan For {0}s",
			Global.Effect_Settings[66]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[36]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[66] / 100), Event Player.Hide_Effects ? Custom String("???????") : Custom String("Hitscan"), Left, 0,
			Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[36] = Last Text ID;
		Start Rule(Modify_Projectile_Speed, Restart Rule);
		Start Rule(Modify_Projectile_Gravity, Restart Rule);
		Event Player.Projectile_Speed = 0;
		Event Player.Projectile_Gravity = 0;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[66]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[36]);
		Event Player.Active_Effects_ID[36] = 0;
		Start Rule(Reset_Projectile_Speed, Restart Rule);
		Start Rule(Reset_Projectile_Gravity, Restart Rule);
		Event Player.Projectile_Speed = 1;
		Event Player.Projectile_Gravity = 1;
	}
}

rule("Effect : Snail")
{
	event
	{
		Subroutine;
		Snail;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????? ??? ???") : Custom String("Snail For {0}s",
			Global.Effect_Settings[67]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[37]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[67] / 100), Event Player.Hide_Effects ? Custom String("?????") : Custom String("Snail"), Left, 0, Color(
			Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[37] = Last Text ID;
		Start Rule(Modify_Speed, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[67]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[37]);
		Event Player.Active_Effects_ID[37] = 0;
		Start Rule(Reset_Speed, Restart Rule);
	}
}

rule("Effect : Hammer Time")
{
	event
	{
		Subroutine;
		Hammer_Time;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Disallow Button(Event Player, Button(Ability 1));
		Set Damage Dealt(Event Player, 300);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ???? ??? ???") : Custom String(
			"Hammer Time For {1}s", Null, Global.Effect_Settings[68]));
		Start Forcing Player To Be Hero(Event Player, Hero(TorbjÃ¶rn));
		Destroy Effect(Event Player.Active_Effects_ID[9]);
		Create Effect(All Players(All Teams), Echo Cloning Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(Team 2),
			Event Player, 1, Visible To Position and Radius);
		Event Player.Active_Effects_ID[9] = Last Created Entity;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[38]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[68] / 100), Event Player.Hide_Effects ? Custom String("?????? ????") : Custom String("Hammer Time"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[38] = Last Text ID;
		Preload Hero(Event Player, Event Player.Original_Hero);
		Set Ultimate Charge(Event Player, 0);
		Wait Until(Is Dead(Event Player) || Hero Of(Event Player) != Hero(TorbjÃ¶rn), Global.Effect_Settings[68]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[38]);
		Wait Until(Is Alive(Event Player), 9999);
		Destroy Effect(Event Player.Active_Effects_ID[9]);
		Set Damage Dealt(Event Player, 100);
		Skip If(Event Player.New_Care_Package, 1);
		Call Subroutine(Load_Hero);
		Allow Button(Event Player, Button(Ability 1));
		Event Player.Active_Effects_ID[38] = 0;
	}
}

rule("Weapon : Hammer Time")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Event Player.Active_Effects_ID[38] != 0;
		Weapon(Event Player) != 2;
	}

	actions
	{
		Set Weapon(Event Player, 2);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Effect : Third Person")
{
	event
	{
		Subroutine;
		Third_Person;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????? ?????? ??? ???") : Custom String(
			"Third Person For {1}s", Null, Global.Effect_Settings[69]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[39]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[69] / 100), Event Player.Hide_Effects ? Custom String("????? ??????") : Custom String("Third Person"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[39] = Last Text ID;
		Start Rule(Start_Camera, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[69]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[39]);
		Event Player.Active_Effects_ID[39] = 0;
		Start Rule(Stop_Camera, Restart Rule);
	}
}

rule("Update : Third Person")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Array(39, 41, 50), Event Player.Active_Effects_ID[Current Array Element] != 0) == True;
		((Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player))
			!= Event Player.Hero_Size[1] || Event Player.Size != Event Player.Hero_Size[2]) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Event Player.Hero_Size = Array(Vector(X Component Of(Global.Third_Person_Pos[Index Of Array Value(Global.All_Heros, Is Duplicating(
			Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player))]) * Event Player.Size, Y Component Of(
			Global.Third_Person_Pos[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player) ? Hero Being Duplicated(
			Event Player) : Hero Of(Event Player))]) * Event Player.Size, Z Component Of(Global.Third_Person_Pos[Index Of Array Value(
			Global.All_Heros, Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player))])
			* Event Player.Size), Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player),
			Event Player.Size);
		Loop If Condition Is True;
	}
}

rule("Effect : Mind Control")
{
	event
	{
		Subroutine;
		Mind_Control;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.Mind_Control_Target.Active_Effects_ID[41] = 0;
		Event Player.Mind_Control_Target = Random Value In Array(Filtered Array(Remove From Array(All Living Players(All Teams),
			Event Player), Current Array Element.Is_Bot == 0));
		Event Player.Mind_Control_Target.Active_Effects_ID[41] = True;
		Start Rule(Mimic_Bindings, Restart Rule);
		Set Facing(Event Player, Facing Direction Of(Event Player.Mind_Control_Target), To World);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??????? ??? ???") : Custom String(
			"Mind Control {0}{2} For {1}s", Team Of(Event Player) == Team Of(Event Player.Mind_Control_Target) ? Custom String("Friendly")
			: Custom String("Enemy"), Global.Effect_Settings[70], Hero Icon String(Hero Of(Event Player.Mind_Control_Target))));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[40]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[70] / 100), Event Player.Hide_Effects ? Custom String("???? ???????") : Custom String("Mind Control"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[40] = Last Text ID;
		Start Rule(Start_Camera, Restart Rule);
		Start Rule(Start_Forcing_Position, Restart Rule);
		Set Invisible(Event Player, All);
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Status(Event Player, Null, Unkillable, 9999);
		Call Subroutine(Disable_Bindings);
		Set Crouch Enabled(Event Player, True);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[70]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[40]);
		Event Player.Active_Effects_ID[40] = 0;
		Event Player.Mind_Control_Target.Active_Effects_ID[41] = 0;
		Event Player.Mind_Control_Target = Null;
		Start Rule(Stop_Camera, Restart Rule);
		Start Rule(Stop_Forcing_Position, Restart Rule);
		Start Rule(Enable_Bindings, Restart Rule);
		Clear Status(Event Player, Phased Out);
		Clear Status(Event Player, Unkillable);
		Start Rule(Stop_Invisibility, Restart Rule);
	}
}

rule("Setup : Victim Control")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[41] != 0;
	}

	actions
	{
		Start Rule(Start_Throttle_In_Direction, Restart Rule);
		Start Rule(Start_Facing, Restart Rule);
		Start Rule(Start_Camera, Restart Rule);
		Wait Until(Event Player.Active_Effects_ID[41] == 0, Global.Effect_Settings[70]);
		Start Rule(Stop_Bindings, Restart Rule);
		Start Rule(Stop_Throttle_In_Direction, Restart Rule);
		Start Rule(Stop_Facing, Restart Rule);
		Start Rule(Stop_Camera, Restart Rule);
	}
}

rule("Hud : Recieve Damage")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[41] != 0;
	}

	actions
	{
		Damage(First Of(Filtered Array(All Players(All Teams), Current Array Element.Mind_Control_Target == Event Player)), Attacker, 1);
		Set Player Health(First Of(Filtered Array(All Players(All Teams), Current Array Element.Mind_Control_Target == Event Player)),
			Health(First Of(Filtered Array(All Players(All Teams), Current Array Element.Mind_Control_Target == Event Player))) + 1);
	}
}

rule("Hud : Deal Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[41] != 0;
	}

	actions
	{
		Set Player Health(Victim, Health(Victim) + 1);
		Damage(Victim, First Of(Filtered Array(All Players(All Teams), Current Array Element.Mind_Control_Target == Event Player)), 1);
	}
}

rule("Binding : Victim Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Button Held(Event Player, Button(Jump)) == True;
		Event Player.Mind_Control_Target.Active_Effects_ID[41] != 0;
	}

	actions
	{
		Allow Button(Event Player.Mind_Control_Target, Button(Jump));
		Start Holding Button(Event Player.Mind_Control_Target, Button(Jump));
		Wait Until(Is True For Any(Array(Event Player.Mind_Control_Target.Active_Effects_ID[41] == 0, !Is Button Held(Event Player, Button(
			Jump)), !Is Button Held(Event Player.Mind_Control_Target, Button(Jump))), Current Array Element), 99999);
		Stop Holding Button(Event Player.Mind_Control_Target, Button(Jump));
		Disallow Button(Event Player.Mind_Control_Target, Button(Jump));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Binding : Victim Crouch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is True For All(Array(Hero(D.Va), Hero(Wrecking Ball)), (Is Duplicating(Event Player.Mind_Control_Target) ? Hero Being Duplicated(
			Event Player.Mind_Control_Target) : Hero Of(Event Player.Mind_Control_Target)) != Current Array Element) == True;
		Event Player.Mind_Control_Target.Active_Effects_ID[41] != 0;
	}

	actions
	{
		Allow Button(Event Player.Mind_Control_Target, Button(Crouch));
		Start Holding Button(Event Player.Mind_Control_Target, Button(Crouch));
		Wait Until(Is True For Any(Array(Event Player.Mind_Control_Target.Active_Effects_ID[41] == 0, !Is Button Held(Event Player, Button(
			Crouch)), !Is Button Held(Event Player.Mind_Control_Target, Button(Crouch))), Current Array Element), 99999);
		Stop Holding Button(Event Player.Mind_Control_Target, Button(Crouch));
		Disallow Button(Event Player.Mind_Control_Target, Button(Crouch));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Binding : Victim Reload")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Button Held(Event Player, Button(Reload)) == True;
		Event Player.Mind_Control_Target.Active_Effects_ID[41] != 0;
	}

	actions
	{
		Allow Button(Event Player.Mind_Control_Target, Button(Reload));
		Start Holding Button(Event Player.Mind_Control_Target, Button(Reload));
		Wait Until(Is True For Any(Array(Event Player.Mind_Control_Target.Active_Effects_ID[41] == 0, !Is Button Held(Event Player, Button(
			Reload)), !Is Button Held(Event Player.Mind_Control_Target, Button(Reload))), Current Array Element), 99999);
		Stop Holding Button(Event Player.Mind_Control_Target, Button(Reload));
		Disallow Button(Event Player.Mind_Control_Target, Button(Reload));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Binding : Victim Melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Button Held(Event Player, Button(Melee)) == True;
		Event Player.Mind_Control_Target.Active_Effects_ID[41] != 0;
	}

	actions
	{
		Allow Button(Event Player.Mind_Control_Target, Button(Melee));
		Start Holding Button(Event Player.Mind_Control_Target, Button(Melee));
		Wait Until(Is True For Any(Array(Event Player.Mind_Control_Target.Active_Effects_ID[41] == 0, !Is Button Held(Event Player, Button(
			Melee)), !Is Button Held(Event Player.Mind_Control_Target, Button(Melee))), Current Array Element), 99999);
		Stop Holding Button(Event Player.Mind_Control_Target, Button(Melee));
		Disallow Button(Event Player.Mind_Control_Target, Button(Melee));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Binding : Victim Interact")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.Mind_Control_Target.Active_Effects_ID[41] != 0;
	}

	actions
	{
		If(Is True For Any(Array(Hero(Mercy), Hero(TorbjÃ¶rn)), (Is Duplicating(Event Player.Mind_Control_Target) ? Hero Being Duplicated(
			Event Player.Mind_Control_Target) : Hero Of(Event Player.Mind_Control_Target)) == Current Array Element));
			Set Weapon(Event Player, Weapon(Event Player.Mind_Control_Target) == 1 ? 2 : 1);
		End;
		Allow Button(Event Player.Mind_Control_Target, Button(Interact));
		Start Holding Button(Event Player.Mind_Control_Target, Button(Interact));
		Wait Until(Is True For Any(Array(Event Player.Mind_Control_Target.Active_Effects_ID[41] == 0, !Is Button Held(Event Player, Button(
			Interact)), !Is Button Held(Event Player.Mind_Control_Target, Button(Interact))), Current Array Element), 99999);
		Stop Holding Button(Event Player.Mind_Control_Target, Button(Interact));
		Disallow Button(Event Player.Mind_Control_Target, Button(Interact));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Binding : Victim Primary Fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Event Player.Mind_Control_Target.Active_Effects_ID[41] != 0;
		Is Button Held(Event Player.Mind_Control_Target, Button(Primary Fire)) != True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Allow Button(Event Player.Mind_Control_Target, Button(Primary Fire));
		Start Holding Button(Event Player.Mind_Control_Target, Button(Primary Fire));
		Wait Until(Is True For Any(Array(Event Player.Mind_Control_Target.Active_Effects_ID[41] == 0, !Is Button Held(Event Player, Button(
			Primary Fire)), !Is Button Held(Event Player.Mind_Control_Target, Button(Primary Fire))), Current Array Element), 99999);
		Stop Holding Button(Event Player.Mind_Control_Target, Button(Primary Fire));
		Disallow Button(Event Player.Mind_Control_Target, Button(Primary Fire));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Binding : Victim Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Event Player.Mind_Control_Target.Active_Effects_ID[41] != 0;
	}

	actions
	{
		Allow Button(Event Player.Mind_Control_Target, Button(Secondary Fire));
		Start Holding Button(Event Player.Mind_Control_Target, Button(Secondary Fire));
		Wait Until(Is True For Any(Array(Event Player.Mind_Control_Target.Active_Effects_ID[41] == 0, !Is Button Held(Event Player, Button(
			Secondary Fire)), !Is Button Held(Event Player.Mind_Control_Target, Button(Secondary Fire))), Current Array Element), 99999);
		Stop Holding Button(Event Player.Mind_Control_Target, Button(Secondary Fire));
		Disallow Button(Event Player.Mind_Control_Target, Button(Secondary Fire));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Binding : Victim Ability 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Event Player.Mind_Control_Target.Active_Effects_ID[41] != 0;
	}

	actions
	{
		Allow Button(Event Player.Mind_Control_Target, Button(Ability 2));
		Start Holding Button(Event Player.Mind_Control_Target, Button(Ability 2));
		Wait Until(Is True For Any(Array(Event Player.Mind_Control_Target.Active_Effects_ID[41] == 0, !Is Button Held(Event Player, Button(
			Ability 2)), !Is Button Held(Event Player.Mind_Control_Target, Button(Ability 2))), Current Array Element), 99999);
		Stop Holding Button(Event Player.Mind_Control_Target, Button(Ability 2));
		Disallow Button(Event Player.Mind_Control_Target, Button(Ability 2));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Binding : Victim Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Event Player.Mind_Control_Target.Active_Effects_ID[41] != 0;
	}

	actions
	{
		Allow Button(Event Player.Mind_Control_Target, Button(Ability 1));
		Start Holding Button(Event Player.Mind_Control_Target, Button(Ability 1));
		Wait Until(Is True For Any(Array(Event Player.Mind_Control_Target.Active_Effects_ID[41] == 0, !Is Button Held(Event Player, Button(
			Ability 1)), !Is Button Held(Event Player.Mind_Control_Target, Button(Ability 1))), Current Array Element), 99999);
		Stop Holding Button(Event Player.Mind_Control_Target, Button(Ability 1));
		Disallow Button(Event Player.Mind_Control_Target, Button(Ability 1));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Binding : Victim Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Allow Button(Event Player.Mind_Control_Target, Button(Ultimate));
		Start Holding Button(Event Player.Mind_Control_Target, Button(Ultimate));
		Wait Until(Is True For Any(Array(Event Player.Mind_Control_Target.Active_Effects_ID[41] == 0, !Is Button Held(Event Player, Button(
			Ultimate)), !Is Button Held(Event Player.Mind_Control_Target, Button(Ultimate))), Current Array Element), 99999);
		Stop Holding Button(Event Player.Mind_Control_Target, Button(Ultimate));
		Disallow Button(Event Player.Mind_Control_Target, Button(Ultimate));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Binding : Victim Hello")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Communicating(Event Player, Hello) == True;
	}

	actions
	{
		Communicate(Event Player.Mind_Control_Target, Hello);
	}
}

rule("Binding : Victim Need Healing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Communicating(Event Player, Need Healing) == True;
	}

	actions
	{
		Communicate(Event Player.Mind_Control_Target, Need Healing);
	}
}

rule("Binding : Victim Need Help")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Communicating(Event Player, Need Help) == True;
	}

	actions
	{
		Communicate(Event Player.Mind_Control_Target, Need Help);
	}
}

rule("Binding : Victim Thank You")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Communicating(Event Player, Thanks) == True;
	}

	actions
	{
		Communicate(Event Player.Mind_Control_Target, Thanks);
	}
}

rule("Binding : Victim Group Up")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Communicating(Event Player, Group Up) == True;
	}

	actions
	{
		Communicate(Event Player.Mind_Control_Target, Group Up);
	}
}

rule("Binding : Victim No")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Communicating(Event Player, No) == True;
	}

	actions
	{
		Communicate(Event Player.Mind_Control_Target, No);
	}
}

rule("Binding : Victim Yes")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Communicating(Event Player, Yes) == True;
	}

	actions
	{
		Communicate(Event Player.Mind_Control_Target, Yes);
	}
}

rule("Binding : Victim Ultimate Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[40] != 0;
		Is Communicating(Event Player, Ultimate Status) == True;
	}

	actions
	{
		Communicate(Event Player.Mind_Control_Target, Ultimate Status);
		Small Message(Event Player, Custom String("{0} At {1}% Charge", Ability Icon String(Is Duplicating(
			Event Player.Mind_Control_Target) ? Hero Being Duplicated(Event Player.Mind_Control_Target) : Hero Of(
			Event Player.Mind_Control_Target), Button(Ultimate)), Ultimate Charge Percent(Event Player.Mind_Control_Target)));
	}
}

rule("Effect : Long Jump")
{
	event
	{
		Subroutine;
		Long_Jump;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ???? ??? ???") : Custom String("Long Jump For {1}s",
			Null, Global.Effect_Settings[71]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[42]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[71] / 100), Event Player.Hide_Effects ? Custom String("???? ????") : Custom String("Long Jump"), Left,
			0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[42] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[71]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[42]);
		Event Player.Active_Effects_ID[42] = 0;
	}
}

rule("Trigger : Long Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[42] != 0;
		Is Jumping(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, World Vector Of(Magnitude Of(Throttle Of(Event Player)) == 0 ? Forward : Throttle Of(Event Player),
			Event Player, Rotation), 8, To World, Incorporate Contrary Motion);
	}
}

rule("Binding : Setup Mimic")
{
	event
	{
		Subroutine;
		Mimic_Bindings;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Start Holding Button(Event Player.Mind_Control_Target, Button(Primary Fire));
		Else;
			Disallow Button(Event Player.Mind_Control_Target, Button(Primary Fire));
		End;
		If(Is Button Held(Event Player, Button(Secondary Fire)));
			Start Holding Button(Event Player.Mind_Control_Target, Button(Secondary Fire));
		Else;
			Disallow Button(Event Player.Mind_Control_Target, Button(Secondary Fire));
		End;
		If(Is Button Held(Event Player, Button(Ability 1)));
			Start Holding Button(Event Player.Mind_Control_Target, Button(Ability 1));
		Else;
			Disallow Button(Event Player.Mind_Control_Target, Button(Ability 1));
		End;
		If(Is Button Held(Event Player, Button(Ability 2)));
			Start Holding Button(Event Player.Mind_Control_Target, Button(Ability 2));
		Else;
			Disallow Button(Event Player.Mind_Control_Target, Button(Ability 2));
		End;
		If(Is Button Held(Event Player, Button(Ultimate)));
			Start Holding Button(Event Player.Mind_Control_Target, Button(Ultimate));
		Else;
			Disallow Button(Event Player.Mind_Control_Target, Button(Ultimate));
		End;
		If(Is Button Held(Event Player, Button(Interact)));
			Start Holding Button(Event Player.Mind_Control_Target, Button(Interact));
		Else;
			Disallow Button(Event Player.Mind_Control_Target, Button(Interact));
		End;
		If(Is Button Held(Event Player, Button(Jump)));
			Start Holding Button(Event Player.Mind_Control_Target, Button(Jump));
		Else;
			Disallow Button(Event Player.Mind_Control_Target, Button(Jump));
		End;
		If(Is Button Held(Event Player, Button(Crouch)));
			Start Holding Button(Event Player.Mind_Control_Target, Button(Crouch));
		Else;
			Disallow Button(Event Player.Mind_Control_Target, Button(Crouch));
		End;
		If(Is Button Held(Event Player, Button(Melee)));
			Start Holding Button(Event Player.Mind_Control_Target, Button(Melee));
		Else;
			Disallow Button(Event Player.Mind_Control_Target, Button(Melee));
		End;
		If(Is Button Held(Event Player, Button(Reload)));
			Start Holding Button(Event Player.Mind_Control_Target, Button(Reload));
		Else;
			Disallow Button(Event Player.Mind_Control_Target, Button(Reload));
		End;
	}
}

rule("Binding : Stop Mimic")
{
	event
	{
		Subroutine;
		Stop_Bindings;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Stop Holding Button(Event Player, Button(Ability 1));
		Stop Holding Button(Event Player, Button(Ability 2));
		Stop Holding Button(Event Player, Button(Ultimate));
		Stop Holding Button(Event Player, Button(Interact));
		Stop Holding Button(Event Player, Button(Jump));
		Stop Holding Button(Event Player, Button(Crouch));
		Stop Holding Button(Event Player, Button(Melee));
		Stop Holding Button(Event Player, Button(Reload));
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Ultimate));
		Allow Button(Event Player, Button(Interact));
		Allow Button(Event Player, Button(Jump));
		Allow Button(Event Player, Button(Crouch));
		Allow Button(Event Player, Button(Melee));
		Allow Button(Event Player, Button(Reload));
	}
}

rule("Trigger : Random Effect")
{
	event
	{
		Subroutine;
		Trigger_Random_Effect;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Event Player.Trigger_Effect = Custom String("");
		Event Player.Trigger_Effect = Random Value In Array(Event Player.Is_Bot == True ? Remove From Array(Global.Effects,
			Global.Broken_Bot_Effects) : Global.Effects);
	}
}

rule("Effect : Script Kiddie")
{
	event
	{
		Subroutine;
		Script_Kiddie;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ?????? ??? ???") : Custom String(
			"Script Kiddie For {1}s", Null, Global.Effect_Settings[72]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[43]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[72] / 100), Event Player.Hide_Effects ? Custom String("?????? ??????") : Custom String("Script Kiddie"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[43] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[72]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[43]);
		Event Player.Active_Effects_ID[43] = 0;
	}
}

rule("Targets : Script Kiddie")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[43] != 0;
		Is Alive(Event Player) == True;
		(Is Button Held(Event Player, Button(Primary Fire)) || (Is True For Any(Array(Hero(Ana), Hero(Ashe), Hero(Widowmaker)),
			Current Array Element == (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)))
			&& Is Button Held(Event Player, Button(Secondary Fire)))) == True;
	}

	actions
	{
		Event Player.Script_Targets = Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), Is In Line of Sight(
			Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS) && Is In View Angle(Event Player,
			Eye Position(Current Array Element), 60));
		Event Player.Script_Targets = Filtered Array(Event Player.Script_Targets, (Is Duplicating(Current Array Element)
			? Hero Being Duplicated(Current Array Element) : Hero Of(Current Array Element)) != Hero(Sombra) || !Is Using Ability 1(
			Current Array Element) || Is Firing Secondary(Current Array Element));
		Event Player.Script_Targets = Filtered Array(Event Player.Script_Targets, !(Health(Current Array Element) == 1 && Has Status(
			Current Array Element, Unkillable)) && !Has Status(Current Array Element, Invincible) && !Has Status(Current Array Element,
			Phased Out) && !Is In Spawn Room(Current Array Element));
		Event Player.Script_Targets = Filtered Array(Event Player.Script_Targets, (Is Duplicating(Current Array Element)
			? Hero Being Duplicated(Current Array Element) : Hero Of(Current Array Element)) != Hero(D.Va) || !Is Firing Secondary(
			Current Array Element) || !Is In View Angle(Current Array Element, Eye Position(Event Player), 45));
		Event Player.Script_Targets = Filtered Array(Event Player.Script_Targets, (Is Duplicating(Current Array Element)
			? Hero Being Duplicated(Current Array Element) : Hero Of(Current Array Element)) != Hero(Genji) || !Is Using Ability 2(
			Current Array Element) || !Is In View Angle(Current Array Element, Eye Position(Event Player), 45));
		Event Player.Script_Targets = Filtered Array(Event Player.Script_Targets, (Is Duplicating(Current Array Element)
			? Hero Being Duplicated(Current Array Element) : Hero Of(Current Array Element)) != Hero(Orisa) || !Is Using Ability 2(
			Current Array Element) || !Is In View Angle(Current Array Element, Eye Position(Event Player), 45));
		Event Player.Script_Targets = Filtered Array(Event Player.Script_Targets, (Is Duplicating(Current Array Element)
			? Hero Being Duplicated(Current Array Element) : Hero Of(Current Array Element)) != Hero(Sigma) || !Is Using Ability 1(
			Current Array Element) || !Is In View Angle(Current Array Element, Eye Position(Event Player), 45));
		Event Player.Script_Targets = Filtered Array(Event Player.Script_Targets, (Is Duplicating(Current Array Element)
			? Hero Being Duplicated(Current Array Element) : Hero Of(Current Array Element)) != Hero(Doomfist) || !Is Using Ultimate(
			Current Array Element));
		Event Player.Script_Targets = Filtered Array(Event Player.Script_Targets, (Is Duplicating(Current Array Element)
			? Hero Being Duplicated(Current Array Element) : Hero Of(Current Array Element)) != Hero(Mei) || !Is Using Ability 1(
			Current Array Element));
		Event Player.Script_Targets = Filtered Array(Event Player.Script_Targets, (Is Duplicating(Current Array Element)
			? Hero Being Duplicated(Current Array Element) : Hero Of(Current Array Element)) != Hero(Moira) || !Is Using Ability 1(
			Current Array Element));
		Event Player.Script_Targets = Filtered Array(Event Player.Script_Targets, (Is Duplicating(Current Array Element)
			? Hero Being Duplicated(Current Array Element) : Hero Of(Current Array Element)) != Hero(Reaper) || !Is Using Ability 1(
			Current Array Element));
		Event Player.Script_Targets = Filtered Array(Event Player.Script_Targets, (Is Duplicating(Current Array Element)
			? Hero Being Duplicated(Current Array Element) : Hero Of(Current Array Element)) != Hero(Tracer) || !Is Using Ability 2(
			Current Array Element));
		Event Player.Script_Targets = Filtered Array(Event Player.Script_Targets, (Is Duplicating(Current Array Element)
			? Hero Being Duplicated(Current Array Element) : Hero Of(Current Array Element)) != Hero(Zenyatta) || !Is Using Ultimate(
			Current Array Element));
		Event Player.Script_Targets = Sorted Array(Event Player.Script_Targets, Distance Between(Current Array Element, Eye Position(
			Event Player) + Facing Direction Of(Event Player) * Distance Between(Event Player, Current Array Element)));
		Event Player.Script_Target = First Of(Event Player.Script_Targets);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Trigger : Script Kiddie")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[43] != 0;
		(Is Button Held(Event Player, Button(Primary Fire)) || (Is True For Any(Array(Hero(Ana), Hero(Ashe), Hero(Widowmaker)),
			Current Array Element == (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)))
			&& Is Button Held(Event Player, Button(Secondary Fire)))) == True;
		Is Alive(Event Player) == True;
		Entity Exists(Event Player.Script_Target) == True;
	}

	actions
	{
		Start Rule(Start_Facing, Restart Rule);
		Wait Until((!Is Button Held(Event Player, Button(Primary Fire)) && Is True For Any(Array(Hero(Ana), Hero(Ashe), Hero(Widowmaker)),
			Current Array Element == (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)))
			&& !Is Button Held(Event Player, Button(Secondary Fire))) || Is True For Any(Array(!Entity Exists(Event Player.Script_Target),
			Event Player.Active_Effects_ID[43] == 0, Is Dead(Event Player)), Current Array Element), 99999);
		Start Rule(Stop_Facing, Restart Rule);
		Stop Facing(Event Player);
	}
}

rule("Script : Set Projectile Primary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[43] != 0;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		(((Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)) != Hero(Ramattra)
			|| !Is In Alternate Form(Event Player)) && (Is True For All(Array(Hero(Ana), Hero(Ashe), Hero(Widowmaker)), (Is Duplicating(
			Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)) != Current Array Element) || !Is Firing Secondary(
			Event Player))) == True;
		(Event Player.Script_Projectile_Speed != Global.Primary_Speed[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))
			] * Event Player.Projectile_Speed || Event Player.Script_Projectile_Arc != Global.Primary_Arc[Index Of Array Value(
			Global.All_Heros, Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player))
			] * Event Player.Projectile_Gravity) == True;
	}

	actions
	{
		Event Player.Script_Projectile_Speed = Global.Primary_Speed[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))] * Event Player.Projectile_Speed;
		Event Player.Script_Projectile_Arc = Global.Primary_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))] * Event Player.Projectile_Gravity;
	}
}

rule("Effect : Daylight Burns")
{
	event
	{
		Subroutine;
		Daylight_Burns;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?? ????? ??? ???") : Custom String("It Burns For {1}s",
			Null, Global.Effect_Settings[73]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[44]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[73] / 100), Event Player.Hide_Effects ? Custom String("?? ?????") : Custom String("It Burns"), Left, 0,
			Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[44] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[73]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[44]);
		Event Player.Active_Effects_ID[44] = 0;
	}
}

rule("Trigger : Daylight Burns")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[44] != 0;
		Ray Cast Hit Position(Eye Position(Event Player), World Vector Of(Vector(0, 999, 0), Event Player, Rotation And Translation), Null,
			Event Player, False) == World Vector Of(Vector(0, 999, 0), Event Player, Rotation And Translation);
		Has Status(Event Player, Burning) != True;
	}

	actions
	{
		Set Status(Event Player, Null, Burning, 9999);
		Start Damage Over Time(Event Player, Null, 9999, 20);
		Wait Until(Is True For Any(Array(Event Player.Active_Effects_ID[44] == 0, Ray Cast Hit Position(Eye Position(Event Player),
			World Vector Of(Vector(0, 999, 0), Event Player, Rotation And Translation), Null, Event Player, False) != World Vector Of(
			Vector(0, 999, 0), Event Player, Rotation And Translation), !Has Status(Event Player, Burning)), Current Array Element),
			99999);
		Wait(1, Ignore Condition);
		Clear Status(Event Player, Burning);
		Stop All Damage Over Time(Event Player);
		Loop If Condition Is True;
	}
}

rule("Effect : Springtrap")
{
	event
	{
		Subroutine;
		Springtrap;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("? ?????? ???? ???? ??? ???") : Custom String(
			"I Always Come Back For {1}s", Null, Global.Effect_Settings[74]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[45]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[74] / 100), Event Player.Hide_Effects ? Custom String("? ?????? ???? ????") : Custom String(
			"I Always Come Back"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[45] = Last Text ID;
		Wait(Global.Effect_Settings[74], Ignore Condition);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[45]);
		Event Player.Active_Effects_ID[45] = 0;
	}
}

rule("Trigger : Springtrap")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[45] != 0;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Resurrect(Event Player);
		Set Player Health(Event Player, Max Health(Event Player) * 0.250);
	}
}

rule("Effect : Low Gravity")
{
	event
	{
		Subroutine;
		Low_Gravity;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??? ??????? ??? ???") : Custom String(
			"Low Gravity For {0}s", Global.Effect_Settings[75]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[46]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[75] / 100), Event Player.Hide_Effects ? Custom String("??? ???????") : Custom String("Low Gravity"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[46] = Last Text ID;
		Start Rule(Modify_Gravity, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[75]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[46]);
		Event Player.Active_Effects_ID[46] = 0;
		Start Rule(Reset_Gravity, Restart Rule);
	}
}

rule("Effect : No Cooldowns")
{
	event
	{
		Subroutine;
		No_Cooldowns;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?? ????????? ??? ???") : Custom String(
			"No Cooldowns For {0}s", Global.Effect_Settings[76]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[47]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[76] / 100), Event Player.Hide_Effects ? Custom String("?? ?????????") : Custom String("No Cooldowns"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[47] = Last Text ID;
		Start Rule(Reset_Cooldowns, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[76]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[47]);
		Event Player.Active_Effects_ID[47] = 0;
	}
}

rule("Loop : No Cooldowns")
{
	event
	{
		Subroutine;
		Reset_Cooldowns;
	}

	actions
	{
		While(Event Player.Active_Effects_ID[47] != 0);
			Wait(0.100, Ignore Condition);
			Set Ability Cooldown(Event Player, Button(Primary Fire), 0);
			Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
			Set Ability Cooldown(Event Player, Button(Ability 2), 0);
			Set Ability Cooldown(Event Player, Button(Jump), 0);
			Set Ability Cooldown(Event Player, Button(Crouch), 0);
			Set Ability Charge(Event Player, Button(Secondary Fire), Max(Ability Charge(Event Player, Button(Secondary Fire)), 1));
			Set Ability Charge(Event Player, Button(Ability 1), Max(Ability Charge(Event Player, Button(Ability 1)), 1));
			Set Ability Charge(Event Player, Button(Ability 2), Max(Ability Charge(Event Player, Button(Ability 2)), 1));
			Set Ability Resource(Event Player, Button(Secondary Fire), 100);
			Set Ability Resource(Event Player, Button(Ability 1), 100);
			Set Ability Resource(Event Player, Button(Ability 2), 100);
		End;
	}
}

rule("Effect : Freecam")
{
	event
	{
		Subroutine;
		Freecam;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??????? ??? ???") : Custom String("Freecam For {0}s",
			Global.Effect_Settings[77]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[48]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[77] / 100), Event Player.Hide_Effects ? Custom String("???????") : Custom String("Freecam"), Left, 0,
			Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[48] = Last Text ID;
		Event Player.Freecam_Pos = Position Of(Event Player);
		Chase Player Variable At Rate(Event Player, Freecam_Pos, Event Player.Freecam_Pos + World Vector Of(Vector(X Component Of(
			Throttle Of(Event Player)), Is Button Held(Event Player, Button(Jump)) && !Is Button Held(Event Player, Button(Crouch)) ? 1 : (
			Is Button Held(Event Player, Button(Crouch)) && !Is Button Held(Event Player, Button(Jump)) ? -1 : 0), 0), Event Player,
			Rotation) + Facing Direction Of(Event Player) * Z Component Of(Throttle Of(Event Player)), 12 * (Is Button Held(Event Player,
			Button(Jump)) || Is Button Held(Event Player, Button(Crouch)) ? 1 : Min(Magnitude Of(Throttle Of(Event Player)), 1)),
			Destination and Rate);
		Start Rule(Start_Camera, Restart Rule);
		Start Rule(Start_Forcing_Position, Restart Rule);
		Set Invisible(Event Player, All);
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Status(Event Player, Null, Unkillable, 9999);
		Call Subroutine(Disable_Bindings);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[77]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[48]);
		Event Player.Active_Effects_ID[48] = 0;
		Start Rule(Stop_Camera, Restart Rule);
		Start Rule(Stop_Forcing_Position, Restart Rule);
		Start Rule(Enable_Bindings, Restart Rule);
		Clear Status(Event Player, Phased Out);
		Clear Status(Event Player, Unkillable);
		Start Rule(Stop_Invisibility, Restart Rule);
		Stop Chasing Player Variable(Event Player, Freecam_Pos);
	}
}

rule("Effect : Swap Team")
{
	event
	{
		Subroutine;
		Swap_Team;
	}

	actions
	{
		Event Player.Swap_Team_With = Random Value In Array(Filtered Array(All Players(Opposite Team Of(Team Of(Event Player))),
			Current Array Element.Is_Bot == 0 && !Is Dummy Bot(Current Array Element)));
		If(!Entity Exists(Event Player.Swap_Team_With));
			If(Number Of Players(Opposite Team Of(Team Of(Event Player))) < Number Of Slots(Opposite Team Of(Team Of(Event Player))) - 1);
				Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ???? ?? ? ????????") : Custom String(
					"Swapping Team In 5 Seconds"));
				Skip If(Array Contains(Global.Indexed_Player, Event Player), 1);
				Modify Global Variable(Indexed_Player, Append To Array, Event Player);
				Wait(5, Ignore Condition);
				Skip If(Event Player.Original_Hero == Null, 1);
				Call Subroutine(Load_Hero);
				Wait(0.016, Ignore Condition);
				Start Rule(Index_Hero, Restart Rule);
				Move Player to Team(Event Player, Opposite Team Of(Team Of(Event Player)), -1);
			Else;
				Start Rule(Trigger_Random_Effect, Restart Rule);
				Abort;
			End;
		Else;
			Event Player.Swap_Team_With.Swap_Team_With = Event Player;
		End;
	}
}

rule("Trigger : Swap Team")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Entity Exists(Event Player.Swap_Team_With) == True;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ???? ???? ??? ?? ? ????????") : Custom String(
			"Swapping Team With {0} In 5 Seconds", Hero Icon String(Hero Of(Event Player.Swap_Team_With))));
		Skip If(Array Contains(Global.Indexed_Player, Event Player), 1);
		Modify Global Variable(Indexed_Player, Append To Array, Event Player);
		Wait(5, Ignore Condition);
		Skip If(Event Player.Original_Hero == Null, 1);
		Call Subroutine(Load_Hero);
		Wait(0.016, Ignore Condition);
		Call Subroutine(Index_Hero);
		Move Player to Team(Event Player, Opposite Team Of(Team Of(Event Player)), -1);
	}
}

rule("Index : Save")
{
	event
	{
		Subroutine;
		Index_Hero;
	}

	actions
	{
		Event Player.Save_Character = Empty Array;
		Modify Player Variable(Event Player, Save_Character, Append To Array, Health(Event Player));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Health Of Type(Event Player, Health));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Health Of Type(Event Player, Armor));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Health Of Type(Event Player, Shields));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Cooldown(Event Player, Button(Primary Fire)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Cooldown(Event Player, Button(Secondary Fire)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Cooldown(Event Player, Button(Ability 1)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Cooldown(Event Player, Button(Ability 2)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Cooldown(Event Player, Button(Jump)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Cooldown(Event Player, Button(Crouch)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Cooldown(Event Player, Button(Melee)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Charge(Event Player, Button(Secondary Fire)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Charge(Event Player, Button(Ability 1)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Charge(Event Player, Button(Ability 2)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Resource(Event Player, Button(Primary Fire)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Resource(Event Player, Button(Secondary Fire)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Resource(Event Player, Button(Ability 1)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ability Resource(Event Player, Button(Ability 2)));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Weapon(Event Player));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ammo(Event Player, 0));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ammo(Event Player, 1));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Is In Alternate Form(Event Player));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Ultimate Charge Percent(Event Player));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Is In Spawn Room(Event Player) ? Random Value In Array(
			Spawn Points(Opposite Team Of(Team Of(Event Player)))) : Position Of(Event Player));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Facing Direction Of(Event Player));
		Modify Player Variable(Event Player, Save_Character, Append To Array, Hero Of(Event Player));
		Global.Indexed_Stats[Index Of Array Value(Global.Indexed_Player, Event Player)] = Event Player.Save_Character;
		Event Player.Active_Effects_ID = Empty Array;
	}
}

rule("Index : Load")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Abort If(!Array Contains(Global.Indexed_Player, Event Player));
		Event Player.Load_Character = Global.Indexed_Stats[Index Of Array Value(Global.Indexed_Player, Event Player)];
		Teleport(Event Player, Event Player.Load_Character[23]);
		Start Forcing Player To Be Hero(Event Player, Event Player.Load_Character[25]);
		Wait(0.010, Ignore Condition);
		If(Event Player.Load_Character[25] == Hero(D.Va) && Event Player.Load_Character[21] == True);
			Kill(Event Player, Null);
			Wait Until(Is In Alternate Form(Event Player), 99999);
		End;
		Set Player Health(Event Player, Event Player.Load_Character[0]);
		Set Ability Cooldown(Event Player, Button(Primary Fire), Event Player.Load_Character[4]);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), Event Player.Load_Character[5]);
		Set Ability Cooldown(Event Player, Button(Ability 1), Event Player.Load_Character[6]);
		Set Ability Cooldown(Event Player, Button(Ability 2), Event Player.Load_Character[7]);
		Set Ability Cooldown(Event Player, Button(Jump), Event Player.Load_Character[8]);
		Set Ability Cooldown(Event Player, Button(Crouch), Event Player.Load_Character[9]);
		Set Ability Cooldown(Event Player, Button(Melee), Event Player.Load_Character[10]);
		Set Ability Charge(Event Player, Button(Secondary Fire), Event Player.Load_Character[11]);
		Set Ability Charge(Event Player, Button(Ability 1), Event Player.Load_Character[12]);
		Set Ability Charge(Event Player, Button(Ability 2), Event Player.Load_Character[13]);
		Set Ability Resource(Event Player, Button(Primary Fire), Event Player.Load_Character[14]);
		Set Ability Resource(Event Player, Button(Secondary Fire), Event Player.Load_Character[15]);
		Set Ability Resource(Event Player, Button(Ability 1), Event Player.Load_Character[16]);
		Set Ability Resource(Event Player, Button(Ability 2), Event Player.Load_Character[17]);
		Set Weapon(Event Player, Event Player.Load_Character[25] == Hero(Lifeweaver) ? (Event Player.Load_Character[21] ? 2 : 1)
			: Event Player.Load_Character[17]);
		Skip If(Is True For Any(Array(Hero(Orisa), Hero(Lifeweaver)), Event Player.Load_Character[25] == Current Array Element), 2);
		Set Ammo(Event Player, 0, Event Player.Load_Character[19]);
		Set Ammo(Event Player, 1, Event Player.Load_Character[20]);
		Stop Forcing Player To Be Hero(Event Player);
		Set Ultimate Charge(Event Player, Event Player.Load_Character[22]);
		Set Facing(Event Player, Event Player.Load_Character[24], To World);
		Modify Global Variable(Indexed_Stats, Remove From Array By Value, Event Player.Load_Character);
		Modify Global Variable(Indexed_Player, Remove From Array By Value, Event Player);
	}
}

rule("Effect : Speed Is Key")
{
	event
	{
		Subroutine;
		Speed_Is_Key;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????? ?? ??? ??? ???") : Custom String(
			"Speed Is Key For {0}s", Global.Effect_Settings[79]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[49]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[79] / 100), Event Player.Hide_Effects ? Custom String("????? ?? ???") : Custom String("Speed Is Key"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[49] = Last Text ID;
		Start Rule(Modify_Speed, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[79]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[49]);
		Event Player.Active_Effects_ID[49] = 0;
		Start Rule(Reset_Speed, Restart Rule);
	}
}

rule("Effect : Care Package")
{
	event
	{
		Subroutine;
		Care_Package;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.New_Care_Package = True;
		Wait(0.100, Ignore Condition);
		Event Player.Randomise = Random Value In Array(Array(Custom String("E54"), Custom String("OR14"), Custom String("P-900 Warhead"),
			Custom String("K-2000 Blademaster"), Custom String("C-455 Sharpshooter"), Custom String("S-900 Sentry"), Custom String(
			"A-7000 Wargod"), Custom String("Rip-Tire"), Custom String("Tokki")));
		If(Event Player.Randomise == Custom String("E54"));
			Start Rule(Package_E54, Restart Rule);
		Else If(Event Player.Randomise == Custom String("OR14"));
			Start Rule(Package_OR14, Restart Rule);
		Else If(Event Player.Randomise == Custom String("P-900 Warhead"));
			Start Rule(Package_P900_Warhead, Restart Rule);
		Else If(Event Player.Randomise == Custom String("K-2000 Blademaster"));
			Start Rule(Package_K2000_Blademaster, Restart Rule);
		Else If(Event Player.Randomise == Custom String("C-455 Sharpshooter"));
			Start Rule(Package_C455_Sharpshooter, Restart Rule);
		Else If(Event Player.Randomise == Custom String("S-900 Sentry"));
			Start Rule(Package_S900_Sentry, Restart Rule);
		Else If(Event Player.Randomise == Custom String("A-7000 Wargod"));
			Start Rule(Package_A7000_Wargod, Restart Rule);
		Else If(Event Player.Randomise == Custom String("Rip-Tire"));
			Start Rule(Package_Riptire, Restart Rule);
		Else If(Event Player.Randomise == Custom String("Tokki"));
			Start Rule(Package_Tokki, Restart Rule);
	}
}

rule("Package : Inbound")
{
	event
	{
		Subroutine;
		Package_Inbound;
	}

	actions
	{
		Skip If(Event Player.Drop_Location != Null, 1);
		Event Player.Drop_Location = Ray Cast Hit Position(World Vector Of(Vector(0, 1, 0), Event Player, Rotation And Translation),
			World Vector Of(Vector(0, -99, 0), Event Player, Rotation And Translation), Null, Event Player, False);
		Event Player.Package_Position = Event Player.Drop_Location + Vector(0, 100, 0);
		Start Forcing Player Position(Event Player, Update Every Frame(Event Player.Package_Position), True);
		Chase Player Variable Over Time(Event Player, Package_Position, Event Player.Drop_Location, 1.400, Destination and Duration);
		Wait(0.500, Ignore Condition);
		Wait Until(Distance Between(Event Player, Event Player.Drop_Location) <= 0.500, 99999);
		Wait(0.100, Ignore Condition);
		Start Rule(Stop_Forcing_Position, Restart Rule);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Color(White), Event Player, 0.010);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Color(White), Event Player, 100);
		Damage(Players Within Radius(Event Player, 6, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player,
			25);
		Damage(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player,
			75);
		Damage(Players Within Radius(Event Player, 3, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player,
			50);
		Damage(Players Within Radius(Event Player, 1.500, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers),
			Event Player, 150);
	}
}

rule("Package : Bastion - Codename E54")
{
	event
	{
		Subroutine;
		Package_E54;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??????? ??? ??? ???") : Custom String(
			"Care Package E54"));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Start Forcing Player To Be Hero(Event Player, Hero(Bastion));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[51]);
		Event Player.Active_Effects_ID[51] = 0;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / ((
			Global.Effect_Settings[80] + 1.500) / 100), Event Player.Hide_Effects ? Custom String("?????? ???? ???") : Custom String(
			"Remote Unit E54"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[50] = Last Text ID;
		Start Rule(Start_Camera, Restart Rule);
		Call Subroutine(Package_Inbound);
		Event Player.New_Care_Package = False;
		Wait Until(Is Dead(Event Player) || Hero Of(Event Player) != Hero(Bastion)
			|| Event Player.Active_Effects_ID[50] == 0 || Event Player.New_Care_Package == True, Global.Effect_Settings[80]);
		Abort If(Event Player.Active_Effects_ID[50] == 0);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Event Player.Active_Effects_ID[50] = 0;
		Skip If(Hero Of(Event Player) != Hero(Bastion) || Event Player.New_Care_Package == True, 4);
		Communicate(Event Player, Goodbye);
		Wait(0.250, Ignore Condition);
		Kill(Event Player, Null);
		Wait(0.750, Ignore Condition);
		Teleport(Event Player, Event Player.Drop_Location);
		Resurrect(Event Player);
		Skip If(Event Player.New_Care_Package == True, 2);
		Start Rule(Stop_Camera, Restart Rule);
		Event Player.Drop_Location = Null;
		Skip If(Hero Of(Event Player) != Hero(Bastion), 1);
		Call Subroutine(Load_Hero);
	}
}

rule("Package : Orisa - Codename OR14")
{
	event
	{
		Subroutine;
		Package_OR14;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??????? ???? ??? ???") : Custom String(
			"Care Package OR14"));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Start Forcing Player To Be Hero(Event Player, Hero(Orisa));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[51]);
		Event Player.Active_Effects_ID[51] = 0;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / ((
			Global.Effect_Settings[80] + 1.500) / 100), Event Player.Hide_Effects ? Custom String("?????? ???? ????") : Custom String(
			"Remote Unit OR14"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[50] = Last Text ID;
		Start Rule(Start_Camera, Restart Rule);
		Call Subroutine(Package_Inbound);
		Event Player.New_Care_Package = False;
		Wait Until(Is Dead(Event Player) || Hero Of(Event Player) != Hero(Orisa)
			|| Event Player.Active_Effects_ID[50] == 0 || Event Player.New_Care_Package == True, Global.Effect_Settings[80]);
		Abort If(Event Player.Active_Effects_ID[50] == 0);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Event Player.Active_Effects_ID[50] = 0;
		Skip If(Hero Of(Event Player) != Hero(Orisa) || Event Player.New_Care_Package == True, 4);
		Communicate(Event Player, Goodbye);
		Wait(0.250, Ignore Condition);
		Kill(Event Player, Null);
		Wait(0.750, Ignore Condition);
		Teleport(Event Player, Event Player.Drop_Location);
		Resurrect(Event Player);
		Skip If(Event Player.New_Care_Package == True, 2);
		Start Rule(Stop_Camera, Restart Rule);
		Event Player.Drop_Location = Null;
		Skip If(Hero Of(Event Player) != Hero(Orisa), 1);
		Call Subroutine(Load_Hero);
	}
}

rule("Package : Ana - Codename A-7000 Wargod")
{
	event
	{
		Subroutine;
		Package_A7000_Wargod;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??????? ?????? ??? ???") : Custom String(
			"Care Package A-7000"));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Start Forcing Player To Be Hero(Event Player, Hero(Ana));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[51]);
		Event Player.Active_Effects_ID[51] = 0;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / ((
			Global.Effect_Settings[80] + 1.500) / 100), Event Player.Hide_Effects ? Custom String("?????? ???? ?????? ??????")
			: Custom String("Remote Unit A-7000 Wargod"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color,
			Default Visibility);
		Event Player.Active_Effects_ID[50] = Last Text ID;
		Start Rule(Start_Camera, Restart Rule);
		Call Subroutine(Package_Inbound);
		Event Player.New_Care_Package = False;
		Wait Until(Is Dead(Event Player) || Hero Of(Event Player) != Hero(Ana)
			|| Event Player.Active_Effects_ID[50] == 0 || Event Player.New_Care_Package == True, Global.Effect_Settings[80]);
		Abort If(Event Player.Active_Effects_ID[50] == 0);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Event Player.Active_Effects_ID[50] = 0;
		Skip If(Hero Of(Event Player) != Hero(Ana) || Event Player.New_Care_Package == True, 4);
		Communicate(Event Player, Goodbye);
		Wait(0.250, Ignore Condition);
		Kill(Event Player, Null);
		Wait(0.750, Ignore Condition);
		Teleport(Event Player, Event Player.Drop_Location);
		Resurrect(Event Player);
		Skip If(Event Player.New_Care_Package == True, 2);
		Start Rule(Stop_Camera, Restart Rule);
		Event Player.Drop_Location = Null;
		Skip If(Hero Of(Event Player) != Hero(Ana), 1);
		Call Subroutine(Load_Hero);
	}
}

rule("Package : Cassidy - Codename C-455 Sharpshooter")
{
	event
	{
		Subroutine;
		Package_C455_Sharpshooter;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??????? ????? ??? ???") : Custom String(
			"Care Package C-455"));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Start Forcing Player To Be Hero(Event Player, Hero(Cassidy));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[51]);
		Event Player.Active_Effects_ID[51] = 0;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / ((
			Global.Effect_Settings[80] + 1.500) / 100), Event Player.Hide_Effects ? Custom String("?????? ???? ????? ????????????")
			: Custom String("Remote Unit C-455 Sharpshooter"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color,
			Default Visibility);
		Event Player.Active_Effects_ID[50] = Last Text ID;
		Start Rule(Start_Camera, Restart Rule);
		Call Subroutine(Package_Inbound);
		Event Player.New_Care_Package = False;
		Wait Until(Is Dead(Event Player) || Hero Of(Event Player) != Hero(Cassidy)
			|| Event Player.Active_Effects_ID[50] == 0 || Event Player.New_Care_Package == True, Global.Effect_Settings[80]);
		Abort If(Event Player.Active_Effects_ID[50] == 0);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Event Player.Active_Effects_ID[50] = 0;
		Skip If(Hero Of(Event Player) != Hero(Cassidy) || Event Player.New_Care_Package == True, 4);
		Communicate(Event Player, Goodbye);
		Wait(0.250, Ignore Condition);
		Kill(Event Player, Null);
		Wait(0.750, Ignore Condition);
		Teleport(Event Player, Event Player.Drop_Location);
		Resurrect(Event Player);
		Skip If(Event Player.New_Care_Package == True, 2);
		Start Rule(Stop_Camera, Restart Rule);
		Event Player.Drop_Location = Null;
		Skip If(Hero Of(Event Player) != Hero(Cassidy), 1);
		Call Subroutine(Load_Hero);
	}
}

rule("Package : Symmetra - Codename S-900 Sentry")
{
	event
	{
		Subroutine;
		Package_S900_Sentry;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??????? ????? ??? ???") : Custom String(
			"Care Package S-900"));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Start Forcing Player To Be Hero(Event Player, Hero(Symmetra));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[51]);
		Event Player.Active_Effects_ID[51] = 0;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / ((
			Global.Effect_Settings[80] + 1.500) / 100), Event Player.Hide_Effects ? Custom String("?????? ???? ????? ??????")
			: Custom String("Remote Unit S-900 Sentry"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color,
			Default Visibility);
		Event Player.Active_Effects_ID[50] = Last Text ID;
		Start Rule(Start_Camera, Restart Rule);
		Call Subroutine(Package_Inbound);
		Event Player.New_Care_Package = False;
		Wait Until(Is Dead(Event Player) || Hero Of(Event Player) != Hero(Symmetra)
			|| Event Player.Active_Effects_ID[50] == 0 || Event Player.New_Care_Package == True, Global.Effect_Settings[80]);
		Abort If(Event Player.Active_Effects_ID[50] == 0);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Event Player.Active_Effects_ID[50] = 0;
		Skip If(Hero Of(Event Player) != Hero(Symmetra) || Event Player.New_Care_Package == True, 4);
		Communicate(Event Player, Goodbye);
		Wait(0.250, Ignore Condition);
		Kill(Event Player, Null);
		Wait(0.750, Ignore Condition);
		Teleport(Event Player, Event Player.Drop_Location);
		Resurrect(Event Player);
		Skip If(Event Player.New_Care_Package == True, 2);
		Start Rule(Stop_Camera, Restart Rule);
		Event Player.Drop_Location = Null;
		Skip If(Hero Of(Event Player) != Hero(Symmetra), 1);
		Call Subroutine(Load_Hero);
	}
}

rule("Package : Kiriko - Codename K-2000 Blademaster")
{
	event
	{
		Subroutine;
		Package_K2000_Blademaster;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??????? ?????? ??? ???") : Custom String(
			"Care Package K-2000"));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Start Forcing Player To Be Hero(Event Player, Hero(Kiriko));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[51]);
		Event Player.Active_Effects_ID[51] = 0;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / ((
			Global.Effect_Settings[80] + 1.500) / 100), Event Player.Hide_Effects ? Custom String("?????? ???? ?????? ???????????")
			: Custom String("Remote Unit K-2000 Blademaster"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color,
			Default Visibility);
		Event Player.Active_Effects_ID[50] = Last Text ID;
		Start Rule(Start_Camera, Restart Rule);
		Call Subroutine(Package_Inbound);
		Event Player.New_Care_Package = False;
		Wait Until(Is Dead(Event Player) || Hero Of(Event Player) != Hero(Kiriko)
			|| Event Player.Active_Effects_ID[50] == 0 || Event Player.New_Care_Package == True, Global.Effect_Settings[80]);
		Abort If(Event Player.Active_Effects_ID[50] == 0);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Event Player.Active_Effects_ID[50] = 0;
		Skip If(Hero Of(Event Player) != Hero(Kiriko) || Event Player.New_Care_Package == True, 4);
		Communicate(Event Player, Goodbye);
		Wait(0.250, Ignore Condition);
		Kill(Event Player, Null);
		Wait(0.750, Ignore Condition);
		Teleport(Event Player, Event Player.Drop_Location);
		Resurrect(Event Player);
		Skip If(Event Player.New_Care_Package == True, 2);
		Start Rule(Stop_Camera, Restart Rule);
		Event Player.Drop_Location = Null;
		Skip If(Hero Of(Event Player) != Hero(Kiriko), 1);
		Call Subroutine(Load_Hero);
	}
}

rule("Package : Pharah - Codename P-900 Warhead")
{
	event
	{
		Subroutine;
		Package_P900_Warhead;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??????? ????? ??? ???") : Custom String(
			"Care Package P-900"));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Start Forcing Player To Be Hero(Event Player, Hero(Pharah));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[51]);
		Event Player.Active_Effects_ID[51] = 0;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / ((
			Global.Effect_Settings[80] + 1.500) / 100), Event Player.Hide_Effects ? Custom String("?????? ???? ????? ???????")
			: Custom String("Remote Unit P-900 Warhead"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color,
			Default Visibility);
		Event Player.Active_Effects_ID[50] = Last Text ID;
		Start Rule(Start_Camera, Restart Rule);
		Call Subroutine(Package_Inbound);
		Event Player.New_Care_Package = False;
		Wait Until(Is Dead(Event Player) || Hero Of(Event Player) != Hero(Pharah)
			|| Event Player.Active_Effects_ID[50] == 0 || Event Player.New_Care_Package == True, Global.Effect_Settings[80]);
		Abort If(Event Player.Active_Effects_ID[50] == 0);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Event Player.Active_Effects_ID[50] = 0;
		Skip If(Hero Of(Event Player) != Hero(Pharah) || Event Player.New_Care_Package == True, 4);
		Communicate(Event Player, Goodbye);
		Wait(0.250, Ignore Condition);
		Kill(Event Player, Null);
		Wait(0.750, Ignore Condition);
		Teleport(Event Player, Event Player.Drop_Location);
		Resurrect(Event Player);
		Skip If(Event Player.New_Care_Package == True, 2);
		Start Rule(Stop_Camera, Restart Rule);
		Event Player.Drop_Location = Null;
		Skip If(Hero Of(Event Player) != Hero(Pharah), 1);
		Call Subroutine(Load_Hero);
	}
}

rule("Package : Rip-Tire")
{
	event
	{
		Subroutine;
		Package_Riptire;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??????? ???????? ??? ???") : Custom String(
			"Care Package Riptire"));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Set Status(Event Player, Null, Phased Out, 9999);
		Start Forcing Player To Be Hero(Event Player, Hero(Junkrat));
		Wait(0.100, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Event Player.Active_Effects_ID[50] = 0;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[51]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (Min(
			Global.Effect_Settings[80] + 1.500, 11.500) / 100), Event Player.Hide_Effects ? Custom String("?????? ???? ????????")
			: Custom String("Remote Unit Rip-Tire"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color,
			Default Visibility);
		Event Player.Active_Effects_ID[51] = Last Text ID;
		Start Rule(Stop_Camera, Restart Rule);
		Call Subroutine(Package_Inbound);
		Start Rule(Start_Forcing_Position, Restart Rule);
		Event Player.New_Care_Package = False;
		Wait Until(!Is Using Ultimate(Event Player) || Hero Of(Event Player) != Hero(Junkrat) || Event Player.New_Care_Package == True,
			Global.Effect_Settings[80]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[51]);
		Event Player.Active_Effects_ID[51] = 0;
		Call Subroutine(Stop_Forcing_Position);
		Teleport(Event Player, Event Player.Drop_Location);
		Skip If(Event Player.New_Care_Package == True, 1);
		Event Player.Drop_Location = Null;
		Skip If(Hero Of(Event Player) != Hero(Junkrat), 1);
		Call Subroutine(Load_Hero);
		Clear Status(Event Player, Phased Out);
	}
}

rule("Package : Tokki")
{
	event
	{
		Subroutine;
		Package_Tokki;
	}

	actions
	{
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??????? ????? ??? ???") : Custom String(
			"Care Package Tokki"));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Start Forcing Player To Be Hero(Event Player, Hero(D.Va));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[51]);
		Event Player.Active_Effects_ID[51] = 0;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / ((
			Global.Effect_Settings[80] + 1.500) / 100), Event Player.Hide_Effects ? Custom String("?????? ???? ?????") : Custom String(
			"Remote Unit Tokki"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[50] = Last Text ID;
		Start Rule(Start_Camera, Restart Rule);
		Call Subroutine(Package_Inbound);
		Event Player.New_Care_Package = False;
		Wait Until(Is In Alternate Form(Event Player) || Hero Of(Event Player) != Hero(D.Va)
			|| Event Player.Active_Effects_ID[50] == 0 || Event Player.New_Care_Package == True, Global.Effect_Settings[80]);
		Abort If(Event Player.Active_Effects_ID[50] == 0);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[50]);
		Event Player.Active_Effects_ID[50] = 0;
		Skip If(Hero Of(Event Player) != Hero(D.Va) || Event Player.New_Care_Package == True, 4);
		Communicate(Event Player, Goodbye);
		Wait(0.250, Ignore Condition);
		Kill(Event Player, Null);
		Wait(0.750, Ignore Condition);
		Teleport(Event Player, Event Player.Drop_Location);
		Resurrect(Event Player);
		Skip If(Event Player.New_Care_Package == True, 2);
		Start Rule(Stop_Camera, Restart Rule);
		Event Player.Drop_Location = Null;
		Skip If(Hero Of(Event Player) != Hero(D.Va), 1);
		Call Subroutine(Load_Hero);
	}
}

rule("Effect : Your The Bomb")
{
	event
	{
		Subroutine;
		Your_The_Bomb;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??? ???? ??? ???") : Custom String(
			"Your The Bomb For {0}s", Global.Effect_Settings[81]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[53]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[81] / 100), Event Player.Hide_Effects ? Custom String("???? ??? ????") : Custom String("Your The Bomb"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[53] = Last Text ID;
		Wait(Global.Effect_Settings[81], Ignore Condition);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[53]);
		Event Player.Active_Effects_ID[53] = 0;
	}
}

rule("Trigger : Your The Bomb")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[53] != 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(Red), Event Player, 25);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
		Wait(1, Ignore Condition);
		Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(Red), Event Player, 50);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(Red), Event Player, 75);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
		Wait(0.250, Ignore Condition);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[53]);
		Event Player.Active_Effects_ID[53] = 0;
		Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(White), Event Player, 1);
		Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(White), Event Player, 100);
		Remove From Array(Players Within Radius(Event Player, 20, All Teams, Surfaces And Enemy Barriers), Event Player)
			.Hit_By_Explosion = Array(Event Player, Position Of(Event Player), 5, 20, 1000, 100, 22.100, 0);
	}
}

rule("Trigger : Hit By Explosion")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Entity Exists(First Of(Event Player.Hit_By_Explosion)) == True;
	}

	actions
	{
		Skip If(Is Dead(Event Player), 3);
		Event Player.Hit_By_Explosion[7] = (Distance Between(Event Player, Event Player.Hit_By_Explosion[1])
			- Event Player.Hit_By_Explosion[2]) / (Event Player.Hit_By_Explosion[3] - Event Player.Hit_By_Explosion[2]);
		Damage(Event Player, First Of(Event Player.Hit_By_Explosion),
			Event Player.Hit_By_Explosion[5] * Event Player.Hit_By_Explosion[7] + (1 - Event Player.Hit_By_Explosion[7])
			* Event Player.Hit_By_Explosion[4]);
		Apply Impulse(Event Player, Direction From Angles(Horizontal Angle From Direction(Direction Towards(
			Event Player.Hit_By_Explosion[1], Position Of(Event Player))), Min(Vertical Angle From Direction(Direction Towards(
			Event Player.Hit_By_Explosion[1], Event Player)), -30)), Event Player.Hit_By_Explosion[6] * Absolute Value(
			Event Player.Hit_By_Explosion[7] - 1), To World, Cancel Contrary Motion);
		Event Player.Hit_By_Explosion = Null;
	}
}

rule("Effect : Objective Bound")
{
	event
	{
		Subroutine;
		Objective_Bound;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????????? ????? ??? ???") : Custom String(
			"Objective Bound For {0}s", Global.Effect_Settings[83]));
		Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(Position Of(Event Player)), 1);
		Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Event Player, 100);
		Event Player.Camera_Pos = Eye Position(Event Player);
		Start Camera(Event Player, Event Player.Camera_Pos, Event Player.Camera_Pos + Facing Direction Of(Event Player), 0);
		Start Forcing Player Position(Event Player, Current Game Mode == Game Mode(Push) || Current Game Mode == Game Mode(Escort) || (
			Current Game Mode == Game Mode(Hybrid) && Is Objective Complete(0)) ? Payload Position + Vector(0, 1, 0) : Objective Position(
			Objective Index), True);
		Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
		Chase Player Variable Over Time(Event Player, Camera_Pos, Eye Position(Event Player), 0.500, Destination and Duration);
		Wait(0.500, Ignore Condition);
		Start Rule(Stop_Forcing_Position, Restart Rule);
		Start Rule(Stop_Facing, Restart Rule);
		Start Rule(Stop_Camera, Restart Rule);
		Start Rule(Stop_Invisibility, Restart Rule);
		Play Effect(All Players(All Teams), Sombra Translocating Material Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(Position Of(Event Player)), 1);
		Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Event Player, 100);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[54]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[83] / 100), Event Player.Hide_Effects ? Custom String("????????? ?????") : Custom String(
			"Objective Bound"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[54] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[83]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[54]);
		Event Player.Active_Effects_ID[54] = 0;
	}
}

rule("Trigger : Objective Bound")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[54] != 0;
		(Distance Between(Event Player, Current Game Mode == Game Mode(Push) || Current Game Mode == Game Mode(Escort) || (
			Current Game Mode == Game Mode(Hybrid) && Is Objective Complete(0)) ? Payload Position : Objective Position(Objective Index))
			> (Current Game Mode == Game Mode(Push) || Current Game Mode == Game Mode(Escort) || (Current Game Mode == Game Mode(Hybrid)
			&& Is Objective Complete(0)) ? 5 : 12) || (Is On Objective(Event Player) != True && !Is Waiting For Players)) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Apply Impulse(Event Player, Direction Towards(Position Of(Event Player), Current Game Mode == Game Mode(Push)
			|| Current Game Mode == Game Mode(Escort) || (Current Game Mode == Game Mode(Hybrid) && Is Objective Complete(0))
			? Payload Position + Vector(0, 1, 0) : Objective Position(Objective Index)) + Vector(0, 0, 0), 1.500 * Distance Between(
			Event Player, Current Game Mode == Game Mode(Push) || Current Game Mode == Game Mode(Escort) || (
			Current Game Mode == Game Mode(Hybrid) && Is Objective Complete(0)) ? Payload Position + Vector(0, 1, 0) : Objective Position(
			Objective Index)), To World, Cancel Contrary Motion);
		Loop If Condition Is True;
	}
}

rule("Effect : Verp")
{
	event
	{
		Subroutine;
		Verp;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ? ??? ??? ???") : Custom String("Verp - {0}", Last Of(
			Filtered Array(Event Player.Effects_Used, Current Array Element != Custom String("Verp")))));
		Event Player.Trigger_Effect = Last Of(Filtered Array(Event Player.Effects_Used, Current Array Element != Custom String("Verp")));
	}
}

rule("Effect : Invert Movement")
{
	event
	{
		Subroutine;
		Invert_Movement;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???????? ???????? ??? ???") : Custom String(
			"Inverted Movement For {0}s", Global.Effect_Settings[84]));
		Start Rule(Start_Transforming_Throttle, Restart Rule);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[55]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[84] / 100), Event Player.Hide_Effects ? Custom String("?????? ????????") : Custom String(
			"Invert Movement"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[55] = Last Text ID;
		Wait(Global.Effect_Settings[84], Ignore Condition);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[55]);
		Event Player.Active_Effects_ID[55] = 0;
		Start Rule(Stop_Transforming_Throttle, Restart Rule);
	}
}

rule("Effect : Linked Camera")
{
	event
	{
		Subroutine;
		Linked_Camera;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??????????? ?? ???????? ??? ???") : Custom String(
			"Linked Sensitivity To Movement For {0}s", Global.Effect_Settings[85]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[56]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[85] / 100), Event Player.Hide_Effects ? Custom String("?????? ??????????? ?? ????????") : Custom String(
			"Linked Sensitivity To Movement"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[56] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[85]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[56]);
		Event Player.Active_Effects_ID[56] = 0;
	}
}

rule("Update : Linked Camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[56] != 0;
	}

	actions
	{
		While(Event Player.Active_Effects_ID[56] != 0);
			Set Aim Speed(Event Player, 100 * Speed Of(Event Player));
			Wait(0.100, Ignore Condition);
		End;
		Start Rule(Reset_Camera, Restart Rule);
	}
}

rule("Effect : Low Sensitivity")
{
	event
	{
		Subroutine;
		Low_Sensitivity;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??? ??????????? ??? ???") : Custom String(
			"Low Sensitivity For {0}s", Global.Effect_Settings[86]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[57]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[86] / 100), Event Player.Hide_Effects ? Custom String("??? ???????????") : Custom String(
			"Low Sensitivity"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[57] = Last Text ID;
		Start Rule(Modify_Camera, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[86]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[57]);
		Event Player.Active_Effects_ID[57] = 0;
		Start Rule(Reset_Camera, Restart Rule);
	}
}

rule("Effect : High Sensitivity")
{
	event
	{
		Subroutine;
		High_Sensitivity;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??????????? ??? ???") : Custom String(
			"High Sensitivity For {0}s", Global.Effect_Settings[87]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[58]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[87] / 100), Event Player.Hide_Effects ? Custom String("???? ???????????") : Custom String(
			"High Sensitivity"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[58] = Last Text ID;
		Start Rule(Modify_Camera, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[87]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[58]);
		Event Player.Active_Effects_ID[58] = 0;
		Start Rule(Reset_Camera, Restart Rule);
	}
}

rule("Effect : Random Sensitivity")
{
	event
	{
		Subroutine;
		Random_Sensitivity;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ??????????? ??? ???") : Custom String(
			"Random Sensitivity For {0}s", Global.Effect_Settings[88]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[59]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[88] / 100), Event Player.Hide_Effects ? Custom String("?????? ???????????") : Custom String(
			"Random Sensitivity"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[59] = Last Text ID;
		Start Rule(Modify_Camera, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[88]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[59]);
		Event Player.Active_Effects_ID[59] = 0;
		Start Rule(Reset_Camera, Restart Rule);
	}
}

rule("Effect : Split Personality")
{
	event
	{
		Subroutine;
		Split_Personality;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????? ?????????? ??? ???") : Custom String(
			"Split Personality For {0}s", Global.Effect_Settings[89]));
		Skip If(Event Player.Original_Hero != Null, 1);
		Call Subroutine(Save_Hero);
		Event Player.Split_Personality_Original = Append To Array(Event Player.Save_Hero, Event Player.Original_Hero);
		Event Player.Split_Personality_Save = Array(Random Real(1, 1000), Null, Null, Null, Random Real(0, 10), Random Real(0, 10),
			Random Real(0, 10), Random Real(0, 10), Random Real(0, 10), Random Real(0, 10), Random Real(0, 2), Random Real(0, 3),
			Random Real(0, 3), Random Real(0, 3), Random Real(0, 100), Random Real(0, 100), Random Real(0, 100), Random Real(0, 100),
			Random Integer(1, 2), Random Integer(0, 1000), Random Integer(0, 1000), Random Value In Array(Array(True, False)), Random Real(
			0, 100), Random Value In Array(Remove From Array(All Heroes, Last Of(Event Player.Split_Personality_Original))));
		Event Player.Save_Hero = Event Player.Split_Personality_Save;
		Event Player.Original_Hero = Last Of(Event Player.Save_Hero);
		Call Subroutine(Load_Hero);
		Event Player.Split_Personality_Toggle = True;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[60]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[89] / 100), Event Player.Hide_Effects ? Custom String("????? ??????????? ???? ?? ???????")
			: Custom String("Split Personality ({0} To Change)", Input Binding String(Button(Interact))), Left, 0, Color(Yellow), Color(
			White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[60] = Last Text ID;
		Wait(Global.Effect_Settings[89], Ignore Condition);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[60]);
		Event Player.Active_Effects_ID[60] = 0;
	}
}

rule("Trigger : Split Personality")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[60] != 0;
		((Is Dead(Event Player) || Is Button Held(Event Player, Button(Interact))) && (
			Event Player.Split_Personality_Toggle ? Event Player.Split_Personality_Original : Event Player.Split_Personality_Save)[0] > 0)
			== True;
	}

	actions
	{
		If(Event Player.Split_Personality_Toggle != True);
			Call Subroutine(Save_Hero);
			Event Player.Split_Personality_Original = Append To Array(Event Player.Save_Hero, Event Player.Original_Hero);
			Event Player.Save_Hero = Event Player.Split_Personality_Save;
			Event Player.Original_Hero = Last Of(Event Player.Save_Hero);
			Call Subroutine(Load_Hero);
			Event Player.Split_Personality_Toggle = True;
		Else;
			Call Subroutine(Save_Hero);
			Event Player.Split_Personality_Save = Append To Array(Event Player.Save_Hero, Event Player.Original_Hero);
			Event Player.Save_Hero = Event Player.Split_Personality_Original;
			Event Player.Original_Hero = Last Of(Event Player.Save_Hero);
			Call Subroutine(Load_Hero);
			Event Player.Split_Personality_Toggle = False;
		End;
		Wait(3, Ignore Condition);
	}
}

rule("Effect : Hide Effects")
{
	event
	{
		Subroutine;
		Hide_Effects;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Custom String("Hide Effects For {0}s", Global.Effect_Settings[90]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[61]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[90] / 100), Custom String("Hide Effects"), Left, 0, Color(Yellow), Color(White),
			Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[61] = Last Text ID;
		Event Player.Hide_Effects = True;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[90]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[61]);
		Event Player.Active_Effects_ID[61] = 0;
		Event Player.Hide_Effects = False;
	}
}

rule("Trigger : Replaced Spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dead(Event Player) == True;
	}

	actions
	{
		Wait Until(Is Alive(Event Player), 99999);
		Wait Until(Is In Spawn Room(Event Player), 0.250);
		Abort If(Event Player.Replaced_Spawn_With == Null || !Is In Spawn Room(Event Player));
		Teleport(Event Player, First Of(Event Player.Replaced_Spawn_With));
		Set Facing(Event Player, Last Of(Event Player.Replaced_Spawn_With), To World);
		Event Player.Replaced_Spawn_With = Null;
	}
}

rule("Effect : Realism Mode")
{
	event
	{
		Subroutine;
		Realistic;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Set Primary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("??????? ??????? ???? ??? ???") : Custom String(
			"Enabled Realism Mode For {0}s", Global.Effect_Settings[93]));
		Event Player.Realistic_Hero = Null;
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[62]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[93] / 100), Event Player.Hide_Effects ? Custom String("??????? ????") : Custom String("Realism Mode"),
			Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[62] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[93]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[62]);
		Destroy In-World Text(Event Player.Active_Effects_ID[63]);
		Destroy Progress Bar In-World Text(Event Player.Active_Effects_ID[64]);
		Destroy In-World Text(Event Player.Active_Effects_ID[65]);
		Destroy In-World Text(Event Player.Active_Effects_ID[66]);
		Destroy In-World Text(Event Player.Active_Effects_ID[67]);
		Destroy In-World Text(Event Player.Active_Effects_ID[68]);
		Event Player.Active_Effects_ID[62] = 0;
		Skip If(Event Player.Realistic_Hero == Hero(Orisa), 2);
		Set Max Ammo(Event Player, 0, Event Player.Realistic_Ammo[4]);
		Set Max Ammo(Event Player, 1, Event Player.Realistic_Ammo[5]);
		Set Primary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
	}
}

rule("Realism Mode : Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[62] != 0;
		Event Player.Realistic_Hero != (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player));
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.Realistic_Hero = Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player);
		If(Event Player.Realistic_Hero == Hero(Hanzo));
			Event Player.Realistic_Ammo = Array(Random Integer(0, 20), Player Hero Stat(Event Player, Hero(Hanzo), Shots Fired), Null, Null,
				Null, Null);
		Else If(Event Player.Realistic_Hero == Hero(D.Va));
			Event Player.Realistic_Ammo = Array(Random Integer(0, 50), Player Hero Stat(Event Player, Hero(D.Va), Shots Fired), Null, Null,
				Null, Null);
		Else;
			Event Player.Realistic_Ammo = Array(Random Integer(0, Max Ammo(Event Player, 0) * 3), Random Integer(0, Max Ammo(Event Player, 1)
				* 3), Ammo(Event Player, 0), Ammo(Event Player, 1), Max Ammo(Event Player, 0), Max Ammo(Event Player, 1));
		End;
		Destroy In-World Text(Event Player.Active_Effects_ID[63]);
		Destroy Progress Bar In-World Text(Event Player.Active_Effects_ID[64]);
		Destroy In-World Text(Event Player.Active_Effects_ID[65]);
		Destroy In-World Text(Event Player.Active_Effects_ID[66]);
		Destroy In-World Text(Event Player.Active_Effects_ID[67]);
		Destroy In-World Text(Event Player.Active_Effects_ID[68]);
		If(Event Player.Realistic_Hero == Hero(Baptiste));
			Create In-World Text(Event Player, Custom String("{0}: {1}\n{2}", Ability Icon String(Event Player.Realistic_Hero, Button(
				Primary Fire)), Round To Integer(Event Player.Realistic_Ammo[0], Up), Custom String("{0}: {1}", Ability Icon String(
				Event Player.Realistic_Hero, Button(Secondary Fire)), Round To Integer(Event Player.Realistic_Ammo[1], Up))),
				Update Every Frame(Eye Position(Event Player) + 100 * (-6 * -1 / 2 * Cross Product(Facing Direction Of(Event Player),
				Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(
				Facing Direction Of(Event Player)) - 90)) + (-2 / 2 - 0.200) * Direction From Angles(Horizontal Angle From Direction(
				Facing Direction Of(Event Player)), Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90)
				+ 3 * Facing Direction Of(Event Player))), 2, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
			Event Player.Active_Effects_ID[63] = Last Text ID;
		Else If(Is True For All(Array(Hero(Brigitte), Hero(Reinhardt), Hero(Orisa), Hero(Sigma), Hero(Tracer), Hero(Zenyatta), Hero(Moira),
				Hero(Kiriko), Hero(Lifeweaver), Hero(Ramattra)), Event Player.Realistic_Hero != Current Array Element));
			Create In-World Text(Event Player, Custom String("{0}: {1}", Ability Icon String(Event Player.Realistic_Hero, Button(
				Primary Fire)), Round To Integer(Event Player.Realistic_Ammo[0], Up)), Update Every Frame(Eye Position(Event Player) + 100 * (
				-6 * -1 / 2 * Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(
				Facing Direction Of(Event Player)), Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90)) + (-2 / 2 - 0.200)
				* Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(
				Facing Direction Of(Event Player)) - 90) + 3 * Facing Direction Of(Event Player))), 2, Do Not Clip,
				Visible To Position and String, Color(White), Default Visibility);
			Event Player.Active_Effects_ID[63] = Last Text ID;
		End;
		Event Player.Realistic_Abilitys = Is True For Any(Array(Hero(Junkrat), Hero(Symmetra), Hero(Tracer), Hero(Zarya)),
			Event Player.Realistic_Hero == Current Array Element) ? Custom String("Charge") : (Is True For Any(Array(),
			Event Player.Realistic_Hero == Current Array Element) ? Custom String("Resource") : Custom String("Cooldown"));
		Modify Player Variable(Event Player, Realistic_Abilitys, Append To Array, Is True For Any(Array(Hero(Brigitte), Hero(Reinhardt),
			Hero(Zarya)), Event Player.Realistic_Hero == Current Array Element) ? Custom String("Charge") : (Is True For Any(Array(),
			Event Player.Realistic_Hero == Current Array Element) ? Custom String("Resource") : Custom String("Cooldown")));
		Modify Player Variable(Event Player, Realistic_Abilitys, Append To Array, Is True For Any(Array(),
			Event Player.Realistic_Hero == Current Array Element) ? Custom String("Charge") : (Is True For Any(Array(Hero(D.Va)),
			Event Player.Realistic_Hero == Current Array Element) ? Custom String("Resource") : Custom String("Cooldown")));
		Modify Player Variable(Event Player, Realistic_Abilitys, Append To Array, Is True For Any(Array(Hero(Junkrat), Hero(Symmetra),
			Hero(Zarya)), Event Player.Realistic_Hero == Current Array Element) ? Custom String("Charge") : (Is True For Any(Array(Hero(
			D.Va), Hero(Echo), Hero(Reinhardt)), Event Player.Realistic_Hero == Current Array Element) ? Custom String("Resource") : (
			Is True For Any(Array(Hero(Bastion), Hero(Brigitte), Hero(Cassidy), Hero(Doomfist), Hero(Genji), Hero(Junker Queen), Hero(
			Kiriko), Hero(LÃºcio), Hero(Mercy), Hero(Moira), Hero(Ramattra), Hero(Reaper), Hero(Roadhog), Hero(Sigma), Hero(Sojourn), Hero(
			Soldier: 76), Hero(Tracer), Hero(Widowmaker), Hero(Winston), Hero(Wrecking Ball), Hero(Zenyatta)),
			Event Player.Realistic_Hero == Current Array Element) ? Custom String("None") : Custom String("Cooldown"))));
		Modify Player Variable(Event Player, Realistic_Abilitys, Append To Array, Is True For Any(Array(Hero(Brigitte), Hero(Zarya)),
			Event Player.Realistic_Hero == Current Array Element) ? Custom String("Charge") : (Is True For Any(Array(),
			Event Player.Realistic_Hero == Current Array Element) ? Custom String("Resource") : (Is True For Any(Array(Hero(Bastion), Hero(
			Doomfist), Hero(Genji), Hero(Junker Queen), Hero(LÃºcio), Hero(Mercy), Hero(Moira), Hero(Orisa), Hero(Reaper), Hero(Reinhardt),
			Hero(Sigma), Hero(Tracer), Hero(Zenyatta)), Event Player.Realistic_Hero == Current Array Element) ? Custom String("None")
			: Custom String("Cooldown"))));
		Modify Player Variable(Event Player, Realistic_Abilitys, Append To Array, Is True For Any(Array(),
			Event Player.Realistic_Hero == Current Array Element) ? Custom String("Charge") : (Is True For Any(Array(Hero(D.Va)),
			Event Player.Realistic_Hero == Current Array Element) ? Custom String("Resource") : (Is True For Any(Array(Hero(Bastion), Hero(
			Echo), Hero(Orisa), Hero(Soldier: 76)), Event Player.Realistic_Hero == Current Array Element) ? Custom String("Cooldown")
			: Custom String("None"))));
		Modify Player Variable(Event Player, Realistic_Abilitys, Append To Array, Array(Random Integer(0, 10), Random Integer(0, 10),
			Random Integer(0, 10)));
		Event Player.Realistic_Fuel = Random Integer(0, 100);
		If(Event Player.Realistic_Abilitys[3] == Custom String("Resource"));
			Create Progress Bar In-World Text(Event Player, Event Player.Realistic_Fuel, Null, Update Every Frame(Eye Position(Event Player)
				+ 100 * (0 * -1 / 2 * Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(
				Facing Direction Of(Event Player)), Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90)) + (-1 / 2 - 0.200)
				* Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(
				Facing Direction Of(Event Player)) - 90) + 3 * Facing Direction Of(Event Player))), 0.800, Do Not Clip, Color(White), Color(
				White), Visible To Position and Values, Default Visibility);
			Event Player.Active_Effects_ID[64] = Last Text ID;
			Create In-World Text(Event Player, Custom String("{0} Fuel: {1}%", Ability Icon String(Event Player.Realistic_Hero, Button(
				Ability 1)), Round To Integer(Event Player.Realistic_Fuel, Up)), Update Every Frame(Eye Position(Event Player) + 100 * (
				0 * -1 / 2 * Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(
				Facing Direction Of(Event Player)), Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90)) + (
				-0.900 / 2 - 0.200) * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)),
				Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90) + 3 * Facing Direction Of(Event Player))), 1.500,
				Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
			Event Player.Active_Effects_ID[65] = Last Text ID;
		Else If(Event Player.Realistic_Abilitys[3] != Custom String("None"));
			Create In-World Text(Event Player, Custom String("{0}: {1}", Ability Icon String(Event Player.Realistic_Hero, Button(Ability 1)),
				Round To Integer(Event Player.Realistic_Abilitys[6], Up)), Update Every Frame(Eye Position(Event Player) + 100 * (
				-6 * -1 / 2 * Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(
				Facing Direction Of(Event Player)), Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90)) + (0 / 2 - 0.200)
				* Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(
				Facing Direction Of(Event Player)) - 90) + 3 * Facing Direction Of(Event Player))), 2, Do Not Clip,
				Visible To Position and String, Color(White), Default Visibility);
			Event Player.Active_Effects_ID[66] = Last Text ID;
		End;
		Skip If(Event Player.Realistic_Abilitys[4] == Custom String("None"), 2);
		Create In-World Text(Event Player, Custom String("{0}: {1}", Ability Icon String(Event Player.Realistic_Hero, Button(Ability 2)),
			Round To Integer(Event Player.Realistic_Abilitys[7], Up)), Update Every Frame(Eye Position(Event Player) + 100 * (
			-6 * -1 / 2 * Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(
			Facing Direction Of(Event Player)), Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90)) + (
			-0.750 / 2 - 0.200) * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)),
			Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90) + 3 * Facing Direction Of(Event Player))), 2,
			Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
		Event Player.Active_Effects_ID[67] = Last Text ID;
		If(Is True For Any(Array(Hero(Bastion), Hero(Echo), Hero(Orisa), Hero(Soldier: 76)),
			Event Player.Realistic_Hero == Current Array Element));
			Create In-World Text(Event Player, Custom String("{0}: {1}", Ability Icon String(Event Player.Realistic_Hero, Button(
				Secondary Fire)), Round To Integer(Event Player.Realistic_Abilitys[8], Up)), Update Every Frame(Eye Position(Event Player)
				+ 100 * (-6 * -1 / 2 * Cross Product(Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(
				Facing Direction Of(Event Player)), Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90)) + (
				-1.500 / 2 - 0.200) * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)),
				Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90) + 3 * Facing Direction Of(Event Player))), 2,
				Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
			Event Player.Active_Effects_ID[68] = Last Text ID;
		End;
	}
}

rule("Realism Mode : Fall Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[62] != 0;
		Is In Air(Event Player) == True;
		Speed Of In Direction(Event Player, Down) > 0;
	}

	actions
	{
		While(!Is On Ground(Event Player));
			Event Player.Realistic_Fall_Damage = 0;
			Chase Player Variable At Rate(Event Player, Realistic_Fall_Damage, Max(Event Player.Realistic_Fall_Damage, Speed Of In Direction(
				Event Player, Down)), 9999, Destination and Rate);
			Wait Until(Speed Of In Direction(Event Player, Down) <= 0 || Is On Ground(Event Player), 99999);
			Chase Player Variable At Rate(Event Player, Realistic_Fall_Damage, Speed Of In Direction(Event Player, Down), 9999,
				Destination and Rate);
			Wait Until(Speed Of In Direction(Event Player, Down) > 0 || Is On Ground(Event Player), 99999);
		End;
		Stop Chasing Player Variable(Event Player, Realistic_Fall_Damage);
		Event Player.Realistic_Fall_Damage = Max((Event Player.Realistic_Fall_Damage - 8) * 15, 0);
		Abort If(Event Player.Realistic_Fall_Damage <= 0);
		Damage(Event Player, Null, Event Player.Realistic_Fall_Damage);
	}
}

rule("Realism Mode : Ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[62] != 0;
		(Event Player.Realistic_Ammo[2] != Ammo(Event Player, 0) || Event Player.Realistic_Ammo[3] != Ammo(Event Player, 1)) == True;
		Is True For All(Array(Hero(Brigitte), Hero(Hanzo), Hero(Orisa), Hero(Reinhardt), Hero(Tracer), Hero(Zenyatta), Hero(Moira), Hero(
			Kiriko), Hero(Lifeweaver), Hero(Ramattra)), Event Player.Realistic_Hero != Current Array Element) == True;
		(Hero Of(Event Player) != Hero(D.Va) || Is In Alternate Form(Event Player)) == True;
	}

	actions
	{
		If(Event Player.Realistic_Ammo[2] < Ammo(Event Player, 0));
			Set Ammo(Event Player, 0, Min(Ammo(Event Player, 0), Event Player.Realistic_Ammo[0] + Event Player.Realistic_Ammo[2]));
			Event Player.Realistic_Ammo[0] -= Ammo(Event Player, 0) - Event Player.Realistic_Ammo[2];
		End;
		If(Event Player.Realistic_Ammo[3] < Ammo(Event Player, 1));
			Set Ammo(Event Player, 1, Min(Ammo(Event Player, 1), Event Player.Realistic_Ammo[1] + Event Player.Realistic_Ammo[3]));
			Event Player.Realistic_Ammo[1] -= Ammo(Event Player, 1) - Event Player.Realistic_Ammo[3];
		End;
		Event Player.Realistic_Ammo[2] = Ammo(Event Player, 0);
		Event Player.Realistic_Ammo[3] = Ammo(Event Player, 1);
		Skip If(Event Player.Realistic_Ammo[0] > 0, 1);
		Set Max Ammo(Event Player, 0, Ammo(Event Player, 0));
		Skip If(Event Player.Realistic_Ammo[1] > 0, 1);
		Set Max Ammo(Event Player, 1, Ammo(Event Player, 1));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Realism Mode : Ammo (Hanzo)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[62] != 0;
		Event Player.Realistic_Hero == Hero(Hanzo);
		Player Hero Stat(Event Player, Hero(Hanzo), Shots Fired) != Event Player.Realistic_Ammo[1];
	}

	actions
	{
		Event Player.Realistic_Ammo[1] = Player Hero Stat(Event Player, Hero(Hanzo), Shots Fired);
		Event Player.Realistic_Ammo[0] -= 1;
		If(Event Player.Realistic_Ammo[0] == 0);
			Set Primary Fire Enabled(Event Player, False);
		Else;
			Set Primary Fire Enabled(Event Player, True);
		End;
	}
}

rule("Realism Mode : Ammo (D.Va)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[62] != 0;
		Event Player.Realistic_Hero == Hero(D.Va);
		Player Hero Stat(Event Player, Hero(D.Va), Shots Fired) != Event Player.Realistic_Ammo[1];
		Is In Alternate Form(Event Player) != True;
	}

	actions
	{
		Event Player.Realistic_Ammo[1] = Player Hero Stat(Event Player, Hero(D.Va), Shots Fired);
		Event Player.Realistic_Ammo[0] -= Min(4, Event Player.Realistic_Ammo[0]);
		If(Event Player.Realistic_Ammo[0] == 0);
			Set Primary Fire Enabled(Event Player, False);
		Else;
			Set Primary Fire Enabled(Event Player, True);
		End;
	}
}

rule("Realism Mode : Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[62] != 0;
		(Event Player.Realistic_Abilitys[0] == Custom String("Charge") ? Ability Charge(Event Player, Button(Ability 1))
			< 1 : Ability Cooldown(Event Player, Button(Ability 1)) != Null) == True;
		(Event Player.Realistic_Abilitys[3] != Custom String("Resource")) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		If(Event Player.Realistic_Abilitys[3] == Custom String("None"));
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
			Set Ability Charge(Event Player, Button(Ability 1), 1);
		Else;
			Skip If(Event Player.Realistic_Abilitys[6] == 0, 2);
			Event Player.Realistic_Abilitys[6] -= 1;
			Skip(1);
			Set Ability 1 Enabled(Event Player, False);
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
			Set Ability Charge(Event Player, Button(Ability 1), 1);
		End;
	}
}

rule("Realism Mode : Ability 1 (Resource)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[62] != 0;
		Is Using Ability 1(Event Player) == True;
		(Event Player.Realistic_Abilitys[3] == Custom String("Resource")) == True;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, Realistic_Fuel, 0, 6.500, Destination and Rate);
		Wait Until(Event Player.Realistic_Fuel == 0 || !Is Using Ability 1(Event Player), 99999);
		Stop Chasing Player Variable(Event Player, Realistic_Fuel);
		Skip If(!Is Using Ability 1(Event Player), 2);
		Set Ability 1 Enabled(Event Player, False);
		Cancel Primary Action(Event Player);
		Wait Until(Ability Cooldown(Event Player, Button(Ability 1)) != Null, 5);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
	}
}

rule("Realism Mode : Ability 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[62] != 0;
		(Event Player.Realistic_Abilitys[1] == Custom String("Charge") ? Ability Charge(Event Player, Button(Ability 2))
			< 1 : Ability Cooldown(Event Player, Button(Ability 2)) != Null) == True;
		(Event Player.Realistic_Abilitys[4] != Custom String("Resource")) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		If(Event Player.Realistic_Abilitys[4] == Custom String("None"));
			Set Ability Cooldown(Event Player, Button(Ability 2), 0);
			Set Ability Charge(Event Player, Button(Ability 2), 1);
		Else;
			Skip If(Event Player.Realistic_Abilitys[7] == 0, 2);
			Event Player.Realistic_Abilitys[7] -= 1;
			Skip(1);
			Set Ability 2 Enabled(Event Player, False);
			Set Ability Cooldown(Event Player, Button(Ability 2), 0);
			Set Ability Charge(Event Player, Button(Ability 2), 1);
		End;
	}
}

rule("Realism Mode : Secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[62] != 0;
		(Event Player.Realistic_Abilitys[2] == Custom String("Charge") ? Ability Charge(Event Player, Button(Secondary Fire))
			< 1 : Ability Cooldown(Event Player, Button(Secondary Fire)) != Null) == True;
		(Event Player.Realistic_Abilitys[5] != Custom String("Resource")) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		If(Event Player.Realistic_Abilitys[5] == Custom String("None"));
			Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
			Set Ability Charge(Event Player, Button(Secondary Fire), 1);
		Else;
			Skip If(Event Player.Realistic_Abilitys[8] == 0, 2);
			Event Player.Realistic_Abilitys[8] -= 1;
			Skip(3);
			Set Secondary Fire Enabled(Event Player, False);
			Skip If(Event Player.Realistic_Hero != Hero(Orisa), 1);
			Set Ability 2 Enabled(Event Player, False);
			Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
			Set Ability Charge(Event Player, Button(Secondary Fire), 1);
		End;
	}
}

rule("Effect : Attach")
{
	event
	{
		Subroutine;
		Attach;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Event Player.Attach = Random Value In Array(Remove From Array(Filtered Array(All Living Players(All Teams), Has Spawned(
			Current Array Element)), Event Player));
		If(!Entity Exists(Event Player.Attach));
			Start Rule(Trigger_Random_Effect, Restart Rule);
			Abort;
		End;
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ?????? ?????? ??? ???") : Custom String(
			"Ride Random Player For {0}s", Global.Effect_Settings[94]));
		Set Status(Event Player, Null, Rooted, 9999);
		Attach Players(Event Player, Event Player.Attach, Vector(0, Distance Between(Eye Position(Event Player.Attach), Position Of(
			Event Player.Attach)) + 0.100, 0));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[69]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[94] / 100), Event Player.Hide_Effects ? Custom String("???? ?????? ??????") : Custom String(
			"Ride Random Player"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[69] = Last Text ID;
		Wait Until(Is Dead(Event Player) || Is Dead(Event Player.Attach), Global.Effect_Settings[94]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[69]);
		Event Player.Active_Effects_ID[69] = 0;
		Detach Players(Event Player);
		Clear Status(Event Player, Rooted);
	}
}

rule("Effect : Random Healthpool")
{
	event
	{
		Subroutine;
		Random_Healthpool;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("?????? ?????????? ??? ???") : Custom String(
			"Random Healthpool For {0}s", Global.Effect_Settings[95]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[70]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[95] / 100), Event Player.Hide_Effects ? Custom String("?????? ??????????") : Custom String(
			"Random Healthpool"), Left, 0, Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[70] = Last Text ID;
		Set Status(Event Player, Null, Unkillable, 0.100);
		If(Event Player.Stored_HP == 0);
			Event Player.Stored_HP = Health(Event Player);
		Else;
			Remove Health Pool From Player(Event Player.Random_Healthpools_ID[0]);
			Remove Health Pool From Player(Event Player.Random_Healthpools_ID[1]);
			Remove Health Pool From Player(Event Player.Random_Healthpools_ID[2]);
		End;
		Set Max Health(Event Player, 1);
		Event Player.Randomise = Random Integer(0, 3);
		If(Event Player.Randomise != 0);
			Event Player.Randomise = Random Integer(1, 600 - Max Health(Event Player));
			Add Health Pool To Player(Event Player, Health, Event Player.Randomise - Max Health Of Type(Event Player, Health), True, False);
			Event Player.Random_Healthpools_ID[0] = Last Created Health Pool;
		End;
		Event Player.Randomise = Random Integer(0, 2);
		If(Event Player.Randomise != 0);
			Event Player.Randomise = Random Integer(1, 250 - Max Health(Event Player));
			Add Health Pool To Player(Event Player, Armor, Event Player.Randomise - Max Health Of Type(Event Player, Armor), True, False);
			Event Player.Random_Healthpools_ID[1] = Last Created Health Pool;
		End;
		Event Player.Randomise = Random Integer(0, 1);
		If(Event Player.Randomise != 0);
			Event Player.Randomise = Random Integer(1, 250 - Max Health(Event Player));
			Add Health Pool To Player(Event Player, Shields, Event Player.Randomise - Health Of Type(Event Player, Shields), True, False);
			Event Player.Random_Healthpools_ID[2] = Last Created Health Pool;
		End;
		Set Player Health(Event Player, Max Health(Event Player));
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[95]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[70]);
		Event Player.Active_Effects_ID[70] = 0;
		Set Status(Event Player, Null, Unkillable, 0.100);
		Remove Health Pool From Player(Event Player.Random_Healthpools_ID[0]);
		Remove Health Pool From Player(Event Player.Random_Healthpools_ID[1]);
		Remove Health Pool From Player(Event Player.Random_Healthpools_ID[2]);
		Set Max Health(Event Player, 100);
		Wait(0.100, Ignore Condition);
		Set Player Health(Event Player, Event Player.Stored_HP);
		Event Player.Stored_HP = 0;
	}
}

rule("Effect : Drunk")
{
	event
	{
		Subroutine;
		Drunk;
	}

	actions
	{
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("????? ??? ???") : Custom String("Drunk For {0}s",
			Global.Effect_Settings[96]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[71]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[96] / 100), Event Player.Hide_Effects ? Custom String("?????") : Custom String("Drunk"), Left, 0, Color(
			Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[71] = Last Text ID;
		Chase Player Variable At Rate(Event Player, Drunk_Effect_Movement, Total Time Elapsed * 120 % 180 - 90, 120, Destination and Rate);
		Start Rule(Start_Transforming_Throttle, Restart Rule);
		Start Rule(Start_Throttle, Restart Rule);
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[96]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[71]);
		Event Player.Active_Effects_ID[71] = 0;
		Start Rule(Stop_Transforming_Throttle, Restart Rule);
		Start Rule(Stop_Throttle, Restart Rule);
	}
}

rule("Effect : Stun Gun")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Trigger_StunGun == True;
	}

	actions
	{
		Event Player.Trigger_StunGun = False;
		Abort If(Is Dead(Event Player) || !Has Spawned(Event Player));
		Small Message(Event Player, Event Player.Hide_Effects ? Custom String("???? ??? ??? ???") : Custom String("Stun Gun For {1}s",
			Null, Global.Effect_Settings[68]));
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[72]);
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / (
			Global.Effect_Settings[97] / 100), Event Player.Hide_Effects ? Custom String("???? ???") : Custom String("Stun Gun"), Left, 0,
			Color(Yellow), Color(White), Visible To Values and Color, Default Visibility);
		Event Player.Active_Effects_ID[72] = Last Text ID;
		Wait Until(Is Dead(Event Player), Global.Effect_Settings[97]);
		Destroy Progress Bar HUD Text(Event Player.Active_Effects_ID[72]);
		Event Player.Active_Effects_ID[72] = 0;
	}
}

rule("Trigger: Stun Gun")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Active_Effects_ID[72] != 0;
	}

	actions
	{
		Set Status(Victim, Attacker, Stunned, 0.500);
	}
}

rule("Randomise Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Random Value In Array(All Heroes));
		Stop Forcing Player To Be Hero(Event Player);
		Wait(1, Ignore Condition);
	}
}

rule("Respawn Bind")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) != True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Wait(5, Abort When False);
		Respawn(Event Player);
		Wait(1, Ignore Condition);
	}
}
