settings
{
	main
	{
		Description: "Currently In Testing! (aka beta)\n\nYou Have Level's And XP, Every Level You Gain\nA Point, You Can Press Interact To Open A Shop\nMenu To Buy Basic Upgrades Using The Points\n\nThe Modes Are Flashpoint And Control This Is\nTo Try And Get Longer Match's For More\nLevels And Stats Per Match.\n\nHowever If You So Choose You Can Enable Any\nOther Mode As Its Compatible With Any Mode\n\n12/38 Hero's Have Their Own Upgrade"
		Mode Name: "Attributes - WCCEH"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Match Voice Chat: Enabled
	}

	modes
	{
		disabled Capture the Flag
		{
			Flag Dropped Lock Time: 5.0
			Flag Return Time: 4.0
			Flag Score Respawn Time: 15.0
		}

		Control

		disabled Deathmatch
		{
			Game Length In Minutes: 5
		}

		Flashpoint

		General
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}
	}

	heroes
	{
		General
		{
			Ultimate Generation: 10%
			Ultimate Generation - Combat: 0%
			Ultimate Generation - Passive: 0%

			Ana
			{
				Ultimate Generation - Combat Nano Boost: 0%
				Ultimate Generation - Passive Nano Boost: 0%
				Ultimate Generation Nano Boost: 10%
			}

			Ashe
			{
				Ultimate Generation - Combat B.O.B.: 0%
				Ultimate Generation - Passive B.O.B.: 0%
				Ultimate Generation B.O.B.: 10%
			}

			Baptiste
			{
				Ultimate Generation - Combat Amplification Matrix: 0%
				Ultimate Generation - Passive Amplification Matrix: 0%
				Ultimate Generation Amplification Matrix: 10%
			}

			Bastion
			{
				Ultimate Generation - Combat Configuration: Artillery: 0%
				Ultimate Generation - Passive Configuration: Artillery: 0%
				Ultimate Generation Configuration: Artillery: 10%
			}

			Brigitte
			{
				Ultimate Generation - Combat Rally: 0%
				Ultimate Generation - Passive Rally: 0%
				Ultimate Generation Rally: 10%
			}

			Cassidy
			{
				Ultimate Generation - Combat Deadeye: 0%
				Ultimate Generation - Passive Deadeye: 0%
				Ultimate Generation Deadeye: 10%
			}

			D.Va
			{
				Ultimate Generation - Combat Self-Destruct: 0%
				Ultimate Generation - Passive Self-Destruct: 0%
				Ultimate Generation Self-Destruct: 10%
			}

			Doomfist
			{
				Ultimate Generation - Combat Meteor Strike: 0%
				Ultimate Generation - Passive Meteor Strike: 0%
				Ultimate Generation Meteor Strike: 10%
			}

			Echo
			{
				Ultimate Generation - Combat Duplicate: 0%
				Ultimate Generation - Passive Duplicate: 0%
				Ultimate Generation Duplicate: 10%
			}

			Genji
			{
				Ultimate Generation - Combat Dragonblade: 0%
				Ultimate Generation - Passive Dragonblade: 0%
				Ultimate Generation Dragonblade: 10%
			}

			Hanzo
			{
				Ultimate Generation - Combat Dragonstrike: 0%
				Ultimate Generation - Passive Dragonstrike: 0%
				Ultimate Generation Dragonstrike: 10%
			}

			Illari
			{
				Ultimate Generation - Combat Captive Sun: 0%
				Ultimate Generation - Passive Captive Sun: 0%
				Ultimate Generation Captive Sun: 10%
			}

			Junker Queen
			{
				Ultimate Generation - Combat Rampage: 0%
				Ultimate Generation - Passive Rampage: 0%
				Ultimate Generation Rampage: 10%
			}

			Junkrat
			{
				Ultimate Generation - Combat RIP-Tire: 0%
				Ultimate Generation - Passive RIP-Tire: 0%
				Ultimate Generation RIP-Tire: 10%
			}

			Kiriko
			{
				Ultimate Generation - Combat Kitsune Rush: 0%
				Ultimate Generation - Passive Kitsune Rush: 0%
				Ultimate Generation Kitsune Rush: 10%
			}

			Lifeweaver
			{
				Ultimate Generation - Combat Tree of Life: 0%
				Ultimate Generation - Passive Tree of Life: 0%
				Ultimate Generation Tree of Life: 10%
			}

			Lúcio
			{
				Ultimate Generation - Combat Sound Barrier: 0%
				Ultimate Generation - Passive Sound Barrier: 0%
				Ultimate Generation Sound Barrier: 10%
			}

			Mei
			{
				Ultimate Generation - Combat Blizzard: 0%
				Ultimate Generation - Passive Blizzard: 0%
				Ultimate Generation Blizzard: 10%
			}

			Mercy
			{
				Ultimate Generation - Combat Valkyrie: 0%
				Ultimate Generation - Passive Valkyrie: 0%
				Ultimate Generation Valkyrie: 10%
			}

			Moira
			{
				Ultimate Generation - Combat Coalescence: 0%
				Ultimate Generation - Passive Coalescence: 0%
				Ultimate Generation Coalescence: 10%
			}

			Orisa
			{
				Ultimate Generation - Combat Terra Surge: 0%
				Ultimate Generation - Passive Terra Surge: 0%
				Ultimate Generation Terra Surge: 10%
			}

			Pharah
			{
				Ultimate Generation - Combat Barrage: 0%
				Ultimate Generation - Passive Barrage: 0%
				Ultimate Generation Barrage: 10%
			}

			Ramattra
			{
				Ultimate Generation - Combat Annihilation: 0%
				Ultimate Generation - Passive Annihilation: 0%
				Ultimate Generation Annihilation: 10%
			}

			Reaper
			{
				Ultimate Generation - Combat Death Blossom: 0%
				Ultimate Generation - Passive Death Blossom: 0%
				Ultimate Generation Death Blossom: 10%
			}

			Reinhardt
			{
				Ultimate Generation - Combat Earthshatter: 0%
				Ultimate Generation - Passive Earthshatter: 0%
				Ultimate Generation Earthshatter: 10%
			}

			Roadhog
			{
				Ultimate Generation - Combat Whole Hog: 0%
				Ultimate Generation - Passive Whole Hog: 0%
				Ultimate Generation Whole Hog: 10%
			}

			Sigma
			{
				Ultimate Generation - Combat Gravitic Flux: 0%
				Ultimate Generation - Passive Gravitic Flux: 0%
				Ultimate Generation Gravitic Flux: 10%
			}

			Sojourn
			{
				Ultimate Generation - Combat Overclock: 0%
				Ultimate Generation - Passive Overclock: 0%
				Ultimate Generation Overclock: 10%
			}

			Soldier: 76
			{
				Ultimate Generation - Combat Tactical Visor: 0%
				Ultimate Generation - Passive Tactical Visor: 0%
				Ultimate Generation Tactical Visor: 10%
			}

			Sombra
			{
				Ultimate Generation - Combat EMP: 0%
				Ultimate Generation - Passive EMP: 0%
				Ultimate Generation EMP: 10%
			}

			Symmetra
			{
				Ultimate Generation - Combat Photon Barrier: 0%
				Ultimate Generation - Passive Photon Barrier: 0%
				Ultimate Generation Photon Barrier: 10%
			}

			Torbjörn
			{
				Ultimate Generation - Combat Molten Core: 0%
				Ultimate Generation - Passive Molten Core: 0%
				Ultimate Generation Molten Core: 10%
			}

			Tracer
			{
				Ultimate Generation - Combat Pulse Bomb: 0%
				Ultimate Generation - Passive Pulse Bomb: 0%
				Ultimate Generation Pulse Bomb: 10%
			}

			Widowmaker
			{
				Ultimate Generation - Combat Infra-Sight: 0%
				Ultimate Generation - Passive Infra-Sight: 0%
				Ultimate Generation Infra-Sight: 10%
			}

			Winston
			{
				Ultimate Generation - Combat Primal Rage: 0%
				Ultimate Generation - Passive Primal Rage: 0%
				Ultimate Generation Primal Rage: 10%
			}

			Wrecking Ball
			{
				Ultimate Generation - Combat Minefield: 0%
				Ultimate Generation - Passive Minefield: 0%
				Ultimate Generation Minefield: 10%
			}

			Zarya
			{
				Ultimate Generation - Combat Graviton Surge: 0%
				Ultimate Generation - Passive Graviton Surge: 0%
				Ultimate Generation Graviton Surge: 10%
			}

			Zenyatta
			{
				Ultimate Generation - Combat Transcendence: 0%
				Ultimate Generation - Passive Transcendence: 0%
				Ultimate Generation Transcendence: 10%
			}
		}
	}

	workshop
	{
		Force Skirmish: On
		Requirement Per Level Curve: 1.200
		Starting Attribute Points: 3
		Starting Hero Points: 1
	}

	extensions
	{
		Buff Status Effects
		Energy Explosion Effects
		Explosion Sounds
	}
}

variables
{
	global:
		0: Click_Area
		1: Click_Area_Size
		2: Click_Area_Color
		3: Click_Area_Hover_Color
		4: Click_Area_Page
		5: Click_Area_Text
		6: Click_Area_Text_Size
		7: Click_Area_ID
		8: Mouse_MaxX
		9: Mouse_MinX
		10: Mouse_MaxY
		11: Mouse_MinY
		12: Default_Sensitivity_Aim
		13: Default_Sensitivity_Throttle
		14: Points_Per_Level
		15: All_Heros
		16: Ultimate_Costs

	player:
		0: Attribute_Points
		1: Attribute_Stats
		2: Level
		3: Tracked_Stats
		4: Start_Regen
		5: Is_Bot
		6: Points_Earned
		7: HP_Cap
		8: Shop_Text_ID_Array
		9: Text_ID_Index
		10: Hero_Points
		11: Temp_Page
		12: Has_Hero_Upgrade_Array
		13: Recall_Stats
		14: Recall_Index
		15: Recall_End_HP
		16: Death_Was_Enviomental
		17: Recall_Cooldown
		18: Is_Hacked
		19: Counter
		20: Is_Bleeding
		21: Bleed_DOT_ID
		22: Cross_Fade_Stats
		23: Dupe_Stats
		24: Stored_Attributes
		25: Stored_Hero_Upgrades
		26: Stored_HP_Cap
		112: Stored_Health
		113: Stored_Self_Healing_Stat
		114: Valid_Healing
		115: Stored_Mech_Points
		116: Ultimate_Points
		117: Ultimate_Cost
		118: Stored_Hero
		119: Index
		120: Clicked_Area
		121: Page
		122: Init_Direction
		123: Mouse_Y
		124: Mouse_X
		125: Sensitivity
		126: Mouse_Input
		127: Enable_Menu
}

subroutines
{
	0: Disable_Bindings
	1: Enable_Bindings
	2: Setup_Click_Areas
	3: Detect_Click
	4: Destroy_Shop_Text
	5: Dupe_Team
	6: Dupe_Attributes
}

rule("Detect Blizz Bot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Append To Array(All Heroes, Array(Custom String("Damage"), Custom String("Support"), Custom String("Tank"))),
			String Contains(Custom String("{0}", Event Player), Current Array Element)) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.Is_Bot = Hero Of(Event Player);
		Start Forcing Player To Be Hero(Event Player, Random Value In Array(Remove From Array(All Heroes, Event Player.Is_Bot)));
		If(Hero Of(Event Player) == Event Player.Is_Bot);
			Event Player.Is_Bot = True;
			Stop Forcing Player To Be Hero(Event Player);
		Else;
			Start Forcing Player To Be Hero(Event Player, Event Player.Is_Bot);
			Stop Forcing Player To Be Hero(Event Player);
			Event Player.Is_Bot = False;
		End;
	}
}

rule("Skirmish Mode")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Workshop Setting Toggle(Custom String("Mode"), Custom String("Force Skirmish"), False, 0) == True;
	}

	actions
	{
		Wait Until(Is Assembling Heroes, 99999);
		Set Match Time(0);
		Wait Until(Is In Setup, 99999);
		Set Match Time(0);
		Wait Until(Is Game In Progress, 99999);
		Pause Match Time;
		Disable Built-In Game Mode Completion;
	}
}

rule("Setup Player")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		"0: health, 1: armor, 2: shield, 3: damage dealt, 4: healing dealt, 5: Regeneration, 6: Speed, 7: Faster Respawn, 8: Faster Cooldown, 9: Lifesteal"
		Event Player.Attribute_Stats = Array(Null, Null, Null, Null, Null, Null, Null, Null, Null, Null);
		"0: Damage Dealt, 1: Damage Blocked, 2: Damage Taken, 3: Deaths, 4: Kills, 5: Healing Dealt"
		Event Player.Tracked_Stats = Array(Player Stat(Event Player, All Damage Dealt), Player Stat(Event Player, Damage Blocked),
			Player Stat(Event Player, Damage Taken), Player Stat(Event Player, Deaths), Player Stat(Event Player, Eliminations),
			Player Stat(Event Player, Healing Dealt));
		Event Player.Attribute_Points = Workshop Setting Integer(Custom String("Points"), Custom String("Starting Attribute Points"), 5, 0,
			10, 0);
		Event Player.Points_Earned = Event Player.Attribute_Points;
		Event Player.Level = Array(1, Workshop Setting Integer(Custom String("XP"), Custom String("Starting Reqiurement"), 250, 1, 1000,
			0), 0);
		Create Progress Bar HUD Text(Filtered Array(Event Player, !Event Player.Dupe_Stats[6] && !Is Duplicating(Event Player)
			&& !Event Player.Enable_Menu), Event Player.Level[2] / Event Player.Level[1] * 100, Custom String("{1}/{2} Level: {0}",
			Event Player.Level[0], Round To Integer(Event Player.Level[2], Down), Round To Integer(Event Player.Level[1], Up)), Right, -1,
			Color(Yellow), Color(Orange), Visible To Values and Color, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, (Event Player.Attribute_Points || Event Player.Hero_Points)
			> 0 && !Event Player.Dupe_Stats[6] && !Is Duplicating(Event Player) && !Event Player.Enable_Menu), Null, Null, Custom String(
			"{0}{1}", Event Player.Attribute_Points > 0 ? Custom String("{0}! Attribute Point(s) To Spend\n",
			Event Player.Attribute_Points) : Custom String(""), Event Player.Hero_Points > 0 ? Custom String("{0}! Hero Point(s) To Spend",
			Event Player.Hero_Points) : Custom String("")), Right, 0, Color(White), Color(White), Total Time Elapsed % 1 <= 0.500 ? Color(
			Yellow) : Color(Orange), Visible To String and Color, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, !Event Player.Enable_Menu), Null, Null, Custom String("Faster Cooldowns {0}% / 80%",
			Event Player.Attribute_Stats[8]), Left, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, !Event Player.Enable_Menu), Null, Null, Custom String(
			"Movement Speed {0}%\nFaster Respawn {1}s / 5s\nLifesteal {2}% / 100%", Event Player.Attribute_Stats[6],
			0.100 * Event Player.Attribute_Stats[7], Event Player.Attribute_Stats[9]), Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, !Event Player.Enable_Menu), Null, Null, Custom String(
			"Damage Dealt {0}%\nHealing Dealt {1}%\nRegeneration {2}/s", Event Player.Attribute_Stats[3], Event Player.Attribute_Stats[4],
			Event Player.Attribute_Stats[5]), Left, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, !Event Player.Enable_Menu), Null, Null, Custom String(
			"Health {0}\nArmor {1}\nShield {2}", Custom String("{0}: {1}/5", Event Player.Attribute_Stats[0], Event Player.HP_Cap),
			Custom String("{0}: {1}/5", Event Player.Attribute_Stats[1], Event Player.HP_Cap), Custom String("{0}: {1}/5",
			Event Player.Attribute_Stats[2], Event Player.HP_Cap)), Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.Has_Hero_Upgrade_Array = Array(False, False, False, False, False, False, False, False, False, False, False, False,
			False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False,
			False, False, False, False, False, False, False, False);
		Create HUD Text(Filtered Array(Event Player, (Event Player.Attribute_Points || Event Player.Hero_Points)
			> 0 && Event Player.Enable_Menu), Null, Null, Custom String("{0}{1}", Event Player.Attribute_Points > 0 ? Custom String(
			"{0}! Attribute Point(s) To Spend\n", Event Player.Attribute_Points) : Custom String(""),
			Event Player.Hero_Points > 0 ? Custom String("{0}! Hero Point(s) To Spend", Event Player.Hero_Points) : Custom String("")),
			Top, 0, Color(White), Color(White), Total Time Elapsed % 1 <= 0.500 ? Color(Yellow) : Color(Orange),
			Visible To String and Color, Default Visibility);
		Event Player.Recall_Stats = Empty Array;
		Event Player.Hero_Points = Workshop Setting Integer(Custom String("Points"), Custom String("Starting Hero Points"), 0, 0, 1, 0);
		Chase Player Variable At Rate(Event Player, Recall_Cooldown, 0, 1, Destination and Rate);
		Chase Player Variable At Rate(Event Player, Is_Bleeding, 0, 1, Destination and Rate);
		Event Player.Cross_Fade_Stats = Array(Custom String("Healing"), True);
	}
}

rule("Level Up")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Level[2] >= Event Player.Level[1];
	}

	actions
	{
		Event Player.Level[0] += 1;
		Event Player.Level[2] -= Event Player.Level[1];
		Event Player.Level[1] *= Workshop Setting Real(Custom String("XP"), Custom String("Requirement Per Level Curve"), 1.150, 1, 10, 0);
		Modify Player Variable At Index(Event Player, Level, 1, Min, Workshop Setting Integer(Custom String("XP"), Custom String(
			"Level Requirement Cap"), 2000, 1, 5000, 0));
		Skip If(Round To Integer(Event Player.Level[0] / 10, To Nearest) != Event Player.Level[0] / 10, 1);
		Event Player.Hero_Points += 1;
		Event Player.Attribute_Points += Global.Points_Per_Level;
		Event Player.Points_Earned += Global.Points_Per_Level;
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 100);
		Play Effect(Event Player, Ring Explosion, Color(Yellow), Position Of(Event Player), 8);
		Play Effect(Event Player, Good Pickup Effect, Color(Yellow), Event Player, 3);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bot Level Random Skill")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Attribute_Points > 0;
		Event Player.Is_Bot == True;
	}

	actions
	{
		Event Player.Clicked_Area = Random Value In Array(Array(Custom String("+Health"), Custom String("+Armor"), Custom String(
			"+Shield"), Custom String("+Damage Dealt"), Custom String("+Healing Dealt"), Custom String("+Regeneration"), Custom String(
			"+Speed"), Custom String("+Respawn"), Custom String("+Cooldowns"), Custom String("+Lifesteal")));
		Start Rule(Detect_Click, Restart Rule);
		Wait Until(Event Player.Attribute_Points < Evaluate Once(Event Player.Attribute_Points), 1);
		Loop If Condition Is True;
	}
}

rule("Bot Buy Hero Upgrade")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Hero_Points > 0;
		Event Player.Is_Bot == True;
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero Of(Event Player))] != True;
		Is True For Any(Global.Click_Area_Page, Current Array Element == Custom String("{0}", Hero Of(Event Player))) == True;
	}

	actions
	{
		Event Player.Clicked_Area = Custom String("{0}", Hero Of(Event Player));
		Start Rule(Detect_Click, Restart Rule);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Gain XP - Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Stat(Event Player, All Damage Dealt) != Event Player.Tracked_Stats[0];
	}

	actions
	{
		Event Player.Level[2] += Player Stat(Event Player, All Damage Dealt) - Event Player.Tracked_Stats[0];
		Event Player.Tracked_Stats[0] = Player Stat(Event Player, All Damage Dealt);
	}
}

rule("Gain XP - Healing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Stat(Event Player, Healing Dealt) != Event Player.Tracked_Stats[5];
	}

	actions
	{
		Event Player.Level[2] += Player Stat(Event Player, Healing Dealt) - Event Player.Tracked_Stats[5];
		Event Player.Tracked_Stats[5] = Player Stat(Event Player, Healing Dealt);
	}
}

rule("Gain XP - Blocked")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Stat(Event Player, Damage Blocked) != Event Player.Tracked_Stats[1];
	}

	actions
	{
		Event Player.Level[2] += Player Stat(Event Player, Damage Blocked) - Event Player.Tracked_Stats[1];
		Event Player.Tracked_Stats[1] = Player Stat(Event Player, Damage Blocked);
	}
}

disabled rule("-------------------------------------------- In-Game Menu ----------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Click Area Values")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Click_Area = Array(Vector(5.500, 0, 3.500), Vector(-7, 0, 4.100), Vector(2, 0, 1), Vector(2, 0, -1), Vector(-2, 0, -1),
			Vector(-2, 0, 1), Vector(5.500, 0, 2.500), Vector(5.500, 0, 1.500), Vector(5.500, 0, 0.500), Vector(5.500, 0, -0.500), Vector(
			5.500, 0, -1.500), Vector(5.500, 0, -2.500), Vector(2.500, 0, 2.500), Vector(2.500, 0, 1.500), Vector(2.500, 0, 0.500), Vector(
			2.500, 0, -0.500), Vector(-6, 0, -2.500), Vector(2.500, 0, 3.500), Vector(0, 0, 0), Vector(0, 0, 0), Vector(0, 0, 0), Vector(0,
			0, 0), Vector(0, 0, 0), Vector(0, 0, 0), Vector(0, 0, 0), Vector(0, 0, 0), Vector(0, 0, 0), Vector(0, 0, 0), Vector(0, 0, 0),
			Vector(0, 0, 0));
		Global.Click_Area_Size = Array(0.500, 0.300, 1, 1, 1, 1, 0.600, 0.600, 0.600, 0.600, 0.600, 0.600, 0.600, 0.600, 0.600, 0.600, 1,
			1, 1, 2.500, 2, 1.500, 1, 1.500, 1, 1.500, 3.500, 1, 2.500, 1.500);
		Global.Click_Area_Color = Array(Color(White), Color(Red), Color(White), Color(White), Color(White), Color(White), Color(White),
			Color(White), Color(White), Color(White), Color(White), Color(White), Color(White), Color(White), Color(White), Color(White),
			Color(Red), Color(White), Color(White), Color(White), Color(White), Color(White), Color(White), Color(White), Color(White),
			Color(White), Color(White), Color(White), Color(White), Color(White));
		Global.Click_Area_Hover_Color = Array(Color(Lime Green), Color(Rose), Color(Blue), Color(Blue), Color(Green), Color(Red), Color(
			Lime Green), Color(Lime Green), Color(Lime Green), Color(Lime Green), Color(Lime Green), Color(Lime Green), Color(Lime Green),
			Color(Lime Green), Color(Lime Green), Color(Lime Green), Color(Rose), Color(Lime Green), Color(Lime Green), Color(Lime Green),
			Color(Lime Green), Color(Lime Green), Color(Lime Green), Color(Lime Green), Color(Lime Green), Color(Lime Green), Color(
			Lime Green), Color(Lime Green), Color(Lime Green), Color(Lime Green));
		Global.Click_Area_Page = Array(Custom String("Default"), Custom String("!Default"), Custom String("Settings"), Custom String(
			"Settings"), Custom String("Settings"), Custom String("Settings"), Custom String("Default"), Custom String("Default"),
			Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String(
			"Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"),
			Custom String("Default"), Custom String("Tracer"), Custom String("Sombra"), Custom String("Reinhardt"), Custom String("Sigma"),
			Custom String("Genji"), Custom String("Soldier: 76"), Custom String("Pharah"), Custom String("Mei"), Custom String("Kiriko"),
			Custom String("Lifeweaver"), Custom String("Lúcio"), Custom String("Echo"));
		Global.Click_Area_Text = Array(Custom String("Settings"), Custom String("X"), Custom String("Mouse / Right Joystick"),
			Custom String("WASD / Left Joystick"), Custom String("Increase Sensitivity"), Custom String("Decrease Sensitivity"),
			Custom String("Buy 100+ Health"), Custom String("Buy 50+ Armor"), Custom String("Buy 50+ Shield"), Custom String(
			"Buy 5% Damage Dealt"), Custom String("Buy 5% Healing Dealt"), Custom String("Buy Regeneration 5hp/s"), Custom String(
			"Buy 5% Movement Speed"), Custom String("Buy 5% Faster Respawn"), Custom String("Buy 5% Lifesteal"), Custom String(
			"Buy 5% Faster Cooldowns"), Custom String("Reset"), Custom String("Hero Upgrades"), Custom String(
			"Can Recall Within 3 Seconds Of Death"), Custom String("Killing A Hacked Target Spreads\nThe Hack To A Enemy Within 8 Meters"),
			Custom String("Every 4th Hammer Swing\nCreates A Fire Strike"), Custom String(
			"Remove Cooldown On Experimental\nBarrier When Recalled"), Custom String("All Blade Attacks Inflict Bleed (DOT)"),
			Custom String("Killing An Enemy Refills\nYour Ammo Clip"), Custom String("Unlimited Jet Fuel"), Custom String(
			"Can Move At Normal Walking\nSpeed During Cryofreeze"), Custom String(
			"While Swift Step Is Not On Cooldown Movement\nSpeed Is Increased By 30%"), Custom String(
			"Remove Cooldown For Petal Platform"), Custom String(
			"You Gain The Effects Of Both Songs At Once,\nThe Song You Are Not Playing Will\nNot Be Effected By AMP"), Custom String(
			"Can Duplicate Teamates"));
		Global.Click_Area_Text_Size = Array(3, 2.500, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3);
		Global.Click_Area_ID = Array(Custom String("Settings"), Custom String("Default Page"), Custom String("Aim"), Custom String(
			"Throttle"), Custom String("+Sensitivity"), Custom String("-Sensitivity"), Custom String("+Health"), Custom String("+Armor"),
			Custom String("+Shield"), Custom String("+Damage Dealt"), Custom String("+Healing Dealt"), Custom String("+Regeneration"),
			Custom String("+Speed"), Custom String("+Respawn"), Custom String("+Lifesteal"), Custom String("+Cooldowns"), Custom String(
			"Reset"), Custom String("Buy Hero"), Custom String("Tracer"), Custom String("Sombra"), Custom String("Reinhardt"),
			Custom String("Sigma"), Custom String("Genji"), Custom String("Soldier: 76"), Custom String("Pharah"), Custom String("Mei"),
			Custom String("Kiriko"), Custom String("Lifeweaver"), Custom String("Lúcio"), Custom String("Echo"));
	}
}

rule("Setup Click Areas")
{
	event
	{
		Subroutine;
		Setup_Click_Areas;
	}

	actions
	{
		Skip If(Event Player.Shop_Text_ID_Array == Empty Array, 2);
		Call Subroutine(Destroy_Shop_Text);
		Event Player.Shop_Text_ID_Array = Empty Array;
		For Player Variable(Event Player, Index, 0, Count Of(Global.Click_Area), 1);
			If(Char In String(Global.Click_Area_Page[Event Player.Index], 0) == Custom String("!"));
				Skip If(Global.Click_Area_Page[Event Player.Index] == Event Player.Page, 2);
				Create In-World Text(Filtered Array(Event Player, Event Player.Enable_Menu == True && Event Player.Page != String Slice(
					Global.Click_Area_Page[Evaluate Once(Event Player.Index)], 1, String Length(Global.Click_Area_Page[Evaluate Once(
					Event Player.Index)]))), Global.Click_Area_Text[Evaluate Once(Event Player.Index)], Update Every Frame(Eye Position(
					Event Player) + 100 * (X Component Of(Global.Click_Area[Evaluate Once(Event Player.Index)]) * -1 / 2 * Cross Product(
					Facing Direction Of(Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)),
					Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90)) + (Z Component Of(Global.Click_Area[Evaluate Once(
					Event Player.Index)]) / 2 - 0.200) * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)),
					Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90) + 3 * Facing Direction Of(Event Player))),
					Global.Click_Area_Text_Size[Evaluate Once(Event Player.Index)], Do Not Clip, Visible To Position String and Color,
					Distance Between(Global.Click_Area[Evaluate Once(Event Player.Index)], Vector(Event Player.Mouse_X, 0, Event Player.Mouse_Y))
					<= Global.Click_Area_Size[Evaluate Once(Event Player.Index)] ? Global.Click_Area_Hover_Color[Evaluate Once(Event Player.Index)
					] : Global.Click_Area_Color[Evaluate Once(Event Player.Index)], Default Visibility);
				Modify Player Variable(Event Player, Shop_Text_ID_Array, Append To Array, Last Text ID);
			Else;
				Skip If(Global.Click_Area_Page[Event Player.Index] != Event Player.Page, 2);
				Create In-World Text(Filtered Array(Event Player,
					Event Player.Enable_Menu == True && Event Player.Page == Global.Click_Area_Page[Evaluate Once(Event Player.Index)]),
					Global.Click_Area_Text[Evaluate Once(Event Player.Index)], Update Every Frame(Eye Position(Event Player) + 100 * (
					X Component Of(Global.Click_Area[Evaluate Once(Event Player.Index)]) * -1 / 2 * Cross Product(Facing Direction Of(
					Event Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)),
					Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90)) + (Z Component Of(Global.Click_Area[Evaluate Once(
					Event Player.Index)]) / 2 - 0.200) * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)),
					Vertical Angle From Direction(Facing Direction Of(Event Player)) - 90) + 3 * Facing Direction Of(Event Player))),
					Global.Click_Area_Text_Size[Evaluate Once(Event Player.Index)], Do Not Clip, Visible To Position String and Color,
					Distance Between(Global.Click_Area[Evaluate Once(Event Player.Index)], Vector(Event Player.Mouse_X, 0, Event Player.Mouse_Y))
					<= Global.Click_Area_Size[Evaluate Once(Event Player.Index)] ? Global.Click_Area_Hover_Color[Evaluate Once(Event Player.Index)
					] : Global.Click_Area_Color[Evaluate Once(Event Player.Index)], Default Visibility);
				Modify Player Variable(Event Player, Shop_Text_ID_Array, Append To Array, Last Text ID);
			End;
			Wait(0.010, Ignore Condition);
		End;
	}
}

rule("Destroy Shop Text")
{
	event
	{
		Subroutine;
		Destroy_Shop_Text;
	}

	actions
	{
		For Player Variable(Event Player, Text_ID_Index, Count Of(Event Player.Shop_Text_ID_Array) - 1, -1, -1);
			Destroy In-World Text(Event Player.Shop_Text_ID_Array[Event Player.Text_ID_Index]);
		End;
		Event Player.Shop_Text_ID_Array = Empty Array;
	}
}

rule("Global")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.Enable_Menu), Custom String(
			"{0}{1}{2}                                                                                                                       ",
			Custom String(
			"                                                                                                                                "),
			Custom String(
			"                                                                                                                               "),
			Custom String("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")), Null, Null, Left, 0, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Global.Mouse_MaxX = 7.200;
		Global.Mouse_MaxY = 4.100;
		Global.Mouse_MinX = 0 - 7.200;
		Global.Mouse_MinY = 0 - 3.500;
		Global.Default_Sensitivity_Aim = Workshop Setting Integer(Custom String("Mouse"), Custom String(
			"Default Sensitivity% (Mouse / Right Joystick)"), 0, 0, 20, 0);
		Global.Default_Sensitivity_Throttle = Workshop Setting Integer(Custom String("Mouse"), Custom String(
			"Default Sensitivity (WASD / Left Joystick)"), 8, 1, 20, 0);
		Global.Points_Per_Level += Workshop Setting Integer(Custom String("Points"), Custom String("Attribute Points Per Level"), 1, 0, 10,
			0);
	}
}

rule("Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.Mouse_Input = Workshop Setting Combo(Custom String("Mouse"), Custom String("Default Input"), 0, Array(Custom String(
			"Mouse / Right Joystick"), Custom String("WASD / Left Joystick")), 0);
		If(Event Player.Mouse_Input == 0);
			Event Player.Sensitivity = Global.Default_Sensitivity_Aim;
			Chase Player Variable At Rate(Event Player, Mouse_X, Min(Max(Horizontal Facing Angle Of(Event Player) - First Of(
				Event Player.Init_Direction), Global.Mouse_MinX), Global.Mouse_MaxX), 999, Destination and Rate);
			Chase Player Variable At Rate(Event Player, Mouse_Y, Min(Max((Vertical Facing Angle Of(Event Player) - Last Of(
				Event Player.Init_Direction)) * -1, Global.Mouse_MinY), Global.Mouse_MaxY), 99, Destination and Rate);
		Else;
			Event Player.Sensitivity = Global.Default_Sensitivity_Throttle;
			Chase Player Variable At Rate(Event Player, Mouse_X, Min(Max(Event Player.Mouse_X + X Component Of(Throttle Of(Event Player)),
				Global.Mouse_MinX), Global.Mouse_MaxX), Event Player.Sensitivity, Destination and Rate);
			Chase Player Variable At Rate(Event Player, Mouse_Y, Min(Max(Event Player.Mouse_Y + Z Component Of(Throttle Of(Event Player)),
				Global.Mouse_MinY), Global.Mouse_MaxY), Event Player.Sensitivity, Destination and Rate);
		End;
		Create In-World Text(Filtered Array(Event Player, Event Player.Enable_Menu == True), Custom String("▲"), Update Every Frame(
			Eye Position(Event Player) + 100 * (Event Player.Mouse_X * -1 / 2 * Cross Product(Facing Direction Of(Event Player),
			Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(
			Facing Direction Of(Event Player)) - 90)) + (Event Player.Mouse_Y / 2 - 0.200) * Direction From Angles(
			Horizontal Angle From Direction(Facing Direction Of(Event Player)), Vertical Angle From Direction(Facing Direction Of(
			Event Player)) - 90) + 3 * Facing Direction Of(Event Player))), 3, Do Not Clip, Visible To Position and String, Color(Orange),
			Default Visibility);
		Wait Until(Has Spawned(Event Player), 99999);
		Wait(1, Ignore Condition);
		Small Message(Event Player, Custom String("Press {0} To Open Shop", Input Binding String(Button(Interact))));
		Wait(2.500, Ignore Condition);
		Small Message(Event Player, Custom String("Press {0} To Open Shop", Input Binding String(Button(Interact))));
		Wait(2.500, Ignore Condition);
		Small Message(Event Player, Custom String("Or Crouch And Press {0}", Input Binding String(Button(Melee))));
	}
}

rule("Toggle Menu")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		(Is Button Held(Event Player, Button(Interact)) || (Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee)))) == True;
	}

	actions
	{
		If(Event Player.Dupe_Stats[6] || Is Duplicating(Event Player));
			Small Message(Event Player, Custom String("Cant Upgrade While Duplicating"));
		Else;
			Event Player.Page = Custom String("Default");
			Event Player.Temp_Page = Custom String("Default");
			If(Event Player.Enable_Menu != True);
				Call Subroutine(Setup_Click_Areas);
				Event Player.Mouse_X = 0;
				Event Player.Mouse_Y = 0;
				Event Player.Init_Direction = Array(Horizontal Facing Angle Of(Event Player), Vertical Facing Angle Of(Event Player));
				If(Event Player.Mouse_Input == 0);
					Set Aim Speed(Event Player, Event Player.Sensitivity);
				Else;
					Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
				End;
				Set Move Speed(Event Player, 0);
				Disable Hero HUD(Event Player);
				Disable Game Mode HUD(Event Player);
				Event Player.Enable_Menu = True;
				Start Rule(Disable_Bindings, Do Nothing);
				Wait(0.250, Ignore Condition);
				Event Player.Init_Direction = Array(Horizontal Facing Angle Of(Event Player), Vertical Facing Angle Of(Event Player));
			Else;
				Enable Hero HUD(Event Player);
				Enable Game Mode HUD(Event Player);
				Event Player.Enable_Menu = False;
				Stop Facing(Event Player);
				Set Aim Speed(Event Player, 100);
				Set Move Speed(Event Player, (Hero Of(Event Player) == Hero(Kiriko) && Ability Cooldown(Event Player, Button(Ability 1))
					== Null && Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Kiriko))] == True ? 130 : 100)
					+ Event Player.Attribute_Stats[6]);
				Start Rule(Enable_Bindings, Do Nothing);
				Call Subroutine(Destroy_Shop_Text);
			End;
		End;
		Wait(0.250, Ignore Condition);
	}
}

rule("Disable_Bindings")
{
	event
	{
		Subroutine;
		Disable_Bindings;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Disallow Button(Event Player, Button(Ultimate));
		Set Melee Enabled(Event Player, False);
		Set Jump Enabled(Event Player, False);
		Set Reload Enabled(Event Player, False);
	}
}

rule("Enable Bindings")
{
	event
	{
		Subroutine;
		Enable_Bindings;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Allow Button(Event Player, Button(Ultimate));
		Set Melee Enabled(Event Player, True);
		Set Jump Enabled(Event Player, True);
		Set Reload Enabled(Event Player, True);
	}
}

rule("Detect Clicked Area")
{
	event
	{
		Subroutine;
		Detect_Click;
	}

	actions
	{
		If(Custom String("{0}", Hero Of(Event Player))
			== Event Player.Clicked_Area && Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero Of(Event Player))
			] != True);
			If(Event Player.Hero_Points > 0);
				Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero Of(Event Player))] = True;
				Event Player.Hero_Points -= 1;
				Small Message(Event Player, Custom String("Bought Upgrade"));
				Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 50);
			Else;
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
				Small Message(Event Player, Custom String("Requires 1 Hero Point"));
			End;
		Else If(Custom String("{0}", Hero Of(Event Player))
				== Event Player.Clicked_Area && Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero Of(Event Player))
				] == True);
			Small Message(Event Player, Custom String("Upgrade Already Bought"));
			Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			Abort;
		End;
		If(Event Player.Clicked_Area == Custom String("Settings"));
			Event Player.Page = Custom String("Settings");
			Abort;
		Else If(Event Player.Clicked_Area == Custom String("Default Page"));
			Event Player.Page = Custom String("Default");
			Abort;
		Else If(Event Player.Clicked_Area == Custom String("Aim"));
			Event Player.Mouse_Input = 0;
			Event Player.Sensitivity = Global.Default_Sensitivity_Aim;
			Set Aim Speed(Event Player, Event Player.Sensitivity);
			Stop Facing(Event Player);
			Chase Player Variable At Rate(Event Player, Mouse_X, Min(Max(Horizontal Facing Angle Of(Event Player) - First Of(
				Event Player.Init_Direction), Global.Mouse_MinX), Global.Mouse_MaxX), 999, Destination and Rate);
			Chase Player Variable At Rate(Event Player, Mouse_Y, Min(Max((Vertical Facing Angle Of(Event Player) - Last Of(
				Event Player.Init_Direction)) * -1, Global.Mouse_MinY), Global.Mouse_MaxY), 99, Destination and Rate);
			Small Message(All Players(All Teams), Custom String("Mouse Input Set To Mouse / Right Joystick"));
			Abort;
		Else If(Event Player.Clicked_Area == Custom String("Throttle"));
			Event Player.Mouse_Input = 1;
			Event Player.Sensitivity = Global.Default_Sensitivity_Throttle;
			Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
			Chase Player Variable At Rate(Event Player, Mouse_X, Min(Max(Event Player.Mouse_X + X Component Of(Throttle Of(Event Player)),
				Global.Mouse_MinX), Global.Mouse_MaxX), Event Player.Sensitivity, Destination and Rate);
			Chase Player Variable At Rate(Event Player, Mouse_Y, Min(Max(Event Player.Mouse_Y + Z Component Of(Throttle Of(Event Player)),
				Global.Mouse_MinY), Global.Mouse_MaxY), Event Player.Sensitivity, Destination and Rate);
			Small Message(All Players(All Teams), Custom String("Mouse Input Set To WASD / Left Joystick"));
			Abort;
		Else If(Event Player.Clicked_Area == Custom String("-Sensitivity"));
			Event Player.Sensitivity -= 1;
			Modify Player Variable(Event Player, Sensitivity, Max, 0);
			Set Aim Speed(Event Player, Event Player.Sensitivity);
			Small Message(Event Player, Custom String("Mouse Sensitivity Set To {0}{1}", Event Player.Sensitivity,
				Event Player.Mouse_Input == 0 ? Custom String("%") : Custom String("")));
			Abort;
		Else If(Event Player.Clicked_Area == Custom String("+Sensitivity"));
			Event Player.Sensitivity += 1;
			Modify Player Variable(Event Player, Sensitivity, Min, Event Player.Mouse_Input == 0 ? 100 : 20);
			Set Aim Speed(Event Player, Event Player.Sensitivity);
			Small Message(Event Player, Custom String("Mouse Sensitivity Set To {0}{1}", Event Player.Sensitivity,
				Event Player.Mouse_Input == 0 ? Custom String("%") : Custom String("")));
			Abort;
		Else If(Event Player.Clicked_Area == Custom String("+Health"));
			If(Event Player.HP_Cap < 5 && Event Player.Attribute_Points > 0);
				Event Player.Attribute_Stats[0] += 100;
				Event Player.Attribute_Points -= 1;
				Event Player.HP_Cap += 1;
				Small Message(Event Player, Custom String("Spent Attribute Point On 100 Health"));
				Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 50);
			Else;
				Skip If(Event Player.HP_Cap < 5, 1);
				Small Message(Event Player, Custom String("HP Upgrades At Max, Cant Buy More"));
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			End;
		Else If(Event Player.Clicked_Area == Custom String("+Armor"));
			If(Event Player.HP_Cap < 5 && Event Player.Attribute_Points > 0);
				Event Player.Attribute_Stats[1] += 50;
				Event Player.Attribute_Points -= 1;
				Event Player.HP_Cap += 1;
				Small Message(Event Player, Custom String("Spent Attribute Point On 50 Armor"));
				Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 50);
			Else;
				Skip If(Event Player.HP_Cap < 5, 1);
				Small Message(Event Player, Custom String("HP Upgrades At Max, Cant Buy More"));
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			End;
		Else If(Event Player.Clicked_Area == Custom String("+Shield"));
			If(Event Player.HP_Cap < 5 && Event Player.Attribute_Points > 0);
				Event Player.Attribute_Stats[2] += 50;
				Event Player.Attribute_Points -= 1;
				Event Player.HP_Cap += 1;
				Small Message(Event Player, Custom String("Spent Attribute Point On 50 Shield"));
				Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 50);
			Else;
				Skip If(Event Player.HP_Cap < 5, 1);
				Small Message(Event Player, Custom String("HP Upgrades At Max, Cant Buy More"));
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			End;
		Else If(Event Player.Clicked_Area == Custom String("+Damage Dealt"));
			If(Event Player.Attribute_Points > 0);
				Event Player.Attribute_Stats[3] += 5;
				Set Damage Dealt(Event Player, 100 + Event Player.Attribute_Stats[3]);
				Event Player.Attribute_Points -= 1;
				Small Message(Event Player, Custom String("Spent Attribute Point Damage Dealt (Now {0}%)", 100 + Event Player.Attribute_Stats[3]));
				Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 50);
			Else;
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			End;
		Else If(Event Player.Clicked_Area == Custom String("+Healing Dealt"));
			If(Event Player.Attribute_Points > 0);
				Event Player.Attribute_Stats[4] += 5;
				Set Healing Dealt(Event Player, 100 + Event Player.Attribute_Stats[4]);
				Event Player.Attribute_Points -= 1;
				Small Message(Event Player, Custom String("Spent Attribute Point Healing Dealt (Now {0}%)",
					100 + Event Player.Attribute_Stats[4]));
				Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 50);
			Else;
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			End;
		Else If(Event Player.Clicked_Area == Custom String("+Regeneration"));
			If(Event Player.Attribute_Points > 0);
				Event Player.Attribute_Stats[5] += 5;
				Event Player.Attribute_Points -= 1;
				Event Player.Start_Regen = True;
				Small Message(Event Player, Custom String("Spent Attribute Point Regeneration (Now {0}/s)", Event Player.Attribute_Stats[5]));
				Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 50);
			Else;
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			End;
		Else If(Event Player.Clicked_Area == Custom String("+Speed"));
			If(Event Player.Attribute_Points > 0);
				Event Player.Attribute_Stats[6] += 5;
				Event Player.Attribute_Points -= 1;
				Small Message(Event Player, Custom String("Spent Attribute Point Movement Speed (Now {0}%)",
					100 + Event Player.Attribute_Stats[6]));
				Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 50);
			Else;
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			End;
		Else If(Event Player.Clicked_Area == Custom String("+Respawn"));
			If(Event Player.Attribute_Stats[7] < 50 && Event Player.Attribute_Points > 0);
				Event Player.Attribute_Stats[7] += 5;
				Set Respawn Max Time(Event Player, 0.100 * (100 - Event Player.Attribute_Stats[7]));
				Event Player.Attribute_Points -= 1;
				Small Message(Event Player, Custom String("Spent Attribute Point Faster Respawn (Now {0}'s)", 0.100 * (
					100 - Event Player.Attribute_Stats[7])));
				Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 50);
			Else;
				Skip If(Event Player.Attribute_Stats[7] < 50, 1);
				Small Message(Event Player, Custom String("Faster Respawn At Max, Cant Buy More"));
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			End;
		Else If(Event Player.Clicked_Area == Custom String("+Cooldowns"));
			If(Event Player.Attribute_Stats[8] < 80 && Event Player.Attribute_Points > 0);
				Event Player.Attribute_Stats[8] += 5;
				Event Player.Attribute_Points -= 1;
				Small Message(Event Player, Custom String("Spent Attribute Point Faster Cooldowns (Now {0}%)", Event Player.Attribute_Stats[8]));
				Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 50);
			Else;
				Skip If(Event Player.Attribute_Stats[8] < 80, 1);
				Small Message(Event Player, Custom String("Faster Cooldown At Max, Cant Buy More"));
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			End;
		Else If(Event Player.Clicked_Area == Custom String("+Lifesteal"));
			If(Event Player.Attribute_Stats[9] < 100 && Event Player.Attribute_Points > 0);
				Event Player.Attribute_Stats[9] += 5;
				Event Player.Attribute_Points -= 1;
				Small Message(Event Player, Custom String("Spent Attribute Point Lifesteal (Now {0}%)", Event Player.Attribute_Stats[9]));
				Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 50);
			Else;
				Skip If(Event Player.Attribute_Stats[9] < 100, 1);
				Small Message(Event Player, Custom String("Lifesteal At Max, Cant Buy More"));
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			End;
		Else If(Event Player.Clicked_Area == Custom String("Reset"));
			If(Is In Spawn Room(Event Player));
				Event Player.Attribute_Stats = Array(Null, Null, Null, Null, Null, Null, Null, Null, Null, Null);
				Event Player.Attribute_Points = Event Player.Points_Earned;
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 100);
				Small Message(Event Player, Custom String("All Attribute Points Refunded"));
				Remove All Health Pools From Player(Event Player);
				Event Player.Start_Regen = False;
				Event Player.HP_Cap = 0;
			Else;
				Small Message(Event Player, Custom String("Can't Reset Outside Of Spawn"));
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			End;
		Else If(Event Player.Clicked_Area == Custom String("Buy Hero"));
			If(Is True For Any(Global.Click_Area_Page, Current Array Element == Custom String("{0}", Hero Of(Event Player))));
				Event Player.Page = Custom String("{0}", Hero Of(Event Player));
				Abort;
			Else;
				Small Message(Event Player, Custom String("Hero Currently Has No Upgrade, Sorry."));
				Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 50);
			End;
	}
}

rule("Menu Click")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Enable_Menu == True;
		Has Spawned(Event Player) == True;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
	}

	actions
	{
		Event Player.Clicked_Area = First Of(Sorted Array(Filtered Array(Global.Click_Area_ID, Distance Between(
			Global.Click_Area[Current Array Index], Vector(Event Player.Mouse_X, 0, Event Player.Mouse_Y))
			<= Global.Click_Area_Size[Current Array Index] && (Char In String(Global.Click_Area_Page[Current Array Index], 0)
			== Custom String("!") ? Event Player.Page != String Slice(Global.Click_Area_Page[Current Array Index], 1, String Length(
			Global.Click_Area_Page[Current Array Index]) - 1) : Event Player.Page == Global.Click_Area_Page[Current Array Index])),
			Distance Between(Current Array Element, Vector(Event Player.Mouse_X, 0, Event Player.Mouse_Y))));
		If(Is True For All(Global.Click_Area_ID, Event Player.Clicked_Area != Current Array Element));
			Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Else;
			Start Rule(Detect_Click, Restart Rule);
		End;
	}
}

rule("Update Shop Page")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Enable_Menu == True;
		Event Player.Temp_Page != Event Player.Page;
	}

	actions
	{
		Wait(0.016, Abort When False);
		Start Rule(Setup_Click_Areas, Restart Rule);
		Event Player.Temp_Page = Event Player.Page;
	}
}

disabled rule("-------------------------------------------- In-Game Menu ----------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("+Health Effect")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Wait Until(Event Player.Attribute_Stats[0] > 0, 99999);
		Add Health Pool To Player(Event Player, Health, Event Player.Attribute_Stats[0], True, True);
		Wait Until(Event Player.Attribute_Stats[0] == 0, 99999);
		Loop;
	}
}

rule("+Armor Effect")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Wait Until(Event Player.Attribute_Stats[1] > 0, 99999);
		Add Health Pool To Player(Event Player, Armor, Event Player.Attribute_Stats[1], True, True);
		Wait Until(Event Player.Attribute_Stats[1] == 0, 99999);
		Loop;
	}
}

rule("+Shield Effect")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Wait Until(Event Player.Attribute_Stats[2] > 0, 99999);
		Add Health Pool To Player(Event Player, Shields, Event Player.Attribute_Stats[2], True, True);
		Wait Until(Event Player.Attribute_Stats[2] == 0, 99999);
		Loop;
	}
}

rule("Trigger Regen")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Attribute_Stats[5] > Null;
	}

	actions
	{
		Event Player.Start_Regen = False;
		Wait(2, Restart When True);
		Event Player.Start_Regen = True;
	}
}

rule("Regeneration Effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Start_Regen == True;
	}

	actions
	{
		Set Player Health(Event Player, Health(Event Player) + Event Player.Attribute_Stats[5] * 0.100);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Faster Cooldown - Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Attribute_Stats[8] > 0;
		Ability Cooldown(Event Player, Button(Ability 1)) != Null;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)) * 0.010 * (
			100 - Event Player.Attribute_Stats[8]));
	}
}

rule("Faster Cooldown - Ability 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Attribute_Stats[8] > 0;
		Ability Cooldown(Event Player, Button(Ability 2)) != Null;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)) * 0.010 * (
			100 - Event Player.Attribute_Stats[8]));
	}
}

rule("Faster Cooldown - Secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Attribute_Stats[8] > 0;
		Ability Cooldown(Event Player, Button(Secondary Fire)) != Null;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), Ability Cooldown(Event Player, Button(Secondary Fire)) * 0.010 * (
			100 - Event Player.Attribute_Stats[8]));
	}
}

rule("Faster Cooldown - Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Attribute_Stats[8] > 0;
		Ability Cooldown(Event Player, Button(Jump)) != Null;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Jump), Ability Cooldown(Event Player, Button(Jump)) * 0.010 * (
			100 - Event Player.Attribute_Stats[8]));
	}
}

rule("Faster Cooldown - Crouch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Attribute_Stats[8] > 0;
		Ability Cooldown(Event Player, Button(Crouch)) != Null;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Crouch), Ability Cooldown(Event Player, Button(Crouch)) * 0.010 * (
			100 - Event Player.Attribute_Stats[8]));
	}
}

rule("Faster Cooldown - Melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Attribute_Stats[8] > 0;
		Is Meleeing(Event Player) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Melee), Ability Cooldown(Event Player, Button(Melee)) * 0.010 * (
			100 - Event Player.Attribute_Stats[8]));
	}
}

rule("Lifesteal Effect")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Attribute_Stats[9] > 0;
	}

	actions
	{
		Heal(Event Player, Null, Event Damage * (Event Player.Attribute_Stats[9] / 100));
	}
}

rule("Tracer Recall While Dead")
{
	event
	{
		Player Died;
		All;
		Tracer;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Tracer))] == True;
	}

	actions
	{
		Wait Until(Event Player.Recall_Cooldown == 0 && (Event Player.Is_Bot || Is Button Held(Event Player, Button(Ability 2))), 3);
		Set Ability 2 Enabled(Event Player, False);
		Abort If(Event Player.Recall_Cooldown != 0 || (!Event Player.Is_Bot && !Is Button Held(Event Player, Button(Ability 2))));
		Wait(Event Player.Is_Bot ? Random Real(0.500, 1.500) : Null, Ignore Condition);
		Skip If(Event Player.Death_Was_Enviomental, 2);
		Resurrect(Event Player);
		Set Player Health(Event Player, 1);
		Event Player.Recall_End_HP = 0;
		Play Effect(All Players(All Teams), Tracer Recall Disappear Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(
			Team 2), Evaluate Once(World Vector Of(Vector(0, Distance Between(Eye Position(Event Player), Position Of(Event Player))
			/ 1.600, 0), Event Player, Rotation And Translation)), 1);
		Play Effect(All Players(All Teams), Tracer Recall Disappear Sound, Color(White), Evaluate Once(Eye Position(Event Player)), 100);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Disallow Button(Event Player, Button(Ultimate));
		Disallow Button(Event Player, Button(Interact));
		Set Jump Enabled(Event Player, False);
		Set Crouch Enabled(Event Player, False);
		Set Melee Enabled(Event Player, False);
		Set Reload Enabled(Event Player, False);
		Cancel Primary Action(Event Player);
		Set Invisible(Event Player, All);
		Set Status(Event Player, Null, Phased Out, 1.250);
		Start Forcing Player Position(Event Player, Event Player.Recall_Stats[Event Player.Recall_Index][0], True);
		Start Facing(Event Player, Event Player.Recall_Stats[Event Player.Recall_Index][1], 9999, To World, Direction and Turn Rate);
		For Player Variable(Event Player, Recall_Index, Count Of(Event Player.Recall_Stats) - 1, 0, -1);
			Event Player.Recall_End_HP = Max(Event Player.Recall_End_HP, Event Player.Recall_Stats[Event Player.Recall_Index][2]);
			Set Player Health(Event Player, Max(Event Player.Recall_End_HP, Event Player.Recall_Stats[Event Player.Recall_Index][2]));
			Wait(0.910 / Count Of(Event Player.Recall_Stats), Ignore Condition);
		End;
		Event Player.Recall_Index = 0;
		Wait(0.050, Ignore Condition);
		Set Invisible(Event Player, None);
		Stop Forcing Player Position(Event Player);
		Stop Facing(Event Player);
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Set Ammo(Event Player, 1, Max Ammo(Event Player, 1));
		Skip If(!Event Player.Death_Was_Enviomental, 2);
		Resurrect(Event Player);
		Set Player Health(Event Player, Event Player.Recall_End_HP);
		Play Effect(All Players(All Teams), Tracer Recall Reappear Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(Team 2),
			Evaluate Once(World Vector Of(Vector(0, Distance Between(Eye Position(Event Player), Position Of(Event Player)) / 1.600, 0),
			Event Player, Rotation And Translation)), 1);
		Play Effect(All Players(All Teams), Tracer Recall Reappear Sound, Color(White), Evaluate Once(Eye Position(Event Player)), 100);
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Allow Button(Event Player, Button(Ultimate));
		Allow Button(Event Player, Button(Interact));
		Set Jump Enabled(Event Player, True);
		Set Crouch Enabled(Event Player, True);
		Set Melee Enabled(Event Player, True);
		Set Reload Enabled(Event Player, True);
		Set Ability Cooldown(Event Player, Button(Ability 2), 12);
		Event Player.Recall_Cooldown = 12;
		If(Event Player.Attribute_Stats[8] > 0);
			Set Ability Cooldown(Event Player, Button(Ability 2), 0.120 * (100 - Event Player.Attribute_Stats[8]));
			Event Player.Recall_Cooldown = 0.120 * (100 - Event Player.Attribute_Stats[8]);
		End;
	}
}

rule("Track Recall Stats")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Tracer))] == True;
	}

	actions
	{
		Event Player.Recall_Stats = Empty Array;
		While(Event Player.Recall_Index == 0 && Has Spawned(Event Player));
			Modify Player Variable(Event Player, Recall_Stats, Append To Array, Array(Array(Position Of(Event Player), Facing Direction Of(
				Event Player), Health(Event Player))));
			Skip If(Count Of(Event Player.Recall_Stats) - 1 < 60, 1);
			Modify Player Variable(Event Player, Recall_Stats, Remove From Array By Index, 0);
			Wait(1 / 20, Ignore Condition);
		End;
		Wait Until(Event Player.Recall_Index == 0, 99999);
		Loop;
	}
}

rule("Track Death Cause")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Event Player.Death_Was_Enviomental = Event Was Environment;
	}
}

rule("Track Recall Cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ability 2(Event Player) != True;
	}

	actions
	{
		Event Player.Recall_Cooldown = 12;
		If(Event Player.Attribute_Stats[8] > 0);
			Set Ability Cooldown(Event Player, Button(Ability 2), 0.120 * (100 - Event Player.Attribute_Stats[8]));
			Event Player.Recall_Cooldown = 0.120 * (100 - Event Player.Attribute_Stats[8]);
		End;
	}
}

rule("Sombra Hack Virus")
{
	event
	{
		Player Earned Elimination;
		All;
		Sombra;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Sombra))] == True;
		Victim.Is_Hacked == True;
	}

	actions
	{
		Set Status(Random Value In Array(Players Within Radius(Victim, 8, Team Of(Victim), Surfaces)), Event Player, Hacked, 4);
	}
}

rule("Track Hacked Status")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == True;
	}

	actions
	{
		Event Player.Is_Hacked = True;
		Wait Until(!Has Status(Event Player, Hacked), 8);
		Wait Until(Is Alive(Event Player), 0.100);
		Event Player.Is_Hacked = False;
	}
}

rule("Reinhardt Fire Strike Hammer")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Reinhardt))] == True;
		Is Firing Primary(Event Player) == True;
		Event Player.Counter == 4;
	}

	actions
	{
		Event Player.Counter = 0;
		Create Projectile(Reinhardt Fire Strike, Event Player, Null, Null, To World, Damage, All Teams, 100, 1, 0, Ring Explosion,
			Explosion Sound, 0, 25, 8, 0, 0, 0);
	}
}

rule("Reinhardt Counter")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Reinhardt))] == True;
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Wait(0.400, Abort When False);
		Event Player.Counter += 1;
		Wait(0.500, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Sigma Recall Barrier")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Sigma))] == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) != Null;
	}

	actions
	{
		Abort If(Ability Cooldown(Event Player, Button(Secondary Fire)) > 2);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0.100);
	}
}

rule("Genji Bleed")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Genji))] == True;
		Is True For Any(Array(Button(Ultimate), Button(Ability 1), Button(Melee)), Event Ability == Current Array Element) == True;
	}

	actions
	{
		Skip If(Victim.Is_Bleeding > 0, 1);
		Start Damage Over Time(Victim, Event Player, 5, 10);
		Victim.Bleed_DOT_ID = Last Damage Over Time ID;
		Victim.Is_Bleeding = 5;
	}
}

rule("Stop Bleed Effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Is_Bleeding == 0;
	}

	actions
	{
		Stop Damage Over Time(Event Player.Bleed_DOT_ID);
	}
}

rule("Soldier:76 Ammo Refill")
{
	event
	{
		Player Earned Elimination;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Soldier: 76))] == True;
	}

	actions
	{
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
	}
}

rule("Pharah Unlimited Jet Fuel")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Pharah))] == True;
		Ability Resource(Event Player, Button(Jump)) <= 10;
	}

	actions
	{
		Set Ability Resource(Event Player, Button(Jump), 100);
	}
}

rule("Mei Mobile Cryofreeze")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Mei))] == True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Start Accelerating(Event Player, Throttle Of(Event Player), 999, 0.055 * (100 + Event Player.Attribute_Stats[6]) * Min(
			Magnitude Of(Throttle Of(Event Player)), 1), To Player, Direction Rate and Max Speed);
		Wait Until(!Is Using Ability 1(Event Player), 99999);
		Stop Accelerating(Event Player);
	}
}

rule("Kiriko Swift Step Speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		Kiriko;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Kiriko))] == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == Null;
	}

	actions
	{
		Wait Until(!Event Player.Enable_Menu, 99999);
		Set Move Speed(Event Player, 130 + Event Player.Attribute_Stats[6]);
		Wait Until(Ability Cooldown(Event Player, Button(Ability 1)) != Null, 99999);
		Abort If(Event Player.Enable_Menu);
		Set Move Speed(Event Player, 100 + Event Player.Attribute_Stats[6]);
	}
}

rule("Lifeweaver No CD Petal")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lifeweaver;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Lifeweaver))] == True;
		Ability Cooldown(Event Player, Button(Ability 1)) != Null;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
	}
}

rule("Cross Fade Hacked")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Lúcio))] == True;
		Has Status(Event Player, Hacked) == True;
	}

	actions
	{
		Event Player.Cross_Fade_Stats[1] = False;
		Wait(1.500, Ignore Condition);
		Event Player.Cross_Fade_Stats[1] = True;
	}
}

rule("Cross Fade Speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Lúcio))] == True;
		(Event Player.Cross_Fade_Stats[0] == Custom String("Speed") && Event Player.Cross_Fade_Stats[1]) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 125 + Event Player.Attribute_Stats[6]);
		Wait Until(Event Player.Cross_Fade_Stats[0] != Custom String("Speed") || Event Player.Cross_Fade_Stats[1] == False, 99999);
		Set Move Speed(Event Player, 100 + Event Player.Attribute_Stats[6]);
	}
}

rule("Cross Fade Healing")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Lúcio))] == True;
		(Event Player.Cross_Fade_Stats[0] == Custom String("Healing") && Event Player.Cross_Fade_Stats[1] == True) == True;
	}

	actions
	{
		While(Event Player.Cross_Fade_Stats[0] == Custom String("Healing") && Event Player.Cross_Fade_Stats[1] == True);
			Heal(Event Player, Event Player, 1);
			Wait(0.100, Ignore Condition);
		End;
	}
}

rule("Cross Fade Swap")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Event Player.Has_Hero_Upgrade_Array[Index Of Array Value(All Heroes, Hero(Lúcio))] == True;
		Event Player.Cross_Fade_Stats[0] == (Is In Alternate Form(Event Player) ? Custom String("Speed") : Custom String("Healing"));
	}

	actions
	{
		Event Player.Cross_Fade_Stats[0] = Is In Alternate Form(Event Player) ? Custom String("Healing") : Custom String("Speed");
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Is Alive Script")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Wait Until(Is Alive(Event Player), 99999);
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("Duplicate Teammate (Conditions)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is True For All(Array(Is Dead(Event Player), Is Communicating Any Emote(Event Player), Has Status(Event Player, Knocked Down),
			Has Status(Event Player, Asleep), Has Status(Event Player, Frozen), Has Status(Event Player, Stunned)), !Current Array Element)
			== True;
		Is True For All(Array(Ultimate Charge Percent(Event Player) == 100, Is Button Held(Event Player, Button(Ultimate))),
			Current Array Element) == True;
	}

	actions
	{
		Start Rule(Dupe_Team, Do Nothing);
	}
}

rule("Duplicate Teammate (Actions)")
{
	event
	{
		Subroutine;
		Dupe_Team;
	}

	actions
	{
		Abort If(Ultimate Charge Percent(Event Player) != 100);
		Event Player.Dupe_Stats = First Of(Sorted Array(Filtered Array(All Living Players(Team Of(Event Player)), Is In View Angle(
			Event Player, Eye Position(Current Array Element), 45) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Current Array Element), Barriers Do Not Block LOS) && Distance Between(Event Player, Current Array Element) <= 40),
			Distance Between(Current Array Element, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 40, All Living Players(Team Of(Event Player)), Event Player, False))));
		Abort If(!Entity Exists(Event Player.Dupe_Stats));
		Event Player.Dupe_Stats[1] = Health(Event Player);
		Event Player.Dupe_Stats[2] = Ability Cooldown(Event Player, Button(Ability 1));
		Event Player.Dupe_Stats[3] = Ability Cooldown(Event Player, Button(Ability 2));
		Event Player.Dupe_Stats[4] = Ability Cooldown(Event Player, Button(Secondary Fire));
		Start Forcing Player Position(Event Player, Position Of(Event Player), False);
		Set Status(Event Player, Null, Invincible, 1.240);
		Start Rule(Disable_Bindings, Restart Rule);
		Wait(1.240, Ignore Condition);
		Start Rule(Enable_Bindings, Restart Rule);
		Stop Forcing Player Position(Event Player);
		Event Player.Dupe_Stats[6] = True;
		Start Forcing Player To Be Hero(Event Player, Hero Of(First Of(Event Player.Dupe_Stats)));
		Create Effect(All Players(All Teams), Echo Cloning Effect, Team Of(Event Player) == Team 1 ? Color(Team 1) : Color(Team 2),
			Event Player, 1, Visible To Position and Radius);
		Event Player.Dupe_Stats[5] = Last Created Entity;
		Create Progress Bar HUD Text(Event Player, 100 - (Total Time Elapsed - Evaluate Once(Total Time Elapsed)) / 0.150, Custom String(
			"{0} Duration", Ability Icon String(Hero(Echo), Button(Ultimate))), Right, -1, Color(Yellow), Color(White),
			Visible To Values and Color, Default Visibility);
		Event Player.Dupe_Stats[7] = Last Text ID;
		Event Player.Dupe_Stats[8] = 0.100;
		While(Is Alive(Event Player) && Event Player.Dupe_Stats[8] < 15);
			Event Player.Dupe_Stats[2] -= 0.100;
			Event Player.Dupe_Stats[3] -= 0.100;
			Event Player.Dupe_Stats[4] -= 0.100;
			Wait(0.100, Ignore Condition);
			Event Player.Dupe_Stats[8] += 0.100;
		End;
		Event Player.Dupe_Stats[6] = False;
		Destroy Progress Bar HUD Text(Event Player.Dupe_Stats[7]);
		Destroy Effect(Event Player.Dupe_Stats[5]);
		Start Forcing Player To Be Hero(Event Player, Hero(Echo));
		Set Ability Cooldown(Event Player, Button(Ability 1), Max(Event Player.Dupe_Stats[2], 0));
		Set Ability Cooldown(Event Player, Button(Ability 2), Max(Event Player.Dupe_Stats[3], 0));
		Set Ability Cooldown(Event Player, Button(Secondary Fire), Max(Event Player.Dupe_Stats[4], 0));
		Set Max Health(Event Player, 100);
		Set Player Health(Event Player, Max(Event Player.Dupe_Stats[1], 100));
	}
}

rule("Duplicate Attributes")
{
	event
	{
		Subroutine;
		Dupe_Attributes;
	}

	actions
	{
		Event Player.Stored_Attributes = Event Player.Attribute_Stats;
		Event Player.Stored_Hero_Upgrades = Event Player.Has_Hero_Upgrade_Array;
		Event Player.Stored_HP_Cap = Event Player.HP_Cap;
		Event Player.Attribute_Stats = Array(Null, Null, Null, Null, Null, Null, Null, Null, Null, Null);
		Remove All Health Pools From Player(Event Player);
		Skip If(Is Duplicating(Event Player), 1);
		Set Max Health(Event Player, Min(300 / Max Health(Event Player), 1) * 100);
		Event Player.Start_Regen = False;
		Wait(0.100, Ignore Condition);
		Event Player.Attribute_Stats = (Is Duplicating(Event Player) ? First Of(Players On Hero(Hero Being Duplicated(Event Player),
			Opposite Team Of(Team Of(Event Player)))) : First Of(Event Player.Dupe_Stats)).Attribute_Stats;
		Event Player.Has_Hero_Upgrade_Array = (Is Duplicating(Event Player) ? First Of(Players On Hero(Hero Being Duplicated(Event Player),
			Opposite Team Of(Team Of(Event Player)))) : First Of(Event Player.Dupe_Stats)).Has_Hero_Upgrade_Array;
		Event Player.HP_Cap = (Is Duplicating(Event Player) ? First Of(Players On Hero(Hero Being Duplicated(Event Player),
			Opposite Team Of(Team Of(Event Player)))) : First Of(Event Player.Dupe_Stats)).HP_Cap;
		Wait Until(!Is Duplicating(Event Player) && !Event Player.Dupe_Stats[6], 99999);
		Event Player.Attribute_Stats = Event Player.Stored_Attributes;
		Event Player.Has_Hero_Upgrade_Array = Event Player.Stored_Hero_Upgrades;
		Event Player.HP_Cap = Event Player.Stored_HP_Cap;
	}
}

disabled rule("-------------------------------------------- Ultimate Generation Replica ----------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Setup : Global")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.All_Heros = Array(Hero(Ana), Hero(Ashe), Hero(Baptiste), Hero(Bastion), Hero(Brigitte), Hero(Cassidy), Hero(D.Va), Hero(
			Doomfist), Hero(Echo), Hero(Genji), Hero(Hanzo), Hero(Junker Queen), Hero(Junkrat), Hero(Kiriko), Hero(Lifeweaver), Hero(
			Lúcio), Hero(Mei), Hero(Mercy), Hero(Moira), Hero(Orisa), Hero(Pharah), Hero(Ramattra), Hero(Reaper), Hero(Reinhardt), Hero(
			Roadhog), Hero(Sigma), Hero(Soldier: 76), Hero(Sombra), Hero(Sojourn), Hero(Symmetra), Hero(Torbjörn), Hero(Tracer), Hero(
			Widowmaker), Hero(Winston), Hero(Wrecking Ball), Hero(Zarya), Hero(Zenyatta), Hero(Illari));
		Global.Ultimate_Costs = Array(2100, 2240, 2310, 2310, 2550, 1850, 1540, 1680, 1691, 1932, 1680, 2450, 1925, 2300, 2000, 2420, 1750,
			1820, 2660, 1950, 2000, 1880, 1930, 1650, 2420, 2100, 2100, 2310, 1400, 1680, 2142, 1260, 1540, 1850, 1675, 2270, 2310, 2420);
	}
}

rule("Setup : Player")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Event Player.Ultimate_Points = Null;
		Event Player.Ultimate_Cost = Null;
		Chase Player Variable At Rate(Event Player, Ultimate_Points, Is Using Ultimate(Event Player) ? 0 : Event Player.Ultimate_Cost,
			Is Using Ultimate(Event Player) ? 9999 : (Is Game In Progress ? 5 : 0), Destination and Rate);
		Event Player.Valid_Healing = 0;
	}
}

rule("Swap : Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Has Spawned(Event Player) && (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)
			!= Event Player.Stored_Hero)) == True;
	}

	actions
	{
		Event Player.Stored_Hero = Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player);
		Event Player.Ultimate_Cost = Global.Ultimate_Costs[Index Of Array Value(Global.All_Heros, Event Player.Stored_Hero)];
		Modify Player Variable(Event Player, Ultimate_Points, Min, Event Player.Ultimate_Cost * 0.300);
		Abort If(!Is Duplicating(Event Player) && !Event Player.Dupe_Stats[6]);
		Start Rule(Dupe_Attributes, Do Nothing);
		Event Player.Ultimate_Points = 0;
		Event Player.Ultimate_Cost /= 5;
		Wait Until(!Is Duplicating(Event Player) && !Event Player.Dupe_Stats[6], 99999);
		Event Player.Stored_Hero = Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player);
		Event Player.Ultimate_Cost = Global.Ultimate_Costs[Index Of Array Value(Global.All_Heros, Event Player.Stored_Hero)];
		Event Player.Ultimate_Points = 0;
	}
}

rule("Swap : Baby Dva")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Has Spawned(Event Player) && (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)
			== Event Player.Stored_Hero)) == True;
		Event Player.Stored_Hero == Hero(D.Va);
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Event Player.Ultimate_Cost = 280;
		Event Player.Stored_Mech_Points = Event Player.Ultimate_Points;
		Event Player.Ultimate_Points = 0;
		Skip If(!Is Duplicating(Event Player), 1);
		Event Player.Ultimate_Cost /= 5;
		Wait Until(Is True For Any(Array(Event Player.Stored_Hero != Hero(D.Va), Is In Alternate Form(Event Player) != True),
			Current Array Element), 99999);
		Wait(0.100, Ignore Condition);
		Abort If(Event Player.Stored_Hero != Hero(D.Va));
		Event Player.Ultimate_Cost = Global.Ultimate_Costs[Index Of Array Value(Global.All_Heros, Hero(D.Va))];
		Event Player.Ultimate_Points = Event Player.Stored_Mech_Points;
		Skip If(!Is Duplicating(Event Player), 1);
		Event Player.Ultimate_Cost /= 5;
	}
}

rule("Charge : Update")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) != Event Player.Ultimate_Points / (Event Player.Ultimate_Cost / 100);
	}

	actions
	{
		Set Ultimate Charge(Event Player, Event Player.Ultimate_Points / (Event Player.Ultimate_Cost / 100));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Charge : Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Attacker.Ultimate_Points < Attacker.Ultimate_Cost;
		Is Using Ultimate(Attacker) != True;
		Team Of(Attacker) != Team Of(Victim);
		Event Ability != Button(Ultimate);
	}

	actions
	{
		Abort If(Victim.Stored_Health - Max Health(Victim) * Normalized Health(Victim) <= 0);
		Attacker.Ultimate_Points += Min(Min((Victim.Stored_Health - Max Health(Victim) * Normalized Health(Victim)) * (Array Contains(
			All Tank Heroes, Victim.Stored_Hero) ? 0.700 : 1), Attacker.Ultimate_Cost - Attacker.Ultimate_Points), Event Damage);
		Victim.Valid_Healing += Event Damage;
	}
}

rule("Charge : Healing (Others)")
{
	event
	{
		Player Dealt Healing;
		All;
		All;
	}

	conditions
	{
		Healer.Ultimate_Points < Healer.Ultimate_Cost;
		Is Using Ultimate(Healer) != True;
		Event Ability != Null;
		Event Ability != Button(Ultimate);
		Healee != Healer;
		Event Was Health Pack != True;
		Healee.Valid_Healing > 0;
	}

	actions
	{
		Healer.Ultimate_Points += Min(Min(Event Healing * (Array Contains(All Tank Heroes, Healee.Stored_Hero) ? 0.700 : 1),
			Healee.Valid_Healing), Healer.Ultimate_Cost - Healer.Ultimate_Points);
	}
}

rule("Charge : Healing (Self)")
{
	event
	{
		Player Dealt Healing;
		All;
		All;
	}

	conditions
	{
		Healer.Ultimate_Points < Healer.Ultimate_Cost;
		Is Using Ultimate(Healer) != True;
		Event Ability != Null;
		Event Ability != Button(Ultimate);
		Healee == Healer;
		Event Was Health Pack != True;
		Healee.Valid_Healing > 0;
	}

	actions
	{
		Abort If(Player Hero Stat(Event Player, Hero Of(Event Player), Self Healing) == Event Player.Stored_Self_Healing_Stat);
		Healer.Ultimate_Points += Min(Min((Player Hero Stat(Event Player, Hero Of(Event Player), Self Healing)
			- Event Player.Stored_Self_Healing_Stat) * (Array Contains(All Tank Heroes, Healee.Stored_Hero) ? 0.700 : 1),
			Healee.Valid_Healing), Healer.Ultimate_Cost - Healer.Ultimate_Points);
		Event Player.Stored_Self_Healing_Stat = Player Hero Stat(Event Player, Hero Of(Event Player), Self Healing);
	}
}

rule("Subtract : Vaild Healing")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	actions
	{
		Healee.Valid_Healing -= Min(Event Healing, Event Player.Valid_Healing);
	}
}

rule("Reset : Vaild Healing")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Event Player.Valid_Healing = 0;
	}
}

rule("Store Health")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Event Player.Stored_Health != Health(Event Player);
	}

	actions
	{
		Wait(0.010, Ignore Condition);
		Event Player.Stored_Health = Max Health(Event Player) * Normalized Health(Event Player);
	}
}

rule("Reset Ultimate Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Using Ultimate(Event Player) || Is Duplicating(Event Player)) == True;
	}

	actions
	{
		Event Player.Ultimate_Points = 0;
	}
}

disabled rule("-------------------------------------------- Ultimate Generation Replica ----------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}
