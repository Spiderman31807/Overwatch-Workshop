settings
{
	main
	{
		Description: "All Workshop Settings Defaults, Are The Defaults\nFor The Modes Without Said Settings.\n\nAfter Touching The Objective, It'll Store That\nYou've Touched It Until An Enemy Player Does."
		Mode Name: "Auto Objective - MX2EW"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: After A Game
		Return To Lobby: Never
	}

	modes
	{
		Assault

		Control

		Escort

		Flashpoint

		Hybrid

		Push

		General
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
		}
	}

	workshop
	{
		Icon Scale: 1.000
		Icon Spacing Between Icons: 0.400
		Icon Spacing From Objective: 3.000
		Match​ Time: 600
	}

	extensions
	{
		Spawn More Dummy Bots
	}
}

variables
{
	global:
		0: PlayersT1
		1: PlayersT2
		2: Icon_Settings
		3: Icon_List
		4: Objective_Pos
		5: Flashpoint_Index
		6: Team_Last_Touched

	player:
		0: Is_Touching
		1: Dummy
}

rule("Setup Match")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Team_Last_Touched = Null;
		Global.PlayersT1 = Empty Array;
		Global.PlayersT2 = Empty Array;
		Global.Icon_Settings = Array(Workshop Setting Combo(Custom String("Auto Objective"), Custom String("Hero Icons Above Objective"),
			0, Array(Custom String("While Helping, In Any Way"), Custom String("While Helping, With Auto Objective"), Custom String(
			"While Helping, Without Auto Objective"), Custom String("Never")), 0), Workshop Setting Real(Custom String("Auto Objective"),
			Custom String("Icon Spacing, From Objective"), 3, -10, 10, 3), Workshop Setting Real(Custom String("Auto Objective"),
			Custom String("Icon Spacing, Between Icons"), 0.400, 0.100, 3, 2), Workshop Setting Real(Custom String("Auto Objective"),
			Custom String("Icon Scale"), 1, 0.100, 3, 1));
		Global.Icon_List = Empty Array;
		Wait Until(Is Assembling Heroes, 99999);
		If(Current Game Mode == Game Mode(Assault));
			Set Match Time(Workshop Setting Integer(Custom String("Match (Assault)"), Custom String("Assemble Time​"), 30, 0, 120, 0));
			Wait Until(Is In Setup, 99999);
			Set Match Time(Workshop Setting Integer(Custom String("Match (Assault)"), Custom String("Setup Time​"), 45, 0, 120, 1));
			Wait Until(Is Game In Progress, 99999);
			Set Match Time(Workshop Setting Integer(Custom String("Match (Assault)"), Custom String("Match​ Time​"), 240, 0, 900, 2));
		Else If(Current Game Mode == Game Mode(Control));
			Set Match Time(Workshop Setting Integer(Custom String("Match (Control)"), Custom String("Assemble Time"), 30, 0, 120, 0));
			Wait Until(Is In Setup, 99999);
			Set Match Time(Workshop Setting Integer(Custom String("Match (Control)"), Custom String("Setup Time"), 30, 0, 120, 1));
			While(!Is Match Complete);
				Wait Until(Is Game In Progress, 99999);
				Set Match Time(Workshop Setting Integer(Custom String("Match (Control)"), Custom String("Unlock​ Time​"), 30, 0, 120, 2));
				Wait Until(Is Between Rounds, 99999);
				Wait Until(Is Control Mode Point Locked, 99999);
			End;
		Else If(Current Game Mode == Game Mode(Escort));
			Set Match Time(Workshop Setting Integer(Custom String("Match (Escort)"), Custom String("Assemble​ Time"), 30, 0, 120, 0));
			Wait Until(Is In Setup, 99999);
			Set Match Time(Workshop Setting Integer(Custom String("Match (Escort)"), Custom String("Setup​ Time"), 45, 0, 120, 1));
			Wait Until(Is Game In Progress, 99999);
			Set Match Time(Workshop Setting Integer(Custom String("Match (Escort)"), Custom String("Match​​ Time"), 300, 0, 900, 2));
		Else If(Current Game Mode == Game Mode(Flashpoint));
			Set Match Time(Workshop Setting Integer(Custom String("Match (Flashpoint)"), Custom String("Assemble​ Time​"), 30, 0, 120, 0));
			Wait Until(Is In Setup, 99999);
			Set Match Time(Workshop Setting Integer(Custom String("Match (Flashpoint)"), Custom String("Setup​ Time​"), 30, 0, 120, 1));
			Wait Until(Is Game In Progress, 99999);
			While(!Is Match Complete);
				Set Match Time(Workshop Setting Integer(Custom String("Match (Flashpoint)"), Custom String("Unlock​ Time"), 30, 0, 120, 2));
				Global.Flashpoint_Index = Objective Index;
				Wait Until(Objective Index != Global.Flashpoint_Index, 99999);
			End;
		Else If(Current Game Mode == Game Mode(Hybrid));
			Set Match Time(Workshop Setting Integer(Custom String("Match (Hybird)"), Custom String("​Assemble​ Time"), 30, 0, 120, 0));
			Wait Until(Is In Setup, 99999);
			Set Match Time(Workshop Setting Integer(Custom String("Match (Hybird)"), Custom String("​Setup​ Time"), 45, 0, 120, 1));
			Wait Until(Is Game In Progress, 99999);
			Set Match Time(Workshop Setting Integer(Custom String("Match (Hybird)"), Custom String("​Match​ Time"), 300, 0, 900, 2));
		Else If(Current Game Mode == Game Mode(Push));
			Set Match Time(Workshop Setting Integer(Custom String("Match (Push)"), Custom String("​Assemble​ Time​"), 40, 0, 120, 0));
			Wait Until(Is In Setup, 99999);
			Set Match Time(Workshop Setting Integer(Custom String("Match (Push)"), Custom String("​Setup​ Time​"), 25, 0, 120, 1));
			Wait Until(Is Game In Progress, 99999);
			Set Match Time(Workshop Setting Integer(Custom String("Match (Push)"), Custom String("Match​ Time"), 450, 0, 900, 2));
		End;
	}
}

rule("Objective Position")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Is In Setup || Is Game In Progress) == True;
	}

	actions
	{
		If(Is True For Any(Array(Game Mode(Escort), Game Mode(Push)), Current Game Mode == Current Array Element));
			While(!Is Match Complete);
				"DO NOT REPLACE WITH CHASE: It Brakes Client Side Stuff (Huds, Icons, Effects, Etc)"
				Global.Objective_Pos = Update Every Frame(Payload Position);
				Wait Until(Global.Objective_Pos != Update Every Frame(Payload Position), 99999);
			End;
		Else If(Current Game Mode == Game Mode(Hybrid));
			Global.Objective_Pos = Objective Position(0);
			Wait Until(Is Objective Complete(0), 99999);
			Global.Team_Last_Touched = Null;
			While(!Is Match Complete);
				"DO NOT REPLACE WITH CHASE: It Brakes Client Side Stuff (Huds, Icons, Effects, Etc)"
				Global.Objective_Pos = Update Every Frame(Payload Position);
				Wait Until(Global.Objective_Pos != Update Every Frame(Payload Position), 99999);
			End;
		Else If(Current Game Mode == Game Mode(Assault));
			Global.Objective_Pos = Objective Position(0);
			Wait Until(Is Objective Complete(0), 99999);
			Global.Team_Last_Touched = Null;
			Global.Objective_Pos = Objective Position(1);
		Else If(Current Game Mode == Game Mode(Control));
			While(!Is Match Complete);
				Global.Objective_Pos = Objective Position(Objective Index);
				Wait Until(Is Between Rounds, 99999);
				Wait Until(!Is Between Rounds, 99999);
				Global.Team_Last_Touched = Null;
			End;
		Else If(Current Game Mode == Game Mode(Flashpoint));
			While(!Is Match Complete);
				Global.Objective_Pos = Objective Position(Objective Index);
				Wait Until(Objective Index != Global.Flashpoint_Index, 99999);
				Global.Team_Last_Touched = Null;
			End;
		End;
	}
}

rule("Team 1 Touched")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(Global.PlayersT1, Is On Objective(Current Array Element)) == True;
		Is True For All(Global.PlayersT2, Is On Objective(Current Array Element)) != True;
		Global.PlayersT1 != Empty Array;
		Global.PlayersT2 != Empty Array;
		Global.Team_Last_Touched != Team 1;
	}

	actions
	{
		Global.Team_Last_Touched = Team 1;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Team 2 Touched")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(Global.PlayersT2, Is On Objective(Current Array Element)) == True;
		Is True For All(Global.PlayersT1, Is On Objective(Current Array Element)) != True;
		Global.PlayersT2 != Empty Array;
		Global.PlayersT1 != Empty Array;
		Global.Team_Last_Touched != Team 2;
	}

	actions
	{
		Global.Team_Last_Touched = Team 2;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Both Touched")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(Global.PlayersT1, Is On Objective(Current Array Element)) == True;
		Is True For Any(Global.PlayersT2, Is On Objective(Current Array Element)) == True;
		Global.PlayersT1 != Empty Array;
		Global.PlayersT2 != Empty Array;
		Global.Team_Last_Touched != Null;
	}

	actions
	{
		Global.Team_Last_Touched = Null;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Only Team Touched")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		"Cant Get Other Last Team Touched, To Work While One Is Team Is Empty. This Fixs That."
		Is True For Any(Global.PlayersT1 == Empty Array ? Global.PlayersT2 : Global.PlayersT1, Is On Objective(Current Array Element))
			== True;
		Global.Team_Last_Touched != (Global.PlayersT1 == Empty Array ? Team 2 : Team 1);
		(Global.PlayersT1 == Empty Array || Global.PlayersT2 == Empty Array) == True;
	}

	actions
	{
		Global.Team_Last_Touched = Global.PlayersT1 == Empty Array ? Team 2 : Team 1;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Is Team 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		Skip If(Array Contains(Global.PlayersT1, Event Player), 1);
		Modify Global Variable(PlayersT1, Append To Array, Event Player);
		Modify Global Variable(PlayersT2, Remove From Array By Value, Event Player);
	}
}

rule("Is Team 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		Skip If(Array Contains(Global.PlayersT2, Event Player), 1);
		Modify Global Variable(PlayersT2, Append To Array, Event Player);
		Modify Global Variable(PlayersT1, Remove From Array By Value, Event Player);
	}
}

rule("Setup Player")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		Create In-World Text(Filtered Array(All Players(All Teams), Array Contains(Global.Icon_List, Event Player)), Hero Icon String(
			Hero Of(Event Player)), Global.Objective_Pos + Vector(0, Global.Icon_Settings[1] + Index Of Array Value(Global.Icon_List,
			Event Player) * Global.Icon_Settings[2], 0), Global.Icon_Settings[3], Clip Against Surfaces, Visible To Position and String,
			Color(White), Default Visibility);
		Create In-World Text(Filtered Array(All Players(Team Of(Event Player)), Array Contains(Global.Icon_List, Event Player)
			&& Distance Between(Current Array Element, Global.Objective_Pos) <= 20 && !Is In Line of Sight(Eye Position(
			Current Array Element), Global.Objective_Pos + Vector(0, Global.Icon_Settings[1] + Index Of Array Value(Global.Icon_List,
			Event Player) * Global.Icon_Settings[2], 0), Barriers Do Not Block LOS)), Hero Icon String(Hero Of(Event Player)),
			Global.Objective_Pos + Vector(0, Global.Icon_Settings[1] + Index Of Array Value(Global.Icon_List, Event Player)
			* Global.Icon_Settings[2], 0), Global.Icon_Settings[3], Do Not Clip, Visible To Position and String, Color(White),
			Default Visibility);
	}
}

rule("Add To Icon List")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array(Event Player.Is_Touching || Is On Objective(Event Player), Event Player.Is_Touching && !Is On Objective(Event Player),
			Is On Objective(Event Player), False)[Global.Icon_Settings[0]] == True;
	}

	actions
	{
		Modify Global Variable(Icon_List, Append To Array, Event Player);
		Wait Until(Array(Event Player.Is_Touching || Is On Objective(Event Player), Event Player.Is_Touching && !Is On Objective(
			Event Player), Is On Objective(Event Player), False)[Global.Icon_Settings[0]] != True, 99999);
		Modify Global Variable(Icon_List, Remove From Array By Value, Event Player);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Touched Objective")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Team_Last_Touched == Team Of(Event Player);
		Is Dummy Bot(Event Player) != True;
		Update Every Frame(Is On Objective(Event Player)) == True;
	}

	actions
	{
		Event Player.Is_Touching = True;
		Wait Until(Global.Team_Last_Touched != Team Of(Event Player), 99999);
		Event Player.Is_Touching = False;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Spawn Objective Dummy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Team_Last_Touched == Team Of(Event Player);
		Is Dummy Bot(Event Player) != True;
		Update Every Frame(Is On Objective(Event Player)) != True;
		Event Player.Is_Touching == True;
	}

	actions
	{
		Create Dummy Bot(Hero Of(Event Player), Team Of(Event Player), Slot Of(Event Player) + Number Of Slots(Team Of(Event Player)),
			Position Of(Event Player), Facing Direction Of(Event Player));
		Event Player.Dummy = Last Created Entity;
		Start Forcing Dummy Bot Name(Event Player.Dummy, Custom String("{0} (Objective)", Event Player));
		Wait Until(!Entity Exists(Event Player.Dummy), 99999);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Destroy Objective Dummy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Update Every Frame(Is On Objective(Event Player)) == True;
		Entity Exists(Event Player.Dummy) == True;
	}

	actions
	{
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player.Dummy));
	}
}

rule("Setup Objective Dummy")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		"Remove Footsteps"
		Set Gravity(Event Player, 0);
		Set Invisible(Event Player, All);
		Set Status(Event Player, Null, Phased Out, 9999);
		Disable Movement Collision With Players(Event Player);
		Start Forcing Player Position(Event Player, Global.Objective_Pos, True);
		Wait(0.250, Ignore Condition);
		Wait Until(Global.Team_Last_Touched != Team Of(Event Player), 99999);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
	}
}
