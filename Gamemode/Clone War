settings
{
	main
	{
		Description: "1v1 - 5 Clones\n2v2 - 2 Clones\n3v3 - 1 Clones\n4v4 - 1 Clone (Not Recommended)\n5v5 - Not Recommened\n\nRecommned 4 Players In 2v2, 2 Clones Each\n\nIf Clone Is Futher Than 12 Meters Or Lost LOS\nIt Will Try To Pathfind To Its Owner\n\nPathfinding Is Fully Dynamic No Map Layout\nIs Needed, So Any Is Map Supported\n(The Exchange Being That Pathfinding Is Worse)"
		Mode Name: "Clone Wars - By Spiderman318"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
	}

	modes
	{
		Assault
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Bounty Hunter
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Capture the Flag
		{
			Tank Role Passive Health Bonus: Disabled
		}

		Control
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Deathmatch
		{
			Tank Role Passive Health Bonus: Disabled
		}

		Escort
		{
			Tank Role Passive Health Bonus: Disabled
		}

		Hybrid
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Practice Range
		{
			Tank Role Passive Health Bonus: Disabled
		}

		Push
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Skirmish
		{
			Tank Role Passive Health Bonus: Disabled
		}

		disabled Team Deathmatch
		{
			Tank Role Passive Health Bonus: Disabled
		}

		General
		{
			Game Mode Start: Immediately
			Hero Limit: Off
		}
	}

	heroes
	{
		General
		{
			Ultimate Generation: 10%
			Ultimate Generation - Combat: 0%
			Ultimate Generation - Passive: 0%

			disabled heroes
			{
				Illari
				Mauga
			}
		}
	}

	workshop
	{
		Amount: 2
		Conjoin The Clone And Players Health: Off
		FOV LeftRight Step Amount: 20
		Max Drop Height: 8.000
		Reaction Speed: 0.500
	}

	extensions
	{
		Spawn More Dummy Bots
	}
}

variables
{
	global:
		0: Clone_Amount
		1: Clone_Count_Ultimate
		2: Vision_Range
		3: Y_Vision_Fov
		4: X_Vision_Fov
		5: Y_Skip_Amount
		6: X_Skip_Amount
		7: Ultimate_Cost
		8: All_Heros
		9: Conjoin_Health
		10: Death_Swap
		11: Ability1_Binding_Type
		12: Abiltity2_Binding_Type
		13: Secondary_Binding_Type
		14: Binding_Types
		15: Attach_Clones
		16: Attach_Pattern_Current
		17: Attach_Pattern_Array

	player:
		0: Clone_Array
		1: Owner
		2: Index
		3: Ultimate_Charge
		4: Ultimate_Cost
		5: Vaild_Healing_Charge
		6: Current_Node
		7: Node_Options
		8: Visible_Locations_Temp
		9: Visible_Locations_Output
		10: Y_Visible_Location_Index
		11: X_Visible_Location_Index
		12: Hero
		13: Saved_Ultimate_Charge
		14: Swaping_Clone
		15: Clone_Stats
		16: Ability1_Binding_Type
		17: Ability2_Binding_Type
		18: Secondary_Binding_Type
		19: Weapon
}

subroutines
{
	0: Get_Stats
	1: Replace_Stats
	2: Refresh_Conjoined_Health
}

rule("Global")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Clone_Amount = Workshop Setting Integer(Custom String("Clone"), Custom String("Amount"), 5, 1, 5, 0);
		Global.Clone_Count_Ultimate = Workshop Setting Toggle(Custom String("Clone"), Custom String(
			"Multiply The Ultimate Cost By The Clone Amount"), True, 1);
		Global.Vision_Range = Workshop Setting Integer(Custom String("AI Pathfinding"), Custom String("Vision Range"), 6, 3, 10, 0);
		Global.Y_Vision_Fov = Workshop Setting Integer(Custom String("AI Pathfinding"), Custom String("Field Of Vision Up/Down"), 1, 1,
			180, 1);
		Global.X_Vision_Fov = Workshop Setting Integer(Custom String("AI Pathfinding"), Custom String("Field Of Vision Left/Right"), 360,
			1, 360, 2);
		Global.Y_Skip_Amount = Workshop Setting Integer(Custom String("AI Pathfinding"), Custom String("FOV Up/Down Step Amount"), 1, 1,
			90, 3);
		Global.X_Skip_Amount = Workshop Setting Integer(Custom String("AI Pathfinding"), Custom String("FOV Left/Right Step Amount"), 10,
			1, 180, 4);
		Global.All_Heros = Array(Hero(Ana), Hero(Ashe), Hero(Baptiste), Hero(Bastion), Hero(Brigitte), Hero(Cassidy), Hero(D.Va), Hero(
			Doomfist), Hero(Echo), Hero(Genji), Hero(Hanzo), Hero(Junker Queen), Hero(Junkrat), Hero(Kiriko), Hero(Lifeweaver), Hero(
			Lúcio), Hero(Mei), Hero(Mercy), Hero(Moira), Hero(Orisa), Hero(Pharah), Hero(Ramattra), Hero(Reaper), Hero(Reinhardt), Hero(
			Roadhog), Hero(Sigma), Hero(Sojourn), Hero(Soldier: 76), Hero(Sombra), Hero(Symmetra), Hero(Torbjörn), Hero(Tracer), Hero(
			Widowmaker), Hero(Winston), Hero(Wrecking Ball), Hero(Zarya), Hero(Zenyatta));
		Global.Ultimate_Cost = Array(2100, 2240, 2310, 2310, 2550, 1850, 1540, 1680, 1691, 1932, 1680, 2415, 1925, 2300, 2008, 2420, 1750,
			1820, 2660, 1950, 2000, 1880, 1930, 1650, 2420, 2100, 2100, 2310, 1400, 1680, 2142, 1260, 1540, 1850, 1675, 2270, 2310);
		Global.Conjoin_Health = Workshop Setting Toggle(Custom String("Clone"), Custom String("Conjoin The Clone And Players Health"),
			True, 2);
		Global.Death_Swap = Workshop Setting Toggle(Custom String("Clone"), Custom String(
			"Swap With Clone On Death (Disabled If Conjoined Health Enabled)"), True, 2);
		Global.Binding_Types = Array(Custom String("Default"), Custom String("Press After Using"), Custom String("Ignore Using Ability"),
			Custom String("Copy Alternative Form"));
		Global.Ability1_Binding_Type = Array(Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String(
			"Ignore Using Ability"), Custom String("Default"), Custom String("Default"), Custom String("Press After Using"), Custom String(
			"Press After Using"), Custom String("Press After Using"), Custom String("Default"), Custom String("Press After Using"),
			Custom String("Default"), Custom String("Ignore Using Ability"), Custom String("Default"), Custom String("Default"),
			Custom String("Copy Alternative Form"), Custom String("Press After Using"), Custom String("Default"), Custom String("Default"),
			Custom String("Press After Using"), Custom String("Default"), Custom String("Ignore Using Ability"), Custom String(
			"Press After Using"), Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"),
			Custom String("Press After Using"), Custom String("Press After Using"), Custom String("Default"), Custom String(
			"Ignore Using Ability"), Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String(
			"Copy Alternative Form"), Custom String("Default"), Custom String("Ignore Using Ability"));
		Global.Abiltity2_Binding_Type = Array(Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String(
			"Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String("Press After Using"),
			Custom String("Press After Using"), Custom String("Ignore Using Ability"), Custom String("Press After Using"), Custom String(
			"Default"), Custom String("Ignore Using Ability"), Custom String("Default"), Custom String("Default"), Custom String(
			"Copy Alternative Form"), Custom String("Press After Using"), Custom String("Default"), Custom String("Press After Using"),
			Custom String("Press After Using"), Custom String("Default"), Custom String("Ignore Using Ability"), Custom String("Default"),
			Custom String("Ignore Using Ability"), Custom String("Default"), Custom String("Default"), Custom String("Default"),
			Custom String("Default"), Custom String("Ignore Using Ability"), Custom String("Default"), Custom String("Default"),
			Custom String("Default"), Custom String("Ignore Using Ability"), Custom String("Default"), Custom String("Default"),
			Custom String("Default"), Custom String("Ignore Using Ability"));
		Skip If(!Global.Conjoin_Health, 1);
		Global.Death_Swap = False;
		Global.Attach_Clones = Workshop Setting Toggle(Custom String("Clone"), Custom String(
			"Attach Clones To Owner (Force Position Near Owner At All Times)"), False, 1);
		Global.Attach_Pattern_Array = Array(Vector(2, 0, 0), Array(Vector(2, 0, 0), Vector(-2, 0, 0)), Array(Vector(2, 0, 0), Vector(-1, 0,
			1.732), Vector(-1, 0, -1.732)), Array(Vector(2, 0, 0), Vector(0, 0, 2), Vector(-2, 0, 0), Vector(0, 0, -2)), Array(Vector(2, 0,
			0), Vector(1, 0, 1.732), Vector(-1, 0, 1.732), Vector(-2, 0, 0), Vector(-1, 0, -1.732)));
		Global.Attach_Pattern_Current = Global.Attach_Pattern_Array[Global.Clone_Amount - 1];
		Global.Secondary_Binding_Type = Array(Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String(
			"Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"),
			Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String("Ignore Using Ability"),
			Custom String("Default"), Custom String("Default"), Custom String("Alternative Weapon"), Custom String("Default"),
			Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String(
			"Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"),
			Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String(
			"Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"), Custom String("Default"),
			Custom String("Default"), Custom String("Default"), Custom String("Default"));
		Wait Until(Is Assembling Heroes, 99999);
		Set Match Time(10);
	}
}

rule("Refresh Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Has Spawned(Event Player) == True;
		Event Player.Hero != (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player));
		Count Of(Event Player.Clone_Array) == Global.Clone_Amount;
	}

	actions
	{
		If(Is Duplicating(Event Player));
			Event Player.Hero = Hero Being Duplicated(Event Player);
			Event Player.Ultimate_Cost = Global.Ultimate_Cost[Index Of Array Value(Global.All_Heros, Event Player.Hero)];
			Skip If(!Global.Clone_Count_Ultimate, 1);
			Event Player.Ultimate_Cost *= Global.Clone_Amount + 1;
			Event Player.Ultimate_Cost = Event Player.Ultimate_Cost * 0.200;
			Event Player.Ultimate_Charge = 0;
		Else;
			Event Player.Hero = Hero Of(Event Player);
			Event Player.Ultimate_Cost = Global.Ultimate_Cost[Index Of Array Value(Global.All_Heros, Event Player.Hero)];
			Skip If(!Global.Clone_Count_Ultimate, 1);
			Event Player.Ultimate_Cost *= Global.Clone_Amount + 1;
			Event Player.Ultimate_Charge = Min(Event Player.Ultimate_Charge, Event Player.Ultimate_Cost * 0.300);
		End;
		Event Player.Ability1_Binding_Type = Global.Ability1_Binding_Type[Index Of Array Value(Global.All_Heros, Event Player.Hero)];
		Event Player.Ability2_Binding_Type = Global.Abiltity2_Binding_Type[Index Of Array Value(Global.All_Heros, Event Player.Hero)];
		Event Player.Secondary_Binding_Type = Global.Secondary_Binding_Type[Index Of Array Value(Global.All_Heros, Event Player.Hero)];
	}
}

rule("Setup Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		If(Is Dummy Bot(Event Player));
			Start Forcing Dummy Bot Name(Event Player, Custom String("{0} Clone {1}", Event Player.Owner, Index Of Array Value(
				Event Player.Owner.Clone_Array, Event Player) + 1));
			Start Scaling Player(Event Player, 0.900, True);
			Start Facing(Event Player, Update Every Frame(Direction Towards(Eye Position(Event Player), Ray Cast Hit Player(Eye Position(
				Event Player.Owner), Eye Position(Event Player.Owner) + Facing Direction Of(Event Player.Owner) * 99, All Living Players(
				Opposite Team Of(Team Of(Event Player.Owner))), Event Player.Owner, False) == Null ? Ray Cast Hit Position(Eye Position(
				Event Player.Owner), Eye Position(Event Player.Owner) + Facing Direction Of(Event Player.Owner) * 99, Null, Event Player,
				False) : Eye Position(Ray Cast Hit Player(Eye Position(Event Player.Owner), Eye Position(Event Player.Owner)
				+ Facing Direction Of(Event Player.Owner) * 99, All Living Players(Opposite Team Of(Team Of(Event Player.Owner))),
				Event Player.Owner, False)))), 999, To World, Direction and Turn Rate);
			Skip If(!Global.Conjoin_Health, 1);
			Start Healing Modification(Append To Array(Remove From Array(Event Player.Owner.Clone_Array, Event Player), Event Player.Owner),
				Event Player, 0, None);
			Wait(0.500, Ignore Condition);
			Skip If(!Global.Attach_Clones, 1);
			Attach Players(Event Player, Event Player.Owner, Global.Attach_Pattern_Current[Index Of Array Value(Event Player.Owner.Clone_Array,
				Event Player)]);
		Else;
			Chase Player Variable At Rate(Event Player, Ultimate_Charge, Event Player.Ultimate_Cost, 5 * (Is Using Ultimate(Event Player)
				? 0 : (Global.Clone_Amount ? Count Of(Event Player.Clone_Array) : 1)), Destination and Rate);
			Create HUD Text(Event Player, Null, Null, Custom String("\n\n\nClones"), Left, 0, Color(White), Color(White), Color(White),
				Visible To and String, Default Visibility);
			Event Player.Clone_Array = Empty Array;
			For Player Variable(Event Player, Index, 0, Global.Clone_Amount, 1);
				Create Dummy Bot(Hero Of(Event Player), Team Of(Event Player), -1, Random Value In Array(Spawn Points(Team Of(Event Player))),
					Facing Direction Of(Event Player));
				Modify Player Variable(Event Player, Clone_Array, Append To Array, Last Created Entity);
				Last Of(Event Player.Clone_Array).Owner = Event Player;
				Skip If(Global.Attach_Clones, 1);
				Start Throttle In Direction(Last Of(Event Player.Clone_Array), Update Every Frame(World Vector Of(Throttle Of(Event Player),
					Event Player, Rotation)), Update Every Frame(Magnitude Of(Throttle Of(Event Player))), To World, Replace existing throttle,
					Direction and Magnitude);
				Create HUD Text(Event Player, Null, Null, Custom String("{0} : HP {1}% : {2}m Away", Custom String("{0} {1}", Hero Icon String(
					Event Player.Hero), Evaluate Once(Event Player.Index + 1)), Round To Integer(Normalized Health(
					Event Player.Clone_Array[Evaluate Once(Event Player.Index)]) * 100, Up), Round To Integer(Distance Between(Event Player,
					Event Player.Clone_Array[Evaluate Once(Event Player.Index)]), Up)), Left, 1, Color(White), Color(White), Color(White), String,
					Default Visibility);
			End;
			Skip If(!Global.Conjoin_Health, 1);
			Start Healing Modification(Event Player.Clone_Array, Event Player, 0, None);
			Start Scaling Player(Event Player, 1.100, True);
		End;
		Skip If(!Global.Conjoin_Health, 6);
		Set Max Health(Event Player, 100 * (Global.Clone_Amount + 1));
		If(Hero Of(Event Player) == Hero(D.Va));
			Start Forcing Player To Be Hero(Event Player, Hero(Ana));
			Start Forcing Player To Be Hero(Event Player, Hero(D.Va));
			Stop Forcing Player To Be Hero(Event Player);
		End;
	}
}

rule("Pathfind Melee/Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Attach_Clones != True;
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Magnitude Of(Throttle Of(Event Player)) > 0;
		Speed Of(Event Player) < 2;
		(!Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.Owner), Barriers Do Not Block LOS) || Distance Between(
			Event Player, Event Player.Owner) > 12) == True;
	}

	actions
	{
		Wait(Max(Server Load / 1000, 0.250), Abort When False);
		Press Button(Event Player, Button(Jump));
		Wait(Max(Server Load / 1000, 0.250), Abort When False);
		Press Button(Event Player, Button(Melee));
		Loop If Condition Is True;
	}
}

rule("Current Node")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Attach_Clones != True;
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		(!Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.Owner), Barriers Do Not Block LOS) || Distance Between(
			Event Player, Event Player.Owner) > 12) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Y Component Of(Position Of(Event Player)) + 2.750 >= Y Component Of(Event Player.Owner)
			&& Is In Line of Sight(Eye Position(Event Player), Event Player.Owner, Barriers Do Not Block LOS) ? (Distance Between(
			Event Player, Event Player.Owner) < 2 ? Direction Towards(Event Player.Owner, Event Player) : Direction Towards(Event Player,
			Event Player.Owner)) : Direction Towards(Position Of(Event Player), Event Player.Current_Node), (Distance Between(Event Player,
			Event Player.Owner) < 2 || Distance Between(Event Player, Event Player.Owner) > 2) && Is In Line of Sight(Eye Position(
			Event Player), Event Player.Owner, Barriers Do Not Block LOS) ? 1 : (Is In Line of Sight(Eye Position(Event Player),
			Event Player.Owner, Barriers Do Not Block LOS) ? 0 : 1), To World, Replace existing throttle, Direction and Magnitude);
		While(Is Dummy Bot(Event Player) == True && Is Alive(Event Player) == True && Has Spawned(Event Player) == True && (
			!Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.Owner), Barriers Do Not Block LOS)
			|| Distance Between(Event Player, Event Player.Owner) > 5) == True);
			Event Player.Visible_Locations_Temp = Empty Array;
			For Player Variable(Event Player, Y_Visible_Location_Index, Global.Y_Vision_Fov * -0.500, Global.Y_Vision_Fov * 0.500,
				Global.Y_Skip_Amount);
				For Player Variable(Event Player, X_Visible_Location_Index, Global.X_Vision_Fov * -0.500, Global.X_Vision_Fov * 0.500,
					Global.X_Skip_Amount);
					Modify Player Variable(Event Player, Visible_Locations_Temp, Append To Array, Ray Cast Hit Position(Eye Position(Event Player),
						Eye Position(Event Player) + Direction From Angles(Facing Direction Of(Event Player) + Event Player.X_Visible_Location_Index,
						Event Player.Y_Visible_Location_Index) * (Global.Vision_Range + 0.300), Null, Event Player, False) - Direction From Angles(
						Horizontal Facing Angle Of(Event Player) + Event Player.X_Visible_Location_Index, Event Player.Y_Visible_Location_Index)
						* 0.300);
				End;
			End;
			Event Player.Visible_Locations_Output = Event Player.Visible_Locations_Temp;
			Event Player.Node_Options = Filtered Array(Event Player.Visible_Locations_Output, Y Component Of(Position Of(Event Player))
				+ 2.750 >= Y Component Of(Current Array Element));
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
				Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
				Event Player), Current Array Element) / 1.200), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 1.200) + Vector(0, -99, 0),
				Null, All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 1.200)) < Max(Y Component Of(
				Position Of(Event Player)) + 1 - Y Component Of(Current Array Element), 8));
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
				Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
				Event Player), Current Array Element) / 2), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 2) + Vector(0, -99, 0), Null,
				All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 2)) < Max(Y Component Of(
				Position Of(Event Player)) + 1 - Y Component Of(Current Array Element), 8));
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
				Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
				Event Player), Current Array Element) / 4), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 4) + Vector(0, -99, 0), Null,
				All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 4)) < Max(Y Component Of(
				Position Of(Event Player)) + 1 - Y Component Of(Current Array Element), 8));
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Current Array Element,
				Ray Cast Hit Position(Current Array Element, Current Array Element - Vector(0, 99, 0), Null, Event Player, False)) <= Max(
				Workshop Setting Real(Custom String("AI Pathfinding"), Custom String("Max Drop Height"), 8, 1.200, 20, 0), 2.750));
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Current Array Element,
				Ray Cast Hit Position(Current Array Element, Current Array Element - Vector(0, 99, 0), Null, Event Player, False)) >= 0.500);
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Event Player, Current Array Element) > 2);
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Is In Line of Sight(World Vector Of(Vector(0, 1.550, 0),
				Event Player, Rotation And Translation), Current Array Element, Barriers Do Not Block LOS));
			Event Player.Node_Options = Sorted Array(Event Player.Node_Options, Distance Between(Event Player, Current Array Element)
				+ Distance Between(Event Player.Owner, Current Array Element));
			Event Player.Node_Options = Sorted Array(Event Player.Node_Options, Current Array Index + (Distance Between(Eye Position(
				Event Player), Current Array Element) >= Global.Vision_Range * 0.900 ? 0 : 1000));
			Event Player.Current_Node = First Of(Event Player.Node_Options);
			Wait(Max(Server Load / 1000, Workshop Setting Real(Custom String("AI Pathfinding"), Custom String("Reaction Speed"), 0.100, 0.010,
				5, 0)), Ignore Condition);
		End;
		Start Throttle In Direction(Event Player, Update Every Frame(World Vector Of(Throttle Of(Event Player.Owner), Event Player.Owner,
			Rotation)), Update Every Frame(Magnitude Of(Throttle Of(Event Player.Owner))), To World, Replace existing throttle,
			Direction and Magnitude);
	}
}

rule("Dummy Bot : Change Weapon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Weapon(Event Player) != Event Player.Weapon;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Weapon(Event Player.Clone_Array, Weapon(Event Player));
		Event Player.Weapon = Weapon(Event Player);
	}
}

rule("Dummy Bot : Set Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Event Player.Owner.Hero;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Start Forcing Player To Be Hero(Event Player, Event Player.Owner.Hero);
		Skip If(!Global.Conjoin_Health, 1);
		Call Subroutine(Refresh_Conjoined_Health);
		Skip If(!Global.Attach_Clones, 1);
		Attach Players(Event Player, Event Player.Owner, Global.Attach_Pattern_Current[Index Of Array Value(Event Player.Owner.Clone_Array,
			Event Player)]);
		Loop If Condition Is True;
	}
}

rule("Dummy Bot : Give Credit (Damage)")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Player Health(Victim, Health(Victim) + Event Damage);
		Damage(Victim, Event Player.Owner, Event Damage);
	}
}

rule("Dummy Bot : Give Credit (Healing)")
{
	event
	{
		Player Dealt Healing;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Player Health(Healee, Health(Healee) - Event Healing);
		Heal(Healee, Event Player.Owner, Event Healing);
	}
}

rule("Dummy Bot : Give Credit (Knockback)")
{
	event
	{
		Player Dealt Knockback;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Environment Credit Player(Victim, Event Player.Owner);
	}
}

rule("Ultimate Charge : Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Team Of(Attacker) != Team Of(Victim);
		Is Using Ultimate(Event Player) != True;
	}

	actions
	{
		Victim.Vaild_Healing_Charge += Is True For Any(All Tank Heroes, (Is Duplicating(Victim) ? Hero Being Duplicated(Victim) : Hero Of(
			Victim)) == Current Array Element) ? Event Damage * 0.700 : Event Damage;
		Event Player.Ultimate_Charge += Min(Event Damage * (Is True For Any(All Tank Heroes, (Is Duplicating(Victim)
			? Hero Being Duplicated(Victim) : Hero Of(Victim)) == Current Array Element) ? 0.700 : 1),
			Event Player.Ultimate_Cost - Event Player.Ultimate_Charge);
	}
}

rule("Ultimate Charge : Healing")
{
	event
	{
		Player Dealt Healing;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Is Using Ultimate(Event Player) != True;
	}

	actions
	{
		Event Player.Ultimate_Charge += Min(Event Healing, Healee.Vaild_Healing_Charge);
		Healee.Vaild_Healing_Charge -= Min(Min(Event Healing, Event Player.Ultimate_Cost - Event Player.Ultimate_Charge),
			Healee.Vaild_Healing_Charge);
	}
}

rule("Ultimate Charge : Set Percentage")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Ultimate Charge Percent(Event Player) != Event Player.Ultimate_Charge / (Event Player.Ultimate_Cost / 100);
	}

	actions
	{
		Set Ultimate Charge(Event Player, Event Player.Ultimate_Charge / (Event Player.Ultimate_Cost / 100));
		Skip If(Is Using Ultimate(Event Player), 1);
		Set Ultimate Charge(Event Player.Clone_Array, Event Player.Ultimate_Charge / (Event Player.Ultimate_Cost / 100));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Baby D.Va Ultimate Cost Swap")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Has Spawned(Event Player) == True;
		Event Player.Hero == Hero(D.Va);
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Event Player.Ultimate_Cost = 280;
		Skip If(!Global.Clone_Count_Ultimate, 1);
		Event Player.Ultimate_Cost *= Count Of(Global.Clone_Amount) + 1;
		Skip If(!Is Duplicating(Event Player), 1);
		Event Player.Ultimate_Cost = Event Player.Ultimate_Cost * 0.200;
		Event Player.Saved_Ultimate_Charge = Event Player.Ultimate_Charge;
		Event Player.Ultimate_Charge = 0;
		Wait Until(!Is In Alternate Form(Event Player) || Event Player.Hero != Hero(D.Va), 99999);
		Abort If(Event Player.Hero != Hero(D.Va));
		Event Player.Ultimate_Cost = Global.Ultimate_Cost[Index Of Array Value(Global.All_Heros, Event Player.Hero)];
		Skip If(!Is Duplicating(Event Player), 1);
		Event Player.Ultimate_Cost = Event Player.Ultimate_Cost * 0.200;
		Event Player.Ultimate_Charge = Event Player.Saved_Ultimate_Charge;
		Skip If(!Global.Clone_Count_Ultimate, 1);
		Event Player.Ultimate_Cost *= Count Of(Event Player.Clone_Array);
		Set Player Health(Event Player, Max Health(Event Player));
		Clear Status(Event Player, Unkillable);
	}
}

rule("Binding : Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Is Communicating Any Emote(Event Player) != True;
	}

	actions
	{
		Start Holding Button(Event Player.Clone_Array, Button(Jump));
		Wait Until(Is Communicating Any Emote(Event Player) || !Is Button Held(Event Player, Button(Jump)), 99999);
		Stop Holding Button(Event Player.Clone_Array, Button(Jump));
	}
}

rule("Binding : Crouch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Communicating Any Emote(Event Player) != True;
		(Event Player.Hero != Hero(D.Va) || Is In Alternate Form(Event Player)) == True;
	}

	actions
	{
		Start Holding Button(Event Player.Clone_Array, Button(Crouch));
		Wait Until(Is Communicating Any Emote(Event Player) || !Is Button Held(Event Player, Button(Crouch)), 99999);
		Stop Holding Button(Event Player.Clone_Array, Button(Crouch));
	}
}

rule("Binding : Melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Melee)) == True;
		(Event Player.Hero == Hero(Symmetra) ? !Is Using Ability 2(Event Player) : True) == True;
		Is Communicating Any Emote(Event Player) != True;
	}

	actions
	{
		Start Holding Button(Event Player.Clone_Array, Button(Melee));
		Wait Until(!Update Every Frame(Is Button Held(Event Player, Button(Melee))), 99999);
		Stop Holding Button(Event Player.Clone_Array, Button(Melee));
	}
}

rule("Binding : Reload")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Reload)) == True;
		(Event Player.Hero == Hero(Symmetra) ? !Is Using Ability 2(Event Player) : True) == True;
		Is Communicating Any Emote(Event Player) != True;
	}

	actions
	{
		Start Holding Button(Event Player.Clone_Array, Button(Reload));
		Wait Until(!Update Every Frame(Is Button Held(Event Player, Button(Reload))), 99999);
		Stop Holding Button(Event Player.Clone_Array, Button(Reload));
	}
}

rule("Binding : Interact")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Communicating Any Emote(Event Player) != True;
	}

	actions
	{
		Start Holding Button(Event Player.Clone_Array, Button(Interact));
		Wait Until(!Update Every Frame(Is Button Held(Event Player, Button(Interact))), 99999);
		Stop Holding Button(Event Player.Clone_Array, Button(Interact));
	}
}

rule("Binding : Ability1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		(Event Player.Ability1_Binding_Type == Custom String("Copy Alternative Form") ? !Is In Alternate Form(Event Player)
			: Is Button Held(Event Player, Button(Ability 1)) || (Is Using Ability 1(Event Player)
			&& Event Player.Ability1_Binding_Type != Custom String("Ignore Using Ability"))) == True;
		(Event Player.Hero == Hero(Symmetra) ? !Is Using Ability 2(Event Player) : True) == True;
		Is Communicating Any Emote(Event Player) != True;
	}

	actions
	{
		If(Event Player.Ability1_Binding_Type == Custom String("Copy Alternative Form"));
			Press Button(Filtered Array(Event Player.Clone_Array, Is In Alternate Form(Current Array Element)), Button(Ability 1));
			Wait Until(Update Every Frame(Is In Alternate Form(Event Player)), 99999);
			Press Button(Filtered Array(Event Player.Clone_Array, !Is In Alternate Form(Current Array Element)), Button(Ability 1));
		Else;
			Start Holding Button(Event Player.Clone_Array, Button(Ability 1));
			Wait(0.500, Ignore Condition);
			Skip If(Event Player.Ability1_Binding_Type == Custom String("Ignore Using Ability"), 3);
			If(Is Using Ability 1(Event Player));
				Wait Until(Update Every Frame(!Is Using Ability 1(Event Player)), 99999);
			Else;
				Wait Until(Update Every Frame(!Is Button Held(Event Player, Button(Ability 1))), 99999);
			End;
			Stop Holding Button(Event Player.Clone_Array, Button(Ability 1));
			Skip If(Event Player.Ability1_Binding_Type != Custom String("Press After Using"), 1);
			Press Button(Event Player.Clone_Array, Button(Ability 1));
		End;
	}
}

rule("Binding : Ability2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		(Is Button Held(Event Player, Button(Ability 2)) || (Is Using Ability 2(Event Player)
			&& Event Player.Ability2_Binding_Type != Custom String("Ignore Using Ability"))) == True;
		Event Player.Hero != Hero(Symmetra);
		Is Communicating Any Emote(Event Player) != True;
	}

	actions
	{
		Start Holding Button(Event Player.Clone_Array, Button(Ability 2));
		Wait(0.500, Ignore Condition);
		Skip If(Event Player.Ability2_Binding_Type == Custom String("Ignore Using Ability"), 3);
		If(Is Using Ability 2(Event Player));
			Wait Until(Update Every Frame(!Is Using Ability 2(Event Player)), 99999);
		Else;
			Wait Until(Update Every Frame(!Is Button Held(Event Player, Button(Ability 2))), 99999);
		End;
		Stop Holding Button(Event Player.Clone_Array, Button(Ability 2));
		Skip If(Event Player.Ability2_Binding_Type != Custom String("Press After Using"), 1);
		Press Button(Event Player.Clone_Array, Button(Ability 2));
	}
}

rule("Binding : Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.Ultimate_Charge != 280;
		(Event Player.Hero == Hero(Symmetra) ? !Is Using Ability 2(Event Player) : True) == True;
		Is Communicating Any Emote(Event Player) != True;
	}

	actions
	{
		Start Holding Button(Event Player.Clone_Array, Button(Ultimate));
		Wait Until(!Update Every Frame(Is Button Held(Event Player, Button(Ultimate))), 99999);
		Stop Holding Button(Event Player.Clone_Array, Button(Ultimate));
	}
}

rule("Binding : Primary Fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Firing Primary(Event Player)) == True;
		(Event Player.Hero == Hero(Symmetra) ? !Is Using Ability 2(Event Player) : True) == True;
		Is Reloading(Event Player) != True;
		Is Communicating Any Emote(Event Player) != True;
		(Event Player.Secondary_Binding_Type == Custom String("Alternative Weapon") ? Weapon(Event Player) == 1 : True) == True;
	}

	actions
	{
		Start Holding Button(Event Player.Clone_Array, Button(Primary Fire));
		If(Is Firing Primary(Event Player));
			Wait Until(Update Every Frame(!Is Firing Primary(Event Player)), 99999);
		Else;
			Wait Until(Update Every Frame(!Is Button Held(Event Player, Button(Primary Fire))), 99999);
		End;
		Stop Holding Button(Event Player.Clone_Array, Button(Primary Fire));
	}
}

rule("Binding : Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		(Event Player.Secondary_Binding_Type == Custom String("Alternative Weapon") ? (Is Button Held(Event Player, Button(Primary Fire))
			|| Is Firing Primary(Event Player)) && Weapon(Event Player) == 2 : Is Button Held(Event Player, Button(Secondary Fire))
			|| Is Firing Secondary(Event Player)) == True;
		(Event Player.Hero == Hero(Symmetra) ? !Is Using Ability 2(Event Player) : True) == True;
		Is Communicating Any Emote(Event Player) != True;
	}

	actions
	{
		Start Holding Button(Event Player.Clone_Array, Button(Secondary Fire));
		Skip If(Event Player.Secondary_Binding_Type == Custom String("Ignore Using Ability"), 3);
		If(Is Firing Secondary(Event Player));
			Wait Until(Update Every Frame(!Is Firing Secondary(Event Player)), 99999);
		Else;
			Wait Until(Update Every Frame(!Is Button Held(Event Player, Button(Secondary Fire))), 99999);
		End;
		Stop Holding Button(Event Player.Clone_Array, Button(Secondary Fire));
		Skip If(Event Player.Secondary_Binding_Type != Custom String("Press After Using"), 1);
		Press Button(Event Player.Clone_Array, Button(Secondary Fire));
	}
}

rule("Clone Baby D.Va Auto Re-Mech")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Conjoin_Health != True;
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.Owner.Hero == Hero(D.Va);
		Is In Alternate Form(Event Player) == True;
		Event Player.Owner.Ultimate_Charge > 280;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Wait(0.250, Ignore Condition);
		Skip If(!Is Using Ultimate(Event Player), 2);
		Event Player.Owner.Ultimate_Charge -= 280;
		Wait Until(!Is Using Ultimate(Event Player), 2);
		Loop If Condition Is True;
	}
}

rule("Conjoined Health : Bot Take Damage")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Global.Conjoin_Health == True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Player Health(Append To Array(Event Player.Owner, Remove From Array(Event Player.Owner.Clone_Array, Event Player)), Health(
			Event Player));
		Skip If(Is Alive(Event Player), 1);
		Kill(Append To Array(Event Player.Owner, Remove From Array(Event Player.Owner.Clone_Array, Event Player)), Is Dummy Bot(Attacker)
			? Attacker.Owner : Attacker);
	}
}

rule("Conjoined Health : Player Take Damage")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Global.Conjoin_Health == True;
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		Set Player Health(Event Player.Clone_Array, Health(Event Player));
		Skip If(Is Alive(Event Player), 1);
		Kill(Event Player.Clone_Array, Is Dummy Bot(Attacker) ? Attacker.Owner : Attacker);
	}
}

rule("Conjoined Health : Bot Heal")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Global.Conjoin_Health == True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Player Health(Append To Array(Event Player.Owner, Remove From Array(Event Player.Owner.Clone_Array, Event Player)), Health(
			Event Player));
	}
}

rule("Conjoined Health : Player Heal")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Global.Conjoin_Health == True;
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		Set Player Health(Event Player.Clone_Array, Health(Event Player));
	}
}

rule("Used Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.Ultimate_Charge = 0;
	}
}

rule("Swap Places With Clone On Death")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Global.Death_Swap == True;
		Is Dummy Bot(Event Player) != True;
		Is True For Any(Event Player.Clone_Array, Is Alive(Current Array Element)) == True;
		Health(Event Player) <= 1;
		(Event Player.Hero != Hero(D.Va) || Is In Alternate Form(Event Player)) == True;
	}

	actions
	{
		Event Player.Swaping_Clone = First Of(Sorted Array(Filtered Array(Event Player.Clone_Array, Is Alive(Current Array Element)),
			Distance Between(Event Player, Current Array Element) / Health(Current Array Element)));
		Call Subroutine(Get_Stats);
		Teleport(Event Player.Swaping_Clone, Position Of(Event Player));
		Set Player Health(Event Player.Swaping_Clone, 1);
		Kill(Event Player.Swaping_Clone, Attacker);
		Call Subroutine(Replace_Stats);
	}
}

rule("Get Clone Stats")
{
	event
	{
		Subroutine;
		Get_Stats;
	}

	actions
	{
		Event Player.Clone_Stats = Empty Array;
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Position Of(Event Player.Swaping_Clone));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Facing Direction Of(Event Player.Swaping_Clone));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Health(Event Player.Swaping_Clone));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Ammo(Event Player.Swaping_Clone, 0));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Ammo(Event Player.Swaping_Clone, 1));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Ability Cooldown(Event Player.Swaping_Clone, Button(
			Ability 1)));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Ability Charge(Event Player.Swaping_Clone, Button(Ability 1)));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Ability Resource(Event Player.Swaping_Clone, Button(
			Ability 1)));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Ability Cooldown(Event Player.Swaping_Clone, Button(
			Ability 2)));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Ability Charge(Event Player.Swaping_Clone, Button(Ability 2)));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Ability Resource(Event Player.Swaping_Clone, Button(
			Ability 2)));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Ability Cooldown(Event Player.Swaping_Clone, Button(
			Secondary Fire)));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Ability Charge(Event Player.Swaping_Clone, Button(
			Secondary Fire)));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, Ability Resource(Event Player.Swaping_Clone, Button(
			Secondary Fire)));
		Modify Player Variable(Event Player, Clone_Stats, Append To Array, (Hero Of(Event Player.Swaping_Clone) == Hero(D.Va)
			&& !Is In Alternate Form(Event Player.Swaping_Clone)) == True);
	}
}

rule("Replace Own Stats")
{
	event
	{
		Subroutine;
		Replace_Stats;
	}

	actions
	{
		Skip If(Global.Attach_Clones, 2);
		Start Forcing Player Position(Event Player, Event Player.Clone_Stats[0], False);
		Set Facing(Event Player, Event Player.Clone_Stats[1], To World);
		Set Player Health(Event Player, Event Player.Clone_Stats[2]);
		Set Ammo(Event Player, 0, Event Player.Clone_Stats[3]);
		Set Ammo(Event Player, 1, Event Player.Clone_Stats[4]);
		Set Ability Cooldown(Event Player, Button(Ability 1), Event Player.Clone_Stats[5]);
		Set Ability Charge(Event Player, Button(Ability 1), Event Player.Clone_Stats[6]);
		Set Ability Resource(Event Player, Button(Ability 1), Event Player.Clone_Stats[7]);
		Set Ability Cooldown(Event Player, Button(Ability 2), Event Player.Clone_Stats[8]);
		Set Ability Charge(Event Player, Button(Ability 2), Event Player.Clone_Stats[9]);
		Set Ability Resource(Event Player, Button(Ability 2), Event Player.Clone_Stats[10]);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), Event Player.Clone_Stats[11]);
		Set Ability Charge(Event Player, Button(Secondary Fire), Event Player.Clone_Stats[12]);
		Set Ability Resource(Event Player, Button(Secondary Fire), Event Player.Clone_Stats[13]);
		Skip If(Event Player.Clone_Stats[14] != True, 1);
		Respawn(Event Player);
		Wait(0.250, Ignore Condition);
		Stop Forcing Player Position(Event Player);
	}
}

rule("Anti-Stuck Teleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		(!Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.Owner), Barriers Do Not Block LOS) && Distance Between(
			Event Player, Event Player.Owner) > Workshop Setting Integer(Custom String("Clone"), Custom String(
			"Anti-Stuck Trigger Distance (Meters)"), 30, 12, 150, 0)) == True;
		Is Alive(Event Player.Owner) == True;
		Hero Of(Event Player) == Event Player.Owner.Hero;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Teleport(Event Player, Ray Cast Hit Position(World Vector Of(Vector(0, 1.550, 0), Event Player.Owner, Rotation And Translation),
			World Vector Of(Vector(Random Real(-5, 5), 0, Random Real(-5, 5)), Event Player.Owner, Rotation And Translation), Null,
			Event Player, False));
		Wait(0.250, Ignore Condition);
		Skip If(Is On Ground(Event Player), 1);
		Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player)));
		Loop If Condition Is True;
	}
}

rule("Dummy Bot : De-Mech")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Conjoin_Health == True;
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.Owner.Hero == Hero(D.Va);
		Is In Alternate Form(Event Player.Owner) == True;
		Is In Alternate Form(Event Player) != True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Kill(Event Player, Null);
	}
}

rule("Dummy Bot : Re-Mech")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Conjoin_Health == True;
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.Owner.Hero == Hero(D.Va);
		Is In Alternate Form(Event Player.Owner) != True;
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Start Forcing Player Position(Event Player, World Vector Of(Vector(0, 0.500, 0), Event Player, Rotation And Translation), False);
		Respawn(Event Player);
		Wait(0.100, Ignore Condition);
		Stop Forcing Player Position(Event Player);
	}
}

rule("Re-Attach Clone")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Attach_Clones == True;
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		(Distance Between(Event Player, Event Player.Owner) >= 2.100 || Distance Between(Event Player, Event Player.Owner) <= 1.900)
			== True;
		Hero Of(Event Player) == Event Player.Owner.Hero;
		Is Alive(Event Player.Owner) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Attach Players(Event Player, Event Player.Owner, Global.Attach_Pattern_Current[Index Of Array Value(Event Player.Owner.Clone_Array,
			Event Player)]);
	}
}

rule("Death Swap Prep Unkillable")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Death_Swap == True;
		Is Dummy Bot(Event Player) != True;
		Is True For Any(Event Player.Clone_Array, Is Alive(Current Array Element)) == True;
		Has Status(Event Player, Unkillable) != True;
		Has Spawned(Event Player) == True;
		(Event Player.Hero != Hero(D.Va) || Is In Alternate Form(Event Player)) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 9999);
		Wait Until(Is True For All(Event Player.Clone_Array, Is Dead(Current Array Element)), 99999);
		Clear Status(Event Player, Unkillable);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}
