settings
{
	main
	{
		Mode Name: "AI RTS - X63K5"
	}

	lobby
	{
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Max Team 1 Players: 1
		Max Team 2 Players: 1
		Return To Lobby: Never
	}

	modes
	{
		Assault

		General
		{
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn As Random Hero: On
		}
	}

	workshop
	{
		Player 1: [2]
		Player 2: [2]
		Player 3: [6]
		Player 4: [7]
		Player 5: [1]
		Player 6: [1]
		Targeting Type: [3]
		Turn Speed: 225
	}

	extensions
	{
		Spawn More Dummy Bots
	}
}

variables
{
	global:
		0: Path_Nodes
		1: Healthkits
		3: Healthkit_Cooldown
		4: Healthkit_Used
		5: ObjectiveA_Nodes
		6: ObjectiveB_Nodes
		7: Hero_Prioritize_Order
		8: All_Heros
		9: Primary_Max
		11: Number_Of_Bots_T1
		12: Ability1_Max
		13: Mobility_Distance
		14: Primary_Min
		15: Random_Hero
		16: Ultimate_Duration
		17: Secondary_Max
		18: Secondary_Min
		19: Charge_Time
		20: Use_Ultimate_Max
		21: Ultimate_Health
		22: Gamertags
		23: Swap_After_Ult
		25: T1_Available_Heros
		26: T2_Available_Heros
		27: Passive
		28: Slot1_Role_Lock
		29: Slot2_Role_Lock
		30: Slot3_Role_Lock
		31: Slot4_Role_Lock
		32: Slot5_Role_Lock
		33: Slot6_Role_Lock
		34: Ultimate_Targets
		35: Ability1_Min
		36: Ability2_Max
		37: Ability2_Min
		38: Ultimate_Target_Team
		39: Primary_Arc
		40: Secondary_Arc
		41: Ultimate_Max
		42: Ultimate_Min
		43: Ability1_Arc
		44: Ability2_Arc
		45: Ultimate_Arc
		48: Primary_Sound_Max
		49: Secondary_Sound_Max
		50: Ability1_Sound_Max
		51: Ability2_Sound_Max
		52: Ultimate_Sound_Max
		53: Walking_Sound_Max
		54: Crouch_Walk_Sound_Max
		55: Melee_Sound_Max
		56: Aim_Predict_Scale
		58: AI_Gamertags
		59: AI_Aim_Type
		60: AI_Turn_Speed
		61: Vaild_Heros
		62: Targeting_Type
		63: Use_Complex_Abilitys
		64: Can_Hear
		65: Team_Based_Targeting
		66: Healthkits_Small
		67: Healthkits_Large
		68: Invisible_Targeting
		69: Ignore_Abilitys
		70: Chokepoint
		71: AI_Difficulty
		72: Number_Of_Bots_T2
		75: T1_Commander
		76: T2_Commander
		77: Staircase_Top
		78: Staircase_Middle
		79: Staircase_Bottom
		80: Used_Healthkit_Type
		81: Healthkit_Index
		82: Bots_T1
		83: Bots_T2

	player:
		0: Walk_To_Position
		1: Current_Node
		2: Primary_Max
		3: Aim_Predict
		4: Node_Options
		5: Ignore_Lower_Nodes
		6: Offensive
		7: Defensive
		8: Mobility
		9: Ultimate_Target_Team
		10: Cooldown_Nodes
		11: Healing
		12: Ability1_Max
		13: Mobility_Distance
		14: Hero
		15: Secondary_Fire
		16: Secondary_Offensive
		17: Secondary_Defensive
		18: Secondary_Healing
		19: Hold
		20: Confirm
		21: Toggle
		22: Current_Offensive
		23: Current_Defensive
		24: Current_Mobility
		25: Current_Healing
		26: Targets
		27: Target_Order
		28: Primary_Min
		29: Cooldown
		30: Charge
		31: Resource
		32: Aim_Predict_Scale
		33: Secondary_Max
		34: Secondary_Min
		35: Charging
		36: Charging_Time
		37: Use_Ultimate_Max
		38: Ultimate_Health
		39: Hero_Pool
		40: Ultimates_Used
		41: Ultimate_Targets
		42: Role_Lock
		43: Ability1_Min
		44: Ability2_Max
		45: Ability2_Min
		46: Heal_Friendlys
		47: Current_Heal_Friendlys
		48: Walk_To_Max
		49: Walk_To_Min
		50: Ray_Cast_Facing
		51: Mode
		52: Passive
		53: Requested_Hero
		54: Aim_Arc
		55: Can_Change_Arc
		56: Ultimate_Max
		57: Ultimate_Min
		58: Ultimate_Duration
		59: Selected_AI
		60: Use_If_Shield
		61: Alternative_Form
		62: Follow_Teamate
		63: Sub_Command_Mode
		64: Current_Hero
		65: Command_Mode
		66: CD_Nodes_Timer
		67: Node_Timer_Index
		68: Path_Position_Command
		69: Camera_Position
		70: Last_Stair_Type
		71: Stairs_Index
		72: Using_Stairs
		73: Target
		74: Closest_Facing_Team
		75: Closest_Facing_Enemy
		76: Hero_Index
		77: Hero_Options
		78: Request_Hero
		79: Role
}

subroutines
{
	0: Hanamura
	1: Horizon
	2: Paris
	3: Temple_of_Anubus
	4: Volskaya
	5: Hero_Values
	6: Hero_Variables
	8: Global_Setup
	9: Node_Setup
	11: Heros
	14: AI_Start_Facing
	15: Gamertags
	16: AI_Difficulty
}

rule("------------------------------------------- Made By Spiderman318 | YT Spiderman318 ---------------------------------------")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Call Subroutine(Global_Setup);
		Wait(3, Ignore Condition);
		Global.AI_Aim_Type = Workshop Setting Combo(Custom String("AI"), Custom String("Aim Type (Use Basic To Avoid Crash)"), 0, Array(
			Custom String("Basic (Aim At Head With No Leading Or Arc)"), Custom String("Leading (Aim At Head With Leading But No Arc)"),
			Custom String("Arc (Aim At Head With Arc But No Leading"), Custom String("Advanced (Aim At Head With Leading And Arc)")), 0);
		Global.AI_Turn_Speed = Workshop Setting Integer(Custom String("AI"), Custom String("Turn Speed"), 320, 10, 500, 11);
		Global.Ignore_Abilitys = Workshop Setting Toggle(Custom String("AI"), Custom String(
			"Igore Abilitys (Continues To Fire Into Deflect, Defence Matrix, Etc)"), False, 6);
		Global.AI_Gamertags = Workshop Setting Toggle(Custom String("AI"), Custom String("Random Gamertags"), True, 8);
		Global.Targeting_Type = Workshop Setting Combo(Custom String("AI"), Custom String("Targeting Type"), 0, Array(Custom String(
			"Basic (LOS)"), Custom String("Hero Basic (LOS / ABS)"), Custom String("Improved (LOS / SBT)"), Custom String(
			"Hero Improved (LOS/ ABS / SBT)"), Custom String(
			"\nLOS - Line Of Sight\r\n\r\nABS - Ability Based Sight\r\n\r\rDoes'nt Include Sonic Arrow"), Custom String(
			"\nSBT - Sound Based Targeting\r\nOnly Works If SBT Enabled")), 1);
		Global.Targeting_Type = Min(Global.Targeting_Type, 3);
		Global.Use_Complex_Abilitys = Workshop Setting Toggle(Custom String("AI"), Custom String(
			"Use More Complex Abilitys (Zen Orbs, Lucio Crossfade, Etc)"), True, 5);
		Global.Team_Based_Targeting = Workshop Setting Toggle(Custom String("AI"), Custom String(
			"Team Based Targeting (Healing, Protection, Etc)"), True, 4);
		Global.Number_Of_Bots_T1 = Workshop Setting Integer(Custom String("AI"), Custom String("Amount (Team 1)"), 5, 0, 24, 12);
		Global.Number_Of_Bots_T2 = Workshop Setting Integer(Custom String("AI"), Custom String("Amount (Team 2)"), 5, 0, 24, 12);
		Call Subroutine(Hero_Values);
		Skip If(Global.AI_Gamertags == False, 1);
		Call Subroutine(Gamertags);
		Call Subroutine(Node_Setup);
		Global.AI_Difficulty = Workshop Setting Combo(Custom String("AI"), Custom String(
			"Difficulty (Overrides Settings Such As Aim Type, Ignore Abilitys, Etc)"), 0, Array(Custom String(
			"Custom Difficulty (Dont Override)"), Custom String("Easy"), Custom String("Normal"), Custom String("Hard")), -1);
		Skip If(Global.AI_Difficulty == 0, 1);
		Call Subroutine(AI_Difficulty);
	}
}

rule("Use Healthkit")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Event Was Health Pack == True;
		Is In Spawn Room(Event Player) != True;
		(Hero Of(Healer) == Hero(Sombra) || !Entity Exists(Healer)) == True;
	}

	actions
	{
		If(Count Of(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large)) == 0);
			Modify Global Variable(Healthkit_Used, Append To Array, First Of(Sorted Array(Global.Healthkits, Distance Between(Event Player,
				Current Array Element))));
			Modify Global Variable(Healthkits, Remove From Array By Value, First Of(Sorted Array(Global.Healthkits, Distance Between(
				Event Player, Current Array Element))));
			Modify Global Variable(Healthkit_Cooldown, Append To Array, Event Healing > 75 ? 15 : 10);
			Modify Global Variable(Used_Healthkit_Type, Append To Array, 0);
		Else;
			If(Array Contains(Global.Healthkits_Small, First Of(Sorted Array(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large),
				Distance Between(Event Player, Current Array Element)))));
				Modify Global Variable(Healthkit_Used, Append To Array, First Of(Sorted Array(Global.Healthkits_Small, Distance Between(
					Event Player, Current Array Element))));
				Modify Global Variable(Healthkits_Small, Remove From Array By Value, First Of(Sorted Array(Global.Healthkits_Small,
					Distance Between(Event Player, Current Array Element))));
				Modify Global Variable(Healthkit_Cooldown, Append To Array, 10);
				Modify Global Variable(Used_Healthkit_Type, Append To Array, 1);
			Else;
				Modify Global Variable(Healthkit_Used, Append To Array, First Of(Sorted Array(Global.Healthkits_Large, Distance Between(
					Event Player, Current Array Element))));
				Modify Global Variable(Healthkits_Large, Remove From Array By Value, First Of(Sorted Array(Global.Healthkits_Large,
					Distance Between(Event Player, Current Array Element))));
				Modify Global Variable(Healthkit_Cooldown, Append To Array, 15);
				Modify Global Variable(Used_Healthkit_Type, Append To Array, 2);
			End;
		End;
	}
}

rule("Healthkit Cooldown")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Healthkit_Used = Empty Array;
		Global.Healthkit_Cooldown = Empty Array;
		Global.Used_Healthkit_Type = Empty Array;
		While(True);
			Wait Until(Count Of(Global.Healthkit_Used) > 0, 99999);
			For Global Variable(Healthkit_Index, Count Of(Global.Healthkit_Used) - 1, 0 - 1, 0 - 1);
				If(Global.Healthkit_Cooldown[Global.Healthkit_Index] <= 0);
					If(Global.Used_Healthkit_Type[Global.Healthkit_Index] == 1);
						Modify Global Variable(Healthkits_Small, Append To Array, Global.Healthkit_Used[Global.Healthkits]);
					Else If(Global.Used_Healthkit_Type[Global.Healthkit_Index] == 2);
						Modify Global Variable(Healthkits_Large, Append To Array, Global.Healthkit_Used[Global.Healthkits]);
					Else;
						Modify Global Variable(Healthkits, Append To Array, Global.Healthkit_Used[Global.Healthkits]);
					End;
					Modify Global Variable(Healthkit_Used, Remove From Array By Index, Global.Healthkit_Index);
					Modify Global Variable(Healthkit_Cooldown, Remove From Array By Index, Global.Healthkit_Index);
					Modify Global Variable(Used_Healthkit_Type, Remove From Array By Index, Global.Healthkit_Index);
				Else;
					Global.Healthkit_Cooldown[Global.Healthkit_Index] -= 1;
				End;
			End;
			Wait(1, Ignore Condition);
		End;
	}
}

disabled rule("----------------------------------- Pathfinder ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Pathfind Melee/Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Magnitude Of(Throttle Of(Event Player)) > 0;
		Speed Of(Event Player) < 2;
	}

	actions
	{
		Wait(Max(Server Load / 1000, 0.250), Abort When False);
		Press Button(Event Player, Button(Jump));
		Wait(Max(Server Load / 1000, 0.250), Abort When False);
		Press Button(Event Player, Button(Melee));
		Loop If Condition Is True;
	}
}

rule("Node Timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Count Of(Event Player.CD_Nodes_Timer) > 0;
	}

	actions
	{
		For Player Variable(Event Player, Node_Timer_Index, Count Of(Event Player.CD_Nodes_Timer) - 1, 0, 1);
			If(Event Player.CD_Nodes_Timer[Event Player.Node_Timer_Index] <= 1);
				Modify Player Variable(Event Player, Cooldown_Nodes, Remove From Array By Index, Event Player.Node_Timer_Index);
				Modify Player Variable(Event Player, CD_Nodes_Timer, Remove From Array By Index, Event Player.Node_Timer_Index);
			Else;
				Event Player.CD_Nodes_Timer[Event Player.Node_Timer_Index] -= 1;
			End;
			Wait(Min(Server Load / 1000, 0.100), Ignore Condition);
		End;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Current Node")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.Walk_To_Position == Vector(X Component Of(Event Player.Walk_To_Position), Y Component Of(
			Event Player.Walk_To_Position), Z Component Of(Event Player.Walk_To_Position));
	}

	actions
	{
		Event Player.Using_Stairs = Array Contains(Append To Array(Append To Array(Global.Staircase_Bottom, Filtered Array(
			Global.Staircase_Middle, Current Array Element != Null)), Global.Staircase_Top), Event Player.Current_Node) ? True : False;
		Skip If(Y Component Of(Position Of(Event Player)) + 2.750 >= Y Component Of(Event Player.Walk_To_Position), 2);
		Event Player.Ignore_Lower_Nodes = 5;
		Chase Player Variable Over Time(Event Player, Ignore_Lower_Nodes, 0, 5, Destination and Duration);
		If(Distance Between(Vector(X Component Of(Position Of(Event Player)), Y Component Of(Event Player.Current_Node), Z Component Of(
			Position Of(Event Player))), Event Player.Current_Node) < Max(Horizontal Speed Of(Event Player) / 5, 2));
			If(Event Player.Using_Stairs);
				If(Array Contains(Global.Staircase_Bottom, Event Player.Current_Node));
					Event Player.Last_Stair_Type = Custom String("Bottom");
				Else If(Array Contains(Filtered Array(Global.Staircase_Middle, Current Array Element != Null), Event Player.Current_Node));
					Event Player.Last_Stair_Type = Custom String("Middle");
				Else If(Array Contains(Filtered Array(Global.Staircase_Top, Current Array Element != Null), Event Player.Current_Node));
					Event Player.Last_Stair_Type = Custom String("Top");
				End;
			End;
			Modify Player Variable(Event Player, Cooldown_Nodes, Append To Array, Event Player.Current_Node);
			Modify Player Variable(Event Player, CD_Nodes_Timer, Append To Array, 8);
		End;
		Event Player.Node_Options = Filtered Array(Append To Array(Append To Array(Global.Path_Nodes, Append To Array(Append To Array(
			Global.ObjectiveA_Nodes, Global.ObjectiveB_Nodes), Global.Chokepoint)), Append To Array(Append To Array(
			Global.Staircase_Bottom, Filtered Array(Global.Staircase_Middle, Current Array Element != Null)), Global.Staircase_Top)),
			!Array Contains(Event Player.Cooldown_Nodes, Current Array Element));
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Event Player, Current Array Element) <= 30);
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Is In Line of Sight(Eye Position(Event Player),
			Current Array Element, Barriers Do Not Block LOS) == True);
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Y Component Of(Position Of(Event Player))
			+ 2.750 > Y Component Of(Current Array Element));
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
			Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
			Event Player), Current Array Element) / 1.200), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 1.200) + Vector(0, -99, 0),
			Null, All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 1.200)) < Max(Y Component Of(
			Position Of(Event Player)) + 1 - Y Component Of(Current Array Element), 8));
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
			Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
			Event Player), Current Array Element) / 2), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 2) + Vector(0, -99, 0), Null,
			All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 2)) < Max(Y Component Of(
			Position Of(Event Player)) + 1 - Y Component Of(Current Array Element), 8));
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
			Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
			Event Player), Current Array Element) / 4), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 4) + Vector(0, -99, 0), Null,
			All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 4)) < Max(Y Component Of(
			Position Of(Event Player)) + 1 - Y Component Of(Current Array Element), 8));
		If(Event Player.Using_Stairs);
			If(Array Contains(Global.Staircase_Bottom, Event Player.Current_Node));
				Event Player.Stairs_Index = Index Of Array Value(Global.Staircase_Bottom, Event Player.Current_Node);
			Else If(Array Contains(Filtered Array(Global.Staircase_Middle, Current Array Element != Null), Event Player.Current_Node));
				Event Player.Stairs_Index = Index Of Array Value(Global.Staircase_Middle, Event Player.Current_Node);
			Else If(Array Contains(Filtered Array(Global.Staircase_Top, Current Array Element != Null), Event Player.Current_Node));
				Event Player.Stairs_Index = Index Of Array Value(Global.Staircase_Top, Event Player.Current_Node);
			End;
			If(Event Player.Last_Stair_Type == Custom String("Bottom"));
				If(Global.Staircase_Middle[Event Player.Stairs_Index] == Null);
					Modify Player Variable(Event Player, Node_Options, Append To Array, Global.Staircase_Top[Event Player.Stairs_Index]);
				Else;
					Modify Player Variable(Event Player, Node_Options, Append To Array, Global.Staircase_Middle[Event Player.Stairs_Index]);
				End;
			Else If(Event Player.Last_Stair_Type == Custom String("Middle"));
				Modify Player Variable(Event Player, Node_Options, Append To Array, Global.Staircase_Top[Event Player.Stairs_Index]);
			End;
		End;
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, !Array Contains(Event Player.Cooldown_Nodes,
			Current Array Element));
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Is In Line of Sight(Eye Position(Event Player),
			Current Array Element, Barriers Do Not Block LOS) == True);
		Event Player.Node_Options = Sorted Array(Event Player.Node_Options, Distance Between(Event Player, Current Array Element) * (
			Y Component Of(Position Of(Event Player)) + 0.550 <= Y Component Of(Current Array Element)
			|| !Event Player.Ignore_Lower_Nodes ? 1 : (Distance Between(Event Player, Event Player.Walk_To_Position) < Distance Between(
			Current Array Element, Event Player.Walk_To_Position) ? 3 : 2)) + Distance Between(Event Player.Walk_To_Position,
			Current Array Element));
		Skip If(Distance Between(Vector(X Component Of(Position Of(Event Player)), Y Component Of(Event Player.Walk_To_Position),
			Z Component Of(Position Of(Event Player))), Event Player.Walk_To_Position) > 15, 1);
		Event Player.Node_Options = Sorted Array(Event Player.Node_Options, Current Array Index * (
			Event Player.Ignore_Lower_Nodes != 0 && Y Component Of(Position Of(Event Player)) + (Array Contains(Global.Staircase_Bottom,
			Current Array Element) ? 1.500 : 2.750) <= Y Component Of(Current Array Element) && Array Contains(Append To Array(
			Append To Array(Global.Staircase_Bottom, Global.Staircase_Middle), Global.Staircase_Top), Current Array Element) ? 0 - 1 : 1));
		If(Count Of(Event Player.Node_Options) == 0);
			Event Player.Cooldown_Nodes = Empty Array;
			Event Player.CD_Nodes_Timer = Empty Array;
		End;
		Event Player.Current_Node = First Of(Event Player.Node_Options) < 0 ? First Of(Sorted Array(Filtered Array(
			Event Player.Node_Options, Current Array Index < 0), Absolute Value(Current Array Index))) : First Of(
			Event Player.Node_Options);
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop;
	}
}

rule("Stop Following If Teammate Dead")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode == Custom String("Follow");
		Is Dead(Event Player.Follow_Teamate) == True;
	}

	actions
	{
		Event Player.Mode = Custom String("Auto");
	}
}

rule("Follow Teammate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode == Custom String("Follow");
		Distance Between(Event Player, Event Player.Follow_Teamate) > 3;
		Event Player.Walk_To_Position != Event Player.Follow_Teamate;
	}

	actions
	{
		Event Player.Walk_To_Max = 4;
		Event Player.Walk_To_Min = 2;
		Event Player.Walk_To_Position = Event Player.Follow_Teamate;
		Wait(Max(Server Load / 1000, 1.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Walk To Group Location")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode == Custom String("Path") || Event Player.Mode == Custom String("Group")) == True;
		Distance Between(Event Player, Event Player.Path_Position_Command) > 3;
		Event Player.Walk_To_Position != Event Player.Path_Position_Command;
	}

	actions
	{
		Event Player.Walk_To_Max = Event Player.Mode == Custom String("Group") ? 3 : 2;
		Event Player.Walk_To_Min = 0;
		Event Player.Walk_To_Position = Event Player.Path_Position_Command;
		Wait(Max(Server Load / 1000, 1.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Idle - Disable All Pathing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode == Custom String("Idle");
		Distance Between(Event Player, Event Player.Walk_To_Position) > 3;
	}

	actions
	{
		Event Player.Walk_To_Position = Position Of(Event Player);
		Wait(Max(Server Load / 1000, 1.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Walk To Target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Is Game In Progress || Is Team On Defense(Team Of(Event Player))) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		(Is True For All(Array(Event Player.Mode == Custom String("Auto"), Number Of Players On Objective(Team Of(Event Player))
			>= Number Of Players On Objective(Opposite Team Of(Team Of(Event Player))) + (Is Team On Defense(Team Of(Event Player))
			? 1 : 0), Normalized Health(Event Player) > 0.500), Current Array Element) || (Team Of(Event Player) == Team Of(First Of(
			Event Player.Target_Order)) && Event Player.Mode == Custom String("Reset")) || Event Player.Mode == Custom String("Combat"))
			== True;
	}

	actions
	{
		If(Team Of(First Of(Event Player.Target_Order)) != Team Of(Event Player));
			Event Player.Walk_To_Max = Min(Event Player.Primary_Max - Event Player.Primary_Max / 2,
				Event Player.Secondary_Max - Event Player.Secondary_Max / 2);
			Event Player.Walk_To_Min = Min(Event Player.Primary_Min - Event Player.Primary_Min / 2,
				Event Player.Secondary_Min - Event Player.Secondary_Min / 2);
		Else;
			Event Player.Walk_To_Max = 8;
			Event Player.Walk_To_Min = 4;
		End;
		Event Player.Walk_To_Position = Position Of(First Of(Event Player.Target_Order)) + Vector(0, 1.550, 0);
		Wait(Max(Server Load / 1000, 1.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("No Target - Combat Patrol")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Is Game In Progress || Is Team On Defense(Team Of(Event Player))) == True;
		Entity Exists(First Of(Event Player.Target_Order)) != True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Distance Between(Event Player, Event Player.Walk_To_Position) <= 5;
		(Is True For All(Array(Event Player.Mode == Custom String("Auto"), Number Of Players On Objective(Team Of(Event Player))
			>= Number Of Players On Objective(Opposite Team Of(Team Of(Event Player))) + (Is Team On Defense(Team Of(Event Player))
			? 1 : 0), Normalized Health(Event Player) > 0.500), Current Array Element) || (Team Of(Event Player) == Team Of(First Of(
			Event Player.Target_Order)) && Event Player.Mode == Custom String("Reset")) || Event Player.Mode == Custom String("Combat"))
			== True;
	}

	actions
	{
		Event Player.Walk_To_Max = 1.800;
		Event Player.Walk_To_Min = 0;
		Event Player.Walk_To_Position = Last Of(Sorted Array(Global.Path_Nodes, Distance Between(Event Player, Current Array Element)));
		Wait(Max(Server Load / 1000, 1.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Walk To Objective")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Is Game In Progress || Is Team On Defense(Team Of(Event Player))) == True;
		Has Spawned(Event Player) == True;
		Is On Objective(Event Player) != True;
		Is Alive(Event Player) == True;
		Array Contains(Is Objective Complete(0) ? Global.ObjectiveB_Nodes : Global.ObjectiveA_Nodes, Event Player.Walk_To_Position)
			!= True;
		(Is True For All(Array(Event Player.Mode == Custom String("Auto"), !Entity Exists(First Of(Event Player.Target_Order)),
			Normalized Health(Event Player) > 0.500), Current Array Element) || (Normalized Health(Event Player)
			== 1 && Event Player.Mode == Custom String("Reset")) || Event Player.Mode == Custom String("Objective")) == True;
	}

	actions
	{
		Event Player.Walk_To_Max = 1.800;
		Event Player.Walk_To_Min = 0;
		Event Player.Walk_To_Position = Random Value In Array(Is Objective Complete(0)
			? Global.ObjectiveB_Nodes : Global.ObjectiveA_Nodes);
		Wait(Max(Server Load / 1000, 1.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Walk To Healthkit")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Is Game In Progress || Is Team On Defense(Team Of(Event Player))) == True;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.Walk_To_Position != First Of(Sorted Array(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large),
			Distance Between(Current Array Element, Event Player)));
		(Is True For All(Array(Event Player.Mode == Custom String("Auto"), Number Of Players On Objective(Team Of(Event Player))
			>= Number Of Players On Objective(Opposite Team Of(Team Of(Event Player))) + (Is Team On Defense(Team Of(Event Player))
			? 2 : 1), Normalized Health(Event Player) <= (Entity Exists(First Of(Event Player.Target_Order)) ? 0.500 : 0.750)),
			Current Array Element) || (Normalized Health(Event Player) != 1 && Event Player.Mode == Custom String("Reset"))) == True;
	}

	actions
	{
		Event Player.Walk_To_Max = 2;
		Event Player.Walk_To_Min = 0;
		Event Player.Walk_To_Position = First Of(Sorted Array(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large),
			Distance Between(Current Array Element, Event Player)));
		Wait(Max(Server Load / 1000, 1.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("----------------------------------- Pathfinder ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- AI ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Setup Bot")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Skip If(Global.AI_Gamertags == False, 1);
		Start Forcing Dummy Bot Name(Event Player, Random Value In Array(Global.Gamertags));
		Call Subroutine(Heros);
		Event Player.Mode = Custom String("Auto");
		Event Player.Cooldown_Nodes = Empty Array;
		Event Player.CD_Nodes_Timer = Empty Array;
		Wait(Random Real(0, 2), Ignore Condition);
		Event Player.Hero = Random Value In Array(Filtered Array(Is Team On Offense(Team Of(Event Player))
			? Global.T2_Available_Heros : Global.T1_Available_Heros, Array Contains(Event Player.Hero_Pool, Current Array Element)));
		If(Is Team On Offense(Team Of(Event Player)) == True);
			Modify Global Variable(T2_Available_Heros, Remove From Array By Value, Hero Of(Event Player));
		Else;
			Modify Global Variable(T1_Available_Heros, Remove From Array By Value, Hero Of(Event Player));
		End;
		Call Subroutine(AI_Start_Facing);
		Event Player.Can_Change_Arc = True;
		Start Forcing Player Outlines(Event Player, Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander,
			True, Color(Green), Always);
		Wait Until(Has Spawned(Event Player) && (Is Team On Offense(Team Of(Event Player)) ? Is Game In Progress : !Is Assembling Heroes),
			99999);
		Start Throttle In Direction(Event Player, Y Component Of(Position Of(Event Player)) + 2.750 >= Y Component Of(
			Event Player.Walk_To_Position) && Is In Line of Sight(Eye Position(Event Player), Event Player.Walk_To_Position,
			Barriers Do Not Block LOS) ? (Distance Between(Event Player, Event Player.Walk_To_Position)
			< Event Player.Walk_To_Min ? Direction Towards(Event Player.Walk_To_Position, Event Player) : Direction Towards(Event Player,
			Event Player.Walk_To_Position)) : Direction Towards(Position Of(Event Player), Event Player.Current_Node), (Distance Between(
			Event Player, Event Player.Walk_To_Position) < Event Player.Walk_To_Min || Distance Between(Event Player,
			Event Player.Walk_To_Position) > Event Player.Walk_To_Max) && Is In Line of Sight(Eye Position(Event Player),
			Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 1 : (Is In Line of Sight(Eye Position(Event Player),
			Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 0 : 1), To World, Replace existing throttle,
			Direction and Magnitude);
	}
}

rule("Bot Target List")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.Targets = Append To Array(Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))),
			Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS)),
			Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), Hero Of(Event Player) == Hero(Sombra)
			&& Normalized Health(Current Array Element) < 0.500));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Players On Hero(Hero(Sombra), Opposite Team Of(
			Team Of(Event Player))), Is Using Ability 1(Current Array Element) && !Is Firing Secondary(Current Array Element)
			&& Distance Between(Eye Position(Event Player), Position Of(Current Array Element)) > 3 && Distance Between(Position Of(
			Event Player), Position Of(Current Array Element)) > 3));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Players On Hero(Hero(Echo), Opposite Team Of(Team Of(
			Event Player))), Hero Being Duplicated(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element)
			&& !Is Firing Secondary(Current Array Element) && Distance Between(Eye Position(Event Player), Position Of(
			Current Array Element)) > 3 && Distance Between(Position Of(Event Player), Position Of(Current Array Element)) > 3));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(All Players(All Teams), Has Status(
			Current Array Element, Asleep) || Is In Spawn Room(Current Array Element) || Has Status(Current Array Element, Phased Out)
			|| !Has Spawned(Current Array Element)));
		Skip If(Global.Ignore_Abilitys == True, 5);
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(D.Va),
			All Teams), Hero Being Duplicated(Event Player) == Hero(D.Va)), Is Firing Secondary(Current Array Element) && Is In View Angle(
			Current Array Element, Eye Position(Event Player), 70)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Zarya),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Zarya)), Is Using Ability 1(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Reaper),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Reaper)), Is Using Ability 1(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Genji),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Genji)), Is Using Ability 2(Current Array Element) && Is In View Angle(
			Current Array Element, Eye Position(Event Player), 70)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Sigma),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Sigma)), Is Using Ability 1(Current Array Element) && Is In View Angle(
			Current Array Element, Eye Position(Event Player), 70)));
		Skip If(Global.Team_Based_Targeting == False, 23);
		If((Hero Being Duplicated(Event Player) == Hero(Zarya) || Hero Of(Event Player) == Hero(Zarya)) && Ability Cooldown(Event Player,
			Button(Ability 2)) == Null);
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < 0.400));
		Else If((Hero Being Duplicated(Event Player) == Hero(Moira) || Hero Of(Event Player) == Hero(Moira)) && Ability Resource(
				Event Player, Button(Primary Fire)) > 0);
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < (Count Of(Event Player.Targets) > 0 ? 0.800 : 1)));
		Else If(Hero Being Duplicated(Event Player) == Hero(Mercy) || Hero Of(Event Player) == Hero(Mercy));
			Modify Player Variable(Event Player, Targets, Append To Array, Append To Array(Filtered Array(All Living Players(Team Of(
				Event Player)), Normalized Health(Current Array Element) < 1), Filtered Array(All Players(Team Of(Event Player)), Is Dead(
				Current Array Element))));
		Else If((Hero Being Duplicated(Event Player) == Hero(Brigitte) || Hero Of(Event Player) == Hero(Brigitte)) && Ability Charge(
				Event Player, Button(Ability 2)) > 0);
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < 1));
		Else If(Hero Being Duplicated(Event Player) == Hero(Baptiste) || Hero Of(Event Player) == Hero(Baptiste));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < (Count Of(Event Player.Targets) > 0 ? 0.800 : 1)));
		Else If(Hero Being Duplicated(Event Player) == Hero(Ana) || Hero Of(Event Player) == Hero(Ana));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < (Count Of(Event Player.Targets) > 0 ? 0.800 : 1)));
		Else If(Hero Being Duplicated(Event Player) == Hero(Kiriko) || Hero Of(Event Player) == Hero(Kiriko));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < (Count Of(Event Player.Targets) > 0 ? 0.800 : 1)));
		Else If(Hero Being Duplicated(Event Player) == Hero(Lifeweaver) || Hero Of(Event Player) == Hero(Lifeweaver));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < (Count Of(Event Player.Targets) > 0 ? 0.800 : 1)));
		End;
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Event Player);
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Doomfist),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Doomfist)), Is Using Ultimate(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Moira),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Moira)), Is Using Ability 1(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Mei),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Mei)), Is Using Ability 1(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Zenyatta),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Zenyatta)), Is Using Ultimate(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Tracer),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Tracer)), Is Using Ability 2(Current Array Element)));
		Event Player.Targets = Filtered Array(Event Player.Targets, Is Alive(Current Array Element));
		Event Player.Targets = Sorted Array(Event Player.Targets, Distance Between(Event Player, Current Array Element) * Health(
			Current Array Element) - (Team Of(Current Array Element) == Team Of(Event Player) ? (Is In Line of Sight(Eye Position(
			Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS) ? 1 : 1000) : 0));
		Event Player.Target_Order = Array Contains(Event Player.Targets, Event Player.Target) && !Array Contains(Event Player.Targets,
			All Players(Team Of(Event Player))) ? Event Player.Target : First Of(Event Player.Targets);
		If(!Entity Exists(First Of(Event Player.Target_Order)));
			Press Button(Event Player, Button(Reload));
		End;
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop;
	}
}

rule("Heal Target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Heal_Friendlys != Empty Array;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Team Of(Event Player) == Team Of(First Of(Event Player.Target_Order));
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Is True For Any(Event Player.Heal_Friendlys, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Heal_Friendlys, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Heal_Friendlys, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(
			Event Player.Heal_Friendlys, Current Array Element))) == True;
		Hero Of(Event Player) != Hero(Zenyatta);
		Hero Being Duplicated(Event Player) != Hero(Zenyatta);
	}

	actions
	{
		If(Hero Being Duplicated(Event Player) == Hero(Mercy) || Hero Of(Event Player) == Hero(Mercy));
			Set Weapon(Event Player, 1);
			Press Button(Event Player, Button(Ability 2));
		End;
		Event Player.Current_Heal_Friendlys = Random Value In Array(Event Player.Heal_Friendlys);
		If(Event Player.Current_Heal_Friendlys == Button(Ability 1));
			Skip If(Distance Between(Event Player, First Of(Event Player.Target_Order)) > Event Player.Ability1_Max || Distance Between(
				Event Player, First Of(Event Player.Target_Order)) < Event Player.Ability1_Min, 22);
		Else If(Event Player.Current_Heal_Friendlys == Button(Ability 2));
			Skip If(Distance Between(Event Player, First Of(Event Player.Target_Order)) > Event Player.Ability2_Max || Distance Between(
				Event Player, First Of(Event Player.Target_Order)) < Event Player.Ability2_Min, 20);
		Else If(Event Player.Current_Heal_Friendlys == Button(Primary Fire));
			Skip If(Distance Between(Event Player, First Of(Event Player.Target_Order)) > Event Player.Primary_Max || Distance Between(
				Event Player, First Of(Event Player.Target_Order)) < Event Player.Primary_Min, 18);
		Else If(Event Player.Current_Heal_Friendlys == Button(Secondary Fire));
			Skip If(Distance Between(Event Player, First Of(Event Player.Target_Order)) > Event Player.Secondary_Max || Distance Between(
				Event Player, First Of(Event Player.Target_Order)) < Event Player.Secondary_Min, 16);
		End;
		If(Array Contains(Event Player.Hold, Event Player.Current_Heal_Friendlys) == True);
			Start Holding Button(Event Player, Event Player.Current_Heal_Friendlys);
			Wait Until(Ability Cooldown(Event Player, Event Player.Current_Heal_Friendlys) > 0 || !Entity Exists(First Of(
				Event Player.Target_Order)) || Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
				Event Player.Target_Order)), Barriers Do Not Block LOS), Event Player.Charging_Time == 0 ? 3 : Event Player.Charging_Time);
			Stop Holding Button(Event Player, Event Player.Current_Heal_Friendlys);
		Else If(Array Contains(Event Player.Confirm, Event Player.Current_Heal_Friendlys) == True);
			Press Button(Event Player, Event Player.Current_Heal_Friendlys);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Event Player.Current_Heal_Friendlys) == True);
			Press Button(Event Player, Event Player.Current_Heal_Friendlys);
			Wait Until(Ability Cooldown(Event Player, Event Player.Current_Heal_Friendlys) > 0 || !Entity Exists(First Of(
				Event Player.Target_Order)) || Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
				Event Player.Target_Order)), Barriers Do Not Block LOS), 2.500);
			Press Button(Event Player, Event Player.Current_Heal_Friendlys);
		Else;
			Press Button(Event Player, Event Player.Current_Heal_Friendlys);
		End;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Stop Primary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		((Team Of(First Of(Event Player.Target_Order)) == Team Of(Event Player) && !Array Contains(Event Player.Heal_Friendlys, Button(
			Primary Fire))) || !Entity Exists(First Of(Event Player.Target_Order)) || Distance Between(Position Of(Event Player), First Of(
			Event Player.Target_Order)) <= Event Player.Primary_Min || !Is In Line of Sight(Eye Position(Event Player), Eye Position(
			First Of(Event Player.Target_Order)), Barriers Do Not Block LOS) || Distance Between(Position Of(Event Player), First Of(
			Event Player.Target_Order)) > Event Player.Primary_Max) == True;
		(Hero Being Duplicated(Event Player) == Hero(Lifeweaver) || Hero Of(Event Player) == Hero(Lifeweaver) ? !Is Firing Primary(
			Event Player) && !Is In Alternate Form(Event Player) : !Is Firing Primary(Event Player)) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Fire Primary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array Contains(Event Player.Heal_Friendlys, Button(Primary Fire)) == False;
		Event Player.Primary_Max > 0;
		Is Alive(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Team Of(Event Player) != Team Of(First Of(Event Player.Target_Order));
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Distance Between(Position Of(Event Player), First Of(Event Player.Target_Order)) > Event Player.Primary_Min;
		Distance Between(Position Of(Event Player), First Of(Event Player.Target_Order)) <= Event Player.Primary_Max;
		Is Dummy Bot(Event Player) == True;
		Is Firing Primary(Event Player) != True;
		(Array Contains(Event Player.Confirm, Button(Ultimate)) ? !Is Using Ultimate(Event Player) : Is Alive(Event Player)) == True;
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 1);
		Event Player.Aim_Arc = Global.Primary_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))];
		Wait(Max(Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))), Null,
			All Players(All Teams), False), Eye Position(First Of(Event Player.Target_Order))) / 320, 0.250), Abort When False);
		If(Hero Being Duplicated(Event Player) == Hero(Mercy) || Hero Of(Event Player) == Hero(Mercy));
			Set Weapon(Event Player, 2);
		End;
		If(Array Contains(Event Player.Charging, Button(Primary Fire)) == True);
			While(Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
				&& Entity Exists(First Of(Event Player.Target_Order)) && Is Alive(Event Player) && Distance Between(Position Of(Event Player),
				First Of(Event Player.Target_Order)) > Event Player.Primary_Min && Distance Between(Position Of(Event Player), First Of(
				Event Player.Target_Order)) <= Event Player.Primary_Max);
				If(Array Contains(Event Player.Hold, Button(Primary Fire)) == True);
					Start Holding Button(Event Player, Button(Primary Fire));
					Wait(Event Player.Charging_Time, Ignore Condition);
					Stop Holding Button(Event Player, Button(Primary Fire));
				Else;
					Wait(Event Player.Charging_Time, Ignore Condition);
					Press Button(Event Player, Button(Primary Fire));
				End;
			End;
		Else;
			Start Holding Button(Event Player, Button(Primary Fire));
		End;
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Stop Secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Lifeweaver) || Hero Of(Event Player) == Hero(Lifeweaver) ? Is Firing Primary(
			Event Player) && Is In Alternate Form(Event Player) : Is Firing Secondary(Event Player)) == True;
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		((Team Of(First Of(Event Player.Target_Order)) == Team Of(Event Player) && !Array Contains(Event Player.Heal_Friendlys, Button(
			Secondary Fire))) || !Entity Exists(First Of(Event Player.Target_Order)) || Distance Between(Position Of(Event Player),
			First Of(Event Player.Target_Order)) < Event Player.Secondary_Min || !Is In Line of Sight(Eye Position(Event Player),
			Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS) || Distance Between(Position Of(Event Player),
			First Of(Event Player.Target_Order)) > Event Player.Secondary_Max) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Fire Secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Lifeweaver) || Hero Of(Event Player) == Hero(Lifeweaver) ? !Is Firing Primary(
			Event Player) : !Is Firing Secondary(Event Player)) == True;
		Event Player.Secondary_Max > 0;
		Is Alive(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Team Of(Event Player) != Team Of(First Of(Event Player.Target_Order));
		Distance Between(Position Of(Event Player), First Of(Event Player.Target_Order)) > Event Player.Secondary_Min;
		Distance Between(Position Of(Event Player), First Of(Event Player.Target_Order)) < Event Player.Secondary_Max;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is Dummy Bot(Event Player) == True;
		Array Contains(Event Player.Heal_Friendlys, Button(Secondary Fire)) == False;
		(Array Contains(Event Player.Confirm, Button(Ultimate)) ? !Is Using Ultimate(Event Player) : Is Alive(Event Player)) == True;
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 1);
		Event Player.Aim_Arc = Global.Secondary_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))];
		Wait(Max(Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))), Null,
			All Players(All Teams), False), Eye Position(First Of(Event Player.Target_Order))) / 320, 0.250), Abort When False);
		If(Array Contains(Event Player.Charging, Button(Secondary Fire)) == True);
			While(Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
				&& Entity Exists(First Of(Event Player.Target_Order)) && Is Alive(Event Player) && Distance Between(Position Of(Event Player),
				First Of(Event Player.Target_Order)) > Event Player.Secondary_Min && Distance Between(Position Of(Event Player), First Of(
				Event Player.Target_Order)) <= Event Player.Secondary_Max);
				If(Array Contains(Event Player.Hold, Button(Secondary Fire)) == True);
					Start Holding Button(Event Player, Button(Secondary Fire));
					Wait(Event Player.Charging_Time, Ignore Condition);
					Stop Holding Button(Event Player, Button(Secondary Fire));
				Else;
					Wait(Event Player.Charging_Time, Ignore Condition);
					Press Button(Event Player, Button(Secondary Fire));
				End;
			End;
		Else;
			Start Holding Button(Event Player, Button(Secondary Fire));
		End;
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Offensive Ability")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Offensive != Empty Array;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Team Of(Event Player) != Team Of(First Of(Event Player.Target_Order));
		Is Alive(Event Player) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is In View Angle(Event Player, Eye Position(First Of(Event Player.Target_Order)), 15) == True;
		Is Dummy Bot(Event Player) == True;
		Is True For Any(Event Player.Offensive, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Offensive, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Offensive, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(Event Player.Offensive,
			Current Array Element))) == True;
	}

	actions
	{
		Event Player.Current_Offensive = Random Value In Array(Event Player.Offensive);
		Skip If(!Array Contains(Event Player.Use_If_Shield, Event Player.Current_Offensive) && !Is In Line of Sight(Eye Position(
			Event Player), Eye Position(First Of(Event Player.Target_Order)), Enemy Barriers Block LOS), 38);
		If(Event Player.Current_Offensive == Button(Ability 1));
			Skip If(Distance Between(Event Player, First Of(Event Player.Target_Order)) > Event Player.Ability1_Max || Distance Between(
				Event Player, First Of(Event Player.Target_Order)) < Event Player.Ability1_Min, 36);
		Else;
			Skip If(Distance Between(Event Player, First Of(Event Player.Target_Order)) > Event Player.Ability2_Max || Distance Between(
				Event Player, First Of(Event Player.Target_Order)) < Event Player.Ability2_Min, 34);
		End;
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = (Event Player.Current_Mobility == Button(Ability 1) ? Global.Ability1_Arc : Global.Ability2_Arc)
			[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(
			Event Player))];
		Wait(Max(Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))), Null,
			All Players(All Teams), False), Eye Position(First Of(Event Player.Target_Order))) / 320, 0.250), Abort When False);
		If(Hero Being Duplicated(Event Player) == Hero(Orisa) || Hero Of(Event Player) == Hero(Orisa));
			Stop Facing(Event Player);
			Start Facing(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 20), Has Status(Event Player,
				Knocked Down) || Has Status(Event Player, Asleep) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)
				? 0 : 320, To World, Direction and Turn Rate);
			Wait(0.100, Ignore Condition);
		End;
		If(Array Contains(Event Player.Hold, Event Player.Current_Offensive) == True);
			Start Holding Button(Event Player, Event Player.Current_Offensive);
			Wait Until(Ability Cooldown(Event Player, Event Player.Current_Offensive) > 0 || !Entity Exists(First Of(
				Event Player.Target_Order)) || Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
				Event Player.Target_Order)), Barriers Do Not Block LOS),
				Event Player.Charging_Time != Null ? Event Player.Charging_Time : 999999);
			Stop Holding Button(Event Player, Event Player.Current_Offensive);
		Else If(Array Contains(Event Player.Confirm, Event Player.Current_Offensive) == True);
			Press Button(Event Player, Event Player.Current_Offensive);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Event Player.Current_Offensive) == True);
			Skip If(Array Contains(Event Player.Alternative_Form, Event Player.Current_Offensive) ? Is In Alternate Form(Event Player) : (
				Event Player.Current_Offensive == Button(Ability 1) ? Is Using Ability 1(Event Player) : Is Using Ability 2(Event Player)), 2);
			Press Button(Event Player, Event Player.Current_Offensive);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Wait Until((Array Contains(Event Player.Alternative_Form, Event Player.Current_Offensive) ? !Is In Alternate Form(Event Player)
				: !(Event Player.Current_Offensive == Button(Ability 1) ? Is Using Ability 1(Event Player) : Is Using Ability 2(Event Player)))
				|| !Entity Exists(First Of(Event Player.Target_Order)) || Is Dead(Event Player) || !Is In Line of Sight(Eye Position(
				Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS), 9999);
			Skip If(Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? !Is In Alternate Form(Event Player) : (
				Event Player.Current_Mobility == Button(Ability 1) ? !Is Using Ability 1(Event Player) : !Is Using Ability 2(Event Player)),
				1);
			Press Button(Event Player, Event Player.Current_Offensive);
		Else;
			Press Button(Event Player, Event Player.Current_Offensive);
		End;
		Event Player.Can_Change_Arc = True;
		Call Subroutine(AI_Start_Facing);
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Defence Ability")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.Defensive != Empty Array;
		Is Alive(Event Player) == True;
		Is True For Any(Event Player.Defensive, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Defensive, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Defensive, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(Event Player.Defensive,
			Current Array Element))) == True;
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = (Event Player.Current_Mobility == Button(Ability 1) ? Global.Ability1_Arc : Global.Ability2_Arc)
			[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(
			Event Player))];
		Event Player.Current_Defensive = Random Value In Array(Event Player.Defensive);
		If(Hero Being Duplicated(Event Player) == Hero(Baptiste) || Hero Of(Event Player) == Hero(Baptiste));
			Stop Facing(Event Player);
			Start Facing(Event Player, Down, Is True For Any(Array(Has Status(Event Player, Knocked Down), Has Status(Event Player, Asleep),
				Has Status(Event Player, Frozen), Has Status(Event Player, Stunned)), Current Array Element == True)
				? 0 : Global.AI_Turn_Speed, To World, Direction and Turn Rate);
			Wait(0.100, Ignore Condition);
		Else If(Hero Being Duplicated(Event Player) == Hero(Mei) || Hero Of(Event Player) == Hero(Mei));
			Stop Facing(Event Player);
			Start Facing(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 10), Is True For Any(Array(Has Status(
				Event Player, Knocked Down), Has Status(Event Player, Asleep), Has Status(Event Player, Frozen), Has Status(Event Player,
				Stunned)), Current Array Element == True) ? 0 : Global.AI_Turn_Speed, To World, Direction and Turn Rate);
			Wait(0.100, Ignore Condition);
		End;
		If(Array Contains(Event Player.Hold, Event Player.Current_Defensive) == True);
			Start Holding Button(Event Player, Event Player.Current_Defensive);
			Wait Until(Ability Cooldown(Event Player, Event Player.Current_Defensive) > 0 || !Entity Exists(First Of(
				Event Player.Target_Order)) || Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
				Event Player.Target_Order)), Barriers Do Not Block LOS), 2.500);
			Stop Holding Button(Event Player, Event Player.Current_Defensive);
		Else If(Array Contains(Event Player.Confirm, Event Player.Current_Defensive) == True);
			Press Button(Event Player, Event Player.Current_Defensive);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Event Player.Current_Defensive) == True);
			Press Button(Event Player, Event Player.Current_Defensive);
			Wait Until(Ability Cooldown(Event Player, Event Player.Current_Defensive) > 0 || !Entity Exists(First Of(
				Event Player.Target_Order)) || Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
				Event Player.Target_Order)), Barriers Do Not Block LOS), 2.500);
			Press Button(Event Player, Event Player.Current_Defensive);
		Else;
			Press Button(Event Player, Event Player.Current_Defensive);
		End;
		If(Hero Being Duplicated(Event Player) == Hero(Mei) || Hero Of(Event Player) == Hero(Mei) || Hero Being Duplicated(Event Player)
			== Hero(Baptiste) || Hero Of(Event Player) == Hero(Baptiste));
			Wait(0.100, Ignore Condition);
			Stop Facing(Event Player);
			Call Subroutine(AI_Start_Facing);
		End;
		Event Player.Can_Change_Arc = True;
	}
}

rule("Use Mobility")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.Mobility != Empty Array;
		Magnitude Of(Throttle Of(Event Player)) != 0;
		Is Alive(Event Player) == True;
		(!Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			|| !Entity Exists(First Of(Event Player.Target_Order))) == True;
		Distance Between(Position Of(Event Player), Is In Line of Sight(Eye Position(Event Player), Event Player.Walk_To_Position,
			Barriers Do Not Block LOS) ? Event Player.Walk_To_Position : Event Player.Current_Node) > Max(Event Player.Mobility_Distance,
			Is In Line of Sight(Eye Position(Event Player), Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 2 : 0);
		Is True For Any(Event Player.Mobility, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Mobility, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Mobility, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(Event Player.Mobility,
			Current Array Element))) == True;
	}

	actions
	{
		Skip If(Ray Cast Hit Position(Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 0)
			* Event Player.Mobility_Distance, Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player),
			0) * Event Player.Mobility_Distance - Vector(0, 5, 0), Null, All Players(All Teams), False) == Eye Position(Event Player)
			+ Direction From Angles(Horizontal Facing Angle Of(Event Player), 0) * Event Player.Mobility_Distance - Vector(0, 5, 0), 24);
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = (Event Player.Current_Mobility == Button(Ability 1) ? Global.Ability1_Arc : Global.Ability2_Arc)
			[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(
			Event Player))];
		Event Player.Current_Mobility = Random Value In Array(Event Player.Mobility);
		If(Array Contains(Event Player.Hold, Event Player.Current_Mobility) == True);
			Start Holding Button(Event Player, Event Player.Current_Mobility);
			Wait Until(Is Dead(Event Player) || Entity Exists(First Of(Event Player.Target_Order)) || Distance Between(Position Of(
				Event Player), Event Player.Walk_To_Position) < Event Player.Mobility_Distance, 9999);
			Stop Holding Button(Event Player, Event Player.Current_Mobility);
		Else If(Array Contains(Event Player.Confirm, Event Player.Current_Mobility) == True);
			Press Button(Event Player, Event Player.Current_Mobility);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Event Player.Current_Mobility) == True);
			Wait Until(!Entity Exists(First Of(Event Player.Target_Order)), 99999);
			Skip If(Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? Is In Alternate Form(Event Player) : (
				Event Player.Current_Mobility == Button(Ability 1) ? Is Using Ability 1(Event Player) : Is Using Ability 2(Event Player)), 2);
			Press Button(Event Player, Event Player.Current_Mobility);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Wait Until((Entity Exists(First Of(Event Player.Target_Order)) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
				Event Player.Target_Order), Barriers Do Not Block LOS)) || (Distance Between(Event Player, Event Player.Walk_To_Position) < 2)
				|| (Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? !Is In Alternate Form(Event Player) : !(
				Event Player.Current_Mobility == Button(Ability 1) ? Is Using Ability 1(Event Player) : Is Using Ability 2(Event Player))),
				9999);
			Skip If(Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? !Is In Alternate Form(Event Player) : (
				Event Player.Current_Mobility == Button(Ability 1) ? !Is Using Ability 1(Event Player) : !Is Using Ability 2(Event Player)),
				1);
			Press Button(Event Player, Event Player.Current_Mobility);
		Else;
			Press Button(Event Player, Event Player.Current_Mobility);
		End;
		Event Player.Can_Change_Arc = True;
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Heal Ability")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.Healing != Empty Array;
		Normalized Health(Event Player) < (Entity Exists(First Of(Event Player.Target_Order)) ? 0.500 : 1);
		Is True For Any(Event Player.Healing, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Healing, Current Array Element)) && (Array Contains(
			Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element) > 0 : Array Contains(
			Event Player.Healing, Current Array Element)) && (Array Contains(Event Player.Resource, Current Array Element)
			? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(Event Player.Healing, Current Array Element)))
			== True;
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = (Event Player.Current_Mobility == Button(Ability 1) ? Global.Ability1_Arc : Global.Ability2_Arc)
			[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(
			Event Player))];
		Event Player.Current_Healing = Random Value In Array(Event Player.Healing);
		If(Hero Being Duplicated(Event Player) == Hero(Ana) || Hero Of(Event Player) == Hero(Ana));
			Stop Facing(Event Player);
			Start Facing(Event Player, Down, Has Status(Event Player, Knocked Down) || Has Status(Event Player, Asleep) || Has Status(
				Event Player, Frozen) || Has Status(Event Player, Stunned) ? 0 : 320, To World, Direction and Turn Rate);
			Wait(0.100, Ignore Condition);
		End;
		If(Array Contains(Event Player.Hold, Event Player.Current_Healing) == True);
			Start Holding Button(Event Player, Event Player.Current_Healing);
			Wait Until(Ability Cooldown(Event Player, Event Player.Current_Healing) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 3);
			Stop Holding Button(Event Player, Event Player.Current_Healing);
		Else If(Array Contains(Event Player.Confirm, Event Player.Current_Healing) == True);
			Press Button(Event Player, Event Player.Current_Healing);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Event Player.Current_Healing) == True);
			Skip If(Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? Is In Alternate Form(Event Player) : (
				Event Player.Current_Mobility == Button(Ability 1) ? Is Using Ability 1(Event Player) : Is Using Ability 2(Event Player)), 2);
			Press Button(Event Player, Event Player.Current_Healing);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Wait Until((Entity Exists(First Of(Event Player.Target_Order)) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
				Event Player.Target_Order), Barriers Do Not Block LOS)) || (Health(Event Player) == Max Health(Event Player)) || (
				Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? !Is In Alternate Form(Event Player) : !(
				Event Player.Current_Mobility == Button(Ability 1) ? Is Using Ability 1(Event Player) : Is Using Ability 2(Event Player))),
				9999);
			Skip If(Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? !Is In Alternate Form(Event Player) : (
				Event Player.Current_Mobility == Button(Ability 1) ? !Is Using Ability 1(Event Player) : !Is Using Ability 2(Event Player)),
				1);
			Press Button(Event Player, Event Player.Current_Healing);
		Else;
			Press Button(Event Player, Event Player.Current_Healing);
		End;
		Event Player.Can_Change_Arc = True;
		Call Subroutine(AI_Start_Facing);
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Normalized Health(Event Player) <= Event Player.Ultimate_Health;
		Count Of(Filtered Array(Event Player.Target_Order, Team Of(First Of(Event Player.Target_Order))
			== Event Player.Ultimate_Target_Team && Distance Between(Event Player, First Of(Event Player.Target_Order))
			< Event Player.Use_Ultimate_Max && Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element),
			Barriers Do Not Block LOS))) >= Min(Event Player.Ultimate_Targets, Number Of Players(Opposite Team Of(Team Of(Event Player))));
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = Global.Ultimate_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))];
		Wait(Max(Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))), Null,
			All Players(All Teams), False), Eye Position(First Of(Event Player.Target_Order))) / 320, 0.250), Abort When False);
		Skip If(Hero Being Duplicated(Event Player) == Hero(D.Va) || Hero Of(Event Player) == Hero(D.Va) || (Hero Of(Event Player) == Hero(
			Echo) && !Is Duplicating(Event Player)), 2);
		Event Player.Primary_Max = Event Player.Ultimate_Max;
		Event Player.Primary_Min = Event Player.Ultimate_Min;
		If(Hero Being Duplicated(Event Player) == Hero(Baptiste) || Hero Of(Event Player) == Hero(Baptiste));
			Stop Facing(Event Player);
			Start Facing(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 10), Has Status(Event Player,
				Knocked Down) || Has Status(Event Player, Asleep) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)
				? 0 : 320, To World, Direction and Turn Rate);
			Wait(0.100, Ignore Condition);
		End;
		If(Array Contains(Event Player.Hold, Button(Ultimate)) == True);
			Start Holding Button(Event Player, Button(Ultimate));
			Wait Until(!Is Using Ultimate(Event Player) || !Entity Exists(First Of(Event Player.Target_Order)) || Is Dead(Event Player)
				|| !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Stop Holding Button(Event Player, Button(Ultimate));
		Else If(Array Contains(Event Player.Confirm, Button(Ultimate)) == True);
			Press Button(Event Player, Button(Ultimate));
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Button(Ultimate)) == True);
			Press Button(Event Player, Button(Ultimate));
			Wait Until(!Is Using Ultimate(Event Player) || !Entity Exists(First Of(Event Player.Target_Order)) || Is Dead(Event Player)
				|| !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Press Button(Event Player, Button(Ultimate));
		Else;
			Press Button(Event Player, Button(Ultimate));
		End;
		Wait Until(Is Dead(Event Player), Max(Event Player.Ultimate_Duration, 1));
		Event Player.Primary_Max = Global.Primary_Max[Index Of Array Value(Global.All_Heros, Hero Of(Event Player))];
		Event Player.Primary_Min = Global.Primary_Min[Index Of Array Value(Global.All_Heros, Hero Of(Event Player))];
		Event Player.Can_Change_Arc = True;
		Call Subroutine(AI_Start_Facing);
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Offensive Secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.Secondary_Offensive != Empty Array;
		Team Of(Event Player) != Team Of(First Of(Event Player.Target_Order));
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is In View Angle(Event Player, Eye Position(First Of(Event Player.Target_Order)), 15) == True;
		Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))) <= Event Player.Secondary_Max;
		Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))) >= Event Player.Secondary_Min;
		Is True For Any(Event Player.Secondary_Offensive, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Secondary_Offensive, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Secondary_Offensive, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(
			Event Player.Secondary_Offensive, Current Array Element))) == True;
	}

	actions
	{
		Skip If(!Array Contains(Event Player.Use_If_Shield, Button(Secondary Fire)) && !Is In Line of Sight(Eye Position(Event Player),
			Eye Position(First Of(Event Player.Target_Order)), Enemy Barriers Block LOS), 20);
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = Global.Secondary_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))];
		Wait(Max(Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))), Null,
			All Players(All Teams), False), Eye Position(First Of(Event Player.Target_Order))) / 320, 0.250), Abort When False);
		If(Array Contains(Event Player.Hold, Button(Secondary Fire)) == True);
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), Event Player.Charging_Time != Null ? Event Player.Charging_Time : 999999);
			Stop Holding Button(Event Player, Button(Secondary Fire));
		Else If(Array Contains(Event Player.Confirm, Button(Secondary Fire)) == True);
			Press Button(Event Player, Button(Secondary Fire));
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Button(Secondary Fire)) == True);
			Press Button(Event Player, Button(Secondary Fire));
			Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Press Button(Event Player, Button(Secondary Fire));
		Else;
			Press Button(Event Player, Button(Secondary Fire));
		End;
		Event Player.Can_Change_Arc = True;
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Defence Secondary")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.Secondary_Defensive != Empty Array;
		Is True For Any(Event Player.Secondary_Defensive, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Secondary_Defensive, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Secondary_Defensive, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(
			Event Player.Secondary_Defensive, Current Array Element))) == True;
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = Global.Secondary_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))];
		If(Array Contains(Event Player.Hold, Button(Secondary Fire)) == True);
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Stop Holding Button(Event Player, Button(Secondary Fire));
		Else If(Array Contains(Event Player.Confirm, Button(Secondary Fire)) == True);
			Press Button(Event Player, Button(Secondary Fire));
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Button(Secondary Fire)) == True);
			Press Button(Event Player, Button(Secondary Fire));
			Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Press Button(Event Player, Button(Secondary Fire));
		Else;
			Press Button(Event Player, Button(Secondary Fire));
		End;
		Event Player.Can_Change_Arc = True;
	}
}

rule("Use Heal Secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.Secondary_Healing != Empty Array;
		Normalized Health(Event Player) < (Entity Exists(First Of(Event Player.Target_Order)) ? 0.500 : 1);
		Is True For Any(Event Player.Secondary_Healing, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Secondary_Healing, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Secondary_Healing, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(
			Event Player.Secondary_Healing, Current Array Element))) == True;
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = Global.Secondary_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))];
		If(Array Contains(Event Player.Hold, Button(Secondary Fire)) == True);
			Wait Until(!Entity Exists(First Of(Event Player.Target_Order)), 99999);
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Stop Holding Button(Event Player, Button(Secondary Fire));
		Else If(Array Contains(Event Player.Confirm, Button(Secondary Fire)) == True);
			Press Button(Event Player, Button(Secondary Fire));
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Button(Secondary Fire)) == True);
			Press Button(Event Player, Button(Secondary Fire));
			Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Press Button(Event Player, Button(Secondary Fire));
		Else;
			Press Button(Event Player, Button(Secondary Fire));
		End;
		Event Player.Can_Change_Arc = True;
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bot Hero Restrictions")
{
	event
	{
		Subroutine;
		Heros;
	}

	actions
	{
		If(Slot Of(Event Player) <= 5);
			Event Player.Role_Lock = Slot Of(Event Player) == 1 ? Global.Slot1_Role_Lock : (Slot Of(Event Player)
				== 2 ? Global.Slot2_Role_Lock : (Slot Of(Event Player) == 3 ? Global.Slot3_Role_Lock : (Slot Of(Event Player)
				== 4 ? Global.Slot4_Role_Lock : (Slot Of(Event Player) == 5 ? Global.Slot5_Role_Lock : (Slot Of(Event Player)
				== 6 ? Global.Slot6_Role_Lock : 0)))));
			If(Event Player.Role_Lock == 0);
				Event Player.Hero_Pool = All Heroes;
				Event Player.Role_Lock = Custom String("Any");
				Event Player.Role = Custom String("Any");
			Else If(Event Player.Role_Lock == 1);
				Event Player.Hero_Pool = All Tank Heroes;
				Event Player.Role_Lock = Custom String("Tank");
				Event Player.Role = Custom String("Tank");
			Else If(Event Player.Role_Lock == 2);
				Event Player.Hero_Pool = All Damage Heroes;
				Event Player.Role_Lock = Custom String("DPS");
				Event Player.Role = Custom String("DPS");
			Else If(Event Player.Role_Lock == 3);
				Event Player.Hero_Pool = All Support Heroes;
				Event Player.Role_Lock = Custom String("Support");
				Event Player.Role = Custom String("Support");
			Else If(Event Player.Role_Lock == 4);
				Event Player.Hero_Pool = Array(Hero(Reinhardt), Hero(Winston), Hero(Orisa), Hero(Wrecking Ball));
				Event Player.Role_Lock = Custom String("Main Tank");
				Event Player.Role = Custom String("Main Tank");
			Else If(Event Player.Role_Lock == 5);
				Event Player.Hero_Pool = Remove From Array(All Tank Heroes, Array(Hero(Reinhardt), Hero(Winston), Hero(Orisa), Hero(
					Wrecking Ball)));
				Event Player.Role_Lock = Custom String("Off Tank");
				Event Player.Role = Custom String("Off Tank");
			Else If(Event Player.Role_Lock == 6);
				Event Player.Hero_Pool = Array(Hero(Mercy), Hero(Lúcio), Hero(Brigitte), Hero(Kiriko), Hero(Lifeweaver));
				Event Player.Role_Lock = Custom String("Main Support");
				Event Player.Role = Custom String("Main Support");
			Else If(Event Player.Role_Lock == 7);
				Event Player.Hero_Pool = Remove From Array(All Support Heroes, Array(Hero(Mercy), Hero(Lúcio), Hero(Brigitte), Hero(Kiriko), Hero(
					Lifeweaver)));
				Event Player.Role_Lock = Custom String("Off Support");
				Event Player.Role = Custom String("Off Support");
			End;
		Else;
			Event Player.Hero_Pool = All Heroes;
			Event Player.Role_Lock = Custom String("Any");
			Event Player.Role = Custom String("Any");
		End;
	}
}

rule("Bot Died Swap Hero")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait Until(Is Alive(Event Player), 9.900);
		Abort If(Is Alive(Event Player));
		Teleport(Event Player, Random Value In Array(Spawn Points(Team Of(Event Player))));
		Stop Holding Button(Event Player, Button(Primary Fire));
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Stop Holding Button(Event Player, Button(Ability 1));
		Stop Holding Button(Event Player, Button(Ability 2));
		Stop Holding Button(Event Player, Button(Ultimate));
		Resurrect(Event Player);
		If(Hero Of(Event Player) == Hero(D.Va));
			Set Ultimate Charge(Event Player, 100);
			Press Button(Event Player, Button(Ultimate));
		End;
		Abort If(!Global.Random_Hero || (Global.Swap_After_Ult && Event Player.Ultimates_Used >= Player Stat(Event Player,
			Ultimates Used)));
		If(Is Team On Offense(Team Of(Event Player)) == True);
			Modify Global Variable(T2_Available_Heros, Append To Array, Hero Of(Event Player));
		Else;
			Modify Global Variable(T2_Available_Heros, Append To Array, Hero Of(Event Player));
		End;
		Event Player.Hero = Random Value In Array(Filtered Array(Is Team On Offense(Team Of(Event Player))
			? Global.T2_Available_Heros : Global.T1_Available_Heros, Array Contains(Event Player.Hero_Pool, Current Array Element)));
		Event Player.Ultimates_Used = Player Stat(Event Player, Ultimates Used);
	}
}

rule("Swap Hero If Duplicate Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Event Player.Hero;
		Number Of Heroes(Hero Of(Event Player), Team Of(Event Player)) > Workshop Setting Integer(Custom String("AI"), Custom String(
			"Hero Limit"), 1, 1, 6, 13);
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Wait(Random Real(0, 3), Abort When False);
		Event Player.Hero = Random Value In Array(Filtered Array(Is Team On Offense(Team Of(Event Player))
			? Global.T2_Available_Heros : Global.T1_Available_Heros, Array Contains(Event Player.Hero_Pool, Current Array Element)));
		Start Forcing Player To Be Hero(Event Player, Event Player.Hero);
		If(Is Team On Offense(Team Of(Event Player)) == True);
			Modify Global Variable(T2_Available_Heros, Remove From Array By Value, Hero Of(Event Player));
		Else;
			Modify Global Variable(T1_Available_Heros, Remove From Array By Value, Hero Of(Event Player));
		End;
		Call Subroutine(Hero_Variables);
		Event Player.Ultimates_Used = Player Stat(Event Player, Ultimates Used);
		If((Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander).Command_Mode == Custom String(
			"Global"));
			Start Forcing Player Outlines(Event Player, Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander,
				True, Color(Green), Always);
		Else If((Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander).Selected_AI == Event Player && (
				Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander).Command_Mode == Custom String(
				"Single"));
			Start Forcing Player Outlines(Event Player, Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander,
				True, Color(Green), Always);
		End;
	}
}

rule("Swap Hero If Not Correct Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Event Player.Hero;
	}

	actions
	{
		Wait(0.100, Abort When False);
		If(Is Team On Offense(Team Of(Event Player)) == True);
			Modify Global Variable(T2_Available_Heros, Append To Array, Hero Of(Event Player));
		Else;
			Modify Global Variable(T1_Available_Heros, Append To Array, Hero Of(Event Player));
		End;
		Start Forcing Player To Be Hero(Event Player, Event Player.Hero);
		If(Is Team On Offense(Team Of(Event Player)) == True);
			Modify Global Variable(T2_Available_Heros, Remove From Array By Value, Hero Of(Event Player));
		Else;
			Modify Global Variable(T1_Available_Heros, Remove From Array By Value, Hero Of(Event Player));
		End;
		Call Subroutine(Hero_Variables);
		Event Player.Ultimates_Used = Player Stat(Event Player, Ultimates Used);
		Wait(1, Ignore Condition);
		If((Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander).Command_Mode == Custom String(
			"Global"));
			Start Forcing Player Outlines(Event Player, Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander,
				True, Color(Green), Always);
		Else If((Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander).Selected_AI == Event Player && (
				Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander).Command_Mode == Custom String(
				"Single"));
			Start Forcing Player Outlines(Event Player, Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander,
				True, Color(Green), Always);
		End;
		Wait(2, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Passive Ability")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Passive != Custom String("None");
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Team Of(First Of(Event Player.Target_Order)) != Team Of(Event Player);
		(Event Player.Passive == Custom String("Eject") ? Is In Alternate Form(Event Player) : (Event Player.Passive == Custom String(
			"Exo Boots") || Event Player.Passive == Custom String("Hover Jets") || Event Player.Passive == Custom String("Glide")
			? Entity Exists(First Of(Event Player.Target_Order)) : Is Dead(Event Player))) == True;
	}

	actions
	{
		If(Event Player.Passive == Custom String("Eject"));
			Event Player.Primary_Max = 25;
			Event Player.Primary_Min = 20;
			Event Player.Ultimate_Health = 1;
			Event Player.Ultimate_Targets = 0;
			Event Player.Offensive = Empty Array;
			Event Player.Defensive = Empty Array;
			Event Player.Mobility = Empty Array;
			Event Player.Healing = Empty Array;
			Event Player.Secondary_Fire = Empty Array;
			Event Player.Secondary_Offensive = Empty Array;
			Event Player.Secondary_Defensive = Empty Array;
			Event Player.Secondary_Healing = Empty Array;
			Event Player.Hold = Empty Array;
			Event Player.Confirm = Empty Array;
			Event Player.Toggle = Empty Array;
			Event Player.Cooldown = Empty Array;
			Event Player.Charge = Empty Array;
			Event Player.Resource = Empty Array;
			Event Player.Charging = Empty Array;
			Event Player.Heal_Friendlys = Empty Array;
			Wait Until(!Is In Alternate Form(Event Player), 99999);
			Call Subroutine(Hero_Variables);
		Else If(Event Player.Passive == Custom String("Exo Boots"));
			Wait Until(Is On Ground(Event Player), 99999);
			Start Holding Button(Event Player, Button(Crouch));
			Wait Until(!Entity Exists(First Of(Event Player.Target_Order)), Event Player.Charging_Time);
			Stop Holding Button(Event Player, Button(Crouch));
			Skip If(!Entity Exists(First Of(Event Player.Target_Order)), 1);
			Press Button(Event Player, Button(Jump));
		Else If(Event Player.Passive == Custom String("Hover Jets"));
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait Until(!Entity Exists(First Of(Event Player.Target_Order)), 99999);
			Stop Holding Button(Event Player, Button(Secondary Fire));
		Else If(Event Player.Passive == Custom String("Glide"));
			Start Holding Button(Event Player, Button(Jump));
			Wait Until(!Entity Exists(First Of(Event Player.Target_Order)), 99999);
			Stop Holding Button(Event Player, Button(Jump));
		End;
	}
}

rule("Reload")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		((Max Ammo(Event Player, 0) > 0 && Ammo(Event Player, 0) == 0) || (Max Ammo(Event Player, 1) > 0 && Ammo(Event Player, 1) == 0))
			== True;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		!Is Reloading(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Reload));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("----------------------------------- AI ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- Miscellaneous ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Swap Hero Once Requested")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.Requested_Hero != Null;
		Hero Of(Event Player) != Event Player.Requested_Hero;
	}

	actions
	{
		Wait Until(Is In Spawn Room(Event Player), 99999);
		Event Player.Hero = Event Player.Requested_Hero;
		Event Player.Requested_Hero = Null;
	}
}

rule("Duplicate Set Variables")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Duplicating(Event Player) == True;
	}

	actions
	{
		Call Subroutine(Hero_Variables);
		Wait Until(!Is Duplicating(Event Player), 99999);
		Call Subroutine(Hero_Variables);
	}
}

rule("Widowmaker Primary Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Widowmaker) || Hero Of(Event Player) == Hero(Widowmaker)) == True;
		Is Firing Secondary(Event Player) == True;
		(Array Contains(Event Player.Hold, Button(Primary Fire)) || !Array Contains(Event Player.Charging, Button(Primary Fire))) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, Hold, Remove From Array By Value, Button(Primary Fire));
		Modify Player Variable(Event Player, Charging, Append To Array, Button(Primary Fire));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Widowmaker Primary Hold")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Widowmaker) || Hero Of(Event Player) == Hero(Widowmaker)) == True;
		Is Firing Secondary(Event Player) != True;
		(Array Contains(Event Player.Charging, Button(Primary Fire)) || !Array Contains(Event Player.Hold, Button(Primary Fire))) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, Charging, Remove From Array By Value, Button(Primary Fire));
		Modify Player Variable(Event Player, Hold, Append To Array, Button(Primary Fire));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Lúcio Use Speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Lúcio) || Hero Of(Event Player) == Hero(Lúcio)) == True;
		Is In Alternate Form(Event Player) != True;
		Normalized Health(Event Player) > 0.800;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(Event Player.Charging_Time, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Lúcio Use Heal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Lúcio) || Hero Of(Event Player) == Hero(Lúcio)) == True;
		Is In Alternate Form(Event Player) == True;
		Normalized Health(Event Player) < 0.800;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(Event Player.Charging_Time, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Mercy Resurrection")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Mercy) || Hero Of(Event Player) == Hero(Mercy)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == Null;
		(Number Of Dead Players(Team Of(Event Player)) > 0 && Distance Between(Event Player, First Of(Sorted Array(All Dead Players(
			Team Of(Event Player)), Distance Between(Event Player, Current Array Element)))) < 2.500) == True;
		Is Alive(Event Player) == True;
		Global.Use_Complex_Abilitys == True;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Create Bot")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Global.Bots_T1 < Global.Number_Of_Bots_T1 || Global.Bots_T2 < Global.Number_Of_Bots_T2) == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Skip If(Global.Bots_T1 >= Global.Number_Of_Bots_T1, 2);
		Create Dummy Bot(Random Value In Array(All Heroes), Team 1, Global.Bots_T1 + 1, Random Value In Array(Spawn Points(Team 1)),
			Vector(0, 0, 0));
		Global.Bots_T1 += 1;
		Skip If(Global.Bots_T2 >= Global.Number_Of_Bots_T2, 2);
		Create Dummy Bot(Random Value In Array(All Heroes), Team 2, Global.Bots_T2 + 1, Random Value In Array(Spawn Points(Team 2)),
			Vector(0, 0, 0));
		Global.Bots_T2 += 1;
		Loop If Condition Is True;
	}
}

disabled rule("----------------------------------- Miscellaneous ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- Subroutine ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Global")
{
	event
	{
		Subroutine;
		Global_Setup;
	}

	actions
	{
		Global.Vaild_Heros = Array(Hero(Reinhardt), Hero(Winston), Hero(Roadhog), Hero(Zarya), Hero(D.Va), Hero(Orisa), Hero(
			Wrecking Ball), Hero(Sigma), Hero(Mercy), Hero(Zenyatta), Hero(Lúcio), Hero(Ana), Hero(Brigitte), Hero(Moira), Hero(Baptiste),
			Hero(Reaper), Hero(Tracer), Hero(Hanzo), Hero(Torbjörn), Hero(Pharah), Hero(Widowmaker), Hero(Bastion), Hero(Symmetra), Hero(
			Genji), Hero(Cassidy), Hero(Junkrat), Hero(Soldier: 76), Hero(Mei), Hero(Sombra), Hero(Doomfist), Hero(Ashe), Hero(Echo), Hero(
			Junker Queen), Hero(Kiriko), Hero(Ramattra), Hero(Lifeweaver), Hero(Sojourn));
		Global.T1_Available_Heros = Global.Vaild_Heros;
		Global.T2_Available_Heros = Global.Vaild_Heros;
		Global.Hero_Prioritize_Order = Array(Hero(Mercy), Hero(Brigitte), Hero(Lúcio), Hero(Ana), Hero(Moira), Hero(Zenyatta), Hero(
			Baptiste), Hero(Wrecking Ball), Hero(Winston), Hero(Reinhardt), Hero(Sigma), Hero(Orisa), Hero(Zarya), Hero(D.Va), Hero(
			Roadhog), Hero(Sombra), Hero(Widowmaker), Hero(Doomfist), Hero(Tracer), Hero(Reaper), Hero(Genji), Hero(Symmetra), Hero(Hanzo),
			Hero(Mei), Hero(Torbjörn), Hero(Junkrat), Hero(Cassidy), Hero(Soldier: 76), Hero(Ashe), Hero(Echo), Hero(Bastion), Hero(
			Pharah));
		Global.Hero_Prioritize_Order = Sorted Array(Global.Hero_Prioritize_Order, Index Of Array Value(Global.Hero_Prioritize_Order,
			Current Array Element) * -1);
		Global.Swap_After_Ult = Workshop Setting Toggle(Custom String("AI"), Custom String("Only Swap Hero After Using Ultimate"), True,
			6);
		Global.Slot1_Role_Lock = Workshop Setting Combo(Custom String("Role Lock"), Custom String("Player 1"), 0, Array(Custom String(
			"Any"), Custom String("Tank"), Custom String("DPS"), Custom String("Support"), Custom String("Main Tank"), Custom String(
			"Off Tank"), Custom String("Main Support"), Custom String("Off Support")), 0);
		Global.Slot2_Role_Lock = Workshop Setting Combo(Custom String("Role Lock"), Custom String("Player 2"), 0, Array(Custom String(
			"Any"), Custom String("Tank"), Custom String("DPS"), Custom String("Support"), Custom String("Main Tank"), Custom String(
			"Off Tank"), Custom String("Main Support"), Custom String("Off Support")), 0);
		Global.Slot3_Role_Lock = Workshop Setting Combo(Custom String("Role Lock"), Custom String("Player 3"), 0, Array(Custom String(
			"Any"), Custom String("Tank"), Custom String("DPS"), Custom String("Support"), Custom String("Main Tank"), Custom String(
			"Off Tank"), Custom String("Main Support"), Custom String("Off Support")), 0);
		Global.Slot4_Role_Lock = Workshop Setting Combo(Custom String("Role Lock"), Custom String("Player 4"), 0, Array(Custom String(
			"Any"), Custom String("Tank"), Custom String("DPS"), Custom String("Support"), Custom String("Main Tank"), Custom String(
			"Off Tank"), Custom String("Main Support"), Custom String("Off Support")), 0);
		Global.Slot5_Role_Lock = Workshop Setting Combo(Custom String("Role Lock"), Custom String("Player 5"), 0, Array(Custom String(
			"Any"), Custom String("Tank"), Custom String("DPS"), Custom String("Support"), Custom String("Main Tank"), Custom String(
			"Off Tank"), Custom String("Main Support"), Custom String("Off Support")), 0);
		Global.Slot6_Role_Lock = Workshop Setting Combo(Custom String("Role Lock"), Custom String("Player 6"), 0, Array(Custom String(
			"Any"), Custom String("Tank"), Custom String("DPS"), Custom String("Support"), Custom String("Main Tank"), Custom String(
			"Off Tank"), Custom String("Main Support"), Custom String("Off Support")), 0);
	}
}

rule("Hero Values")
{
	event
	{
		Subroutine;
		Hero_Values;
	}

	actions
	{
		Global.All_Heros = Array(Hero(Reinhardt), Hero(Winston), Hero(Roadhog), Hero(Zarya), Hero(D.Va), Hero(Orisa), Hero(Wrecking Ball),
			Hero(Sigma), Hero(Mercy), Hero(Zenyatta), Hero(Lúcio), Hero(Ana), Hero(Brigitte), Hero(Moira), Hero(Baptiste), Hero(Reaper),
			Hero(Tracer), Hero(Hanzo), Hero(Torbjörn), Hero(Pharah), Hero(Widowmaker), Hero(Bastion), Hero(Symmetra), Hero(Genji), Hero(
			Cassidy), Hero(Junkrat), Hero(Soldier: 76), Hero(Mei), Hero(Sombra), Hero(Doomfist), Hero(Ashe), Hero(Echo), Hero(
			Junker Queen), Hero(Kiriko), Hero(Ramattra), Hero(Lifeweaver), Hero(Sojourn));
		Global.Passive = Array(Custom String("Steadfast"), Custom String("None"), Custom String("None"), Custom String("Energy"),
			Custom String("Eject"), Custom String("None"), Custom String("None"), Custom String("None"), Custom String("Regeneration"),
			Custom String("None"), Custom String("Wall Ride"), Custom String("None"), Custom String("Inspire"), Custom String("None"),
			Custom String("Exo Boots"), Custom String("The Reaping"), Custom String("None"), Custom String("Wall Climb"), Custom String(
			"None"), Custom String("Hover Jets"), Custom String("None"), Custom String("Ironclad"), Custom String("None"), Custom String(
			"Cyber-Agility"), Custom String("None"), Custom String("Total Mayhem"), Custom String("None"), Custom String("None"),
			Custom String("Opportunist"), Custom String("The Best Defence"), Custom String("None"), Custom String("Glide"), Custom String(
			"Adrenaline Rush"), Custom String("Wall Climb"), Custom String("None"), Custom String("Parting Gift"));
		Global.Primary_Max = Array(4, 8, 6, 14, 5, 40, 18, 18, 25, 20, 20, 35, 5, 15, 30, 8, 18, 30, 30, 30, 50, 40, 12, 20, 30, 30, 40,
			14, 25, 8, 40, 30, 25, 40, 50, 30, 40);
		Global.Primary_Min = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0);
		Global.Secondary_Max = Array(40, 30, 18, 30, 0, 35, 0, 0, 0, 50, 5, 35, 40, 20, 40, 0, 0, 0, 6, 0, 50, 35, 30, 6, 5, 8, 30, 40, 12,
			18, 40, 20, 15, 30, 20, 30, 50);
		Global.Secondary_Min = Array(5, 8, 6, 14, 0, 5, 0, 0, 0, 20, 0, 15, 7, 0, 0, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 14, 6, 0, 10, 0,
			0, 0, 0, 0, 0);
		Global.Ability1_Max = Array(25, 20, 20, 0, 20, 0, 0, 0, 20, 30, 0, 15, 15, 0, 0, 0, 0, 30, 0, 0, 0, 25, 0, 12, 0, 8, 0, 0, 0, 20,
			0, 0, 0, 25, 10, 0, 0);
		Global.Ability1_Min = Array(0, 14, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0);
		Global.Ability2_Max = Array(30, 0, 0, 25, 30, 0, 0, 25, 6, 30, 0, 35, 15, 20, 30, 0, 0, 25, 20, 12, 10, 0, 0, 0, 6, 20, 0, 0, 0, 0,
			30, 12, 6, 20, 20, 25, 25);
		Global.Ability2_Min = Array(0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 6, 0, 0, 0, 0,
			0, 0, 0);
		Global.Mobility_Distance = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 5, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5,
			0, 0, 0, 0, 12);
		Global.Charge_Time = Array(0, 1.500, 0, 0, 0, 4, 1, 1.200, 0, 4, 1, 0, 0, 0, 1, 0, 0, 1.200, 0, 0, 1.400, 2.500, 1.200, 0, 4, 0, 0,
			0, 0, 1.400, 0.100, 0, 0, 0, 0, 1, 0);
		Global.Use_Ultimate_Max = Array(20, 30, 15, 30, 25, 10, 15, 25, 25, 25, 25, 30, 25, 25, 30, 10, 6, 30, 30, 15, 100, 28, 30, 12, 40,
			15, 30, 25, 18, 8, 30, 30, 20, 30, 20, 30, 50);
		Global.Ultimate_Health = Array(1, 0.350, 1, 1, 1, 1, 1, 1, 1, 0.500, 0.600, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 0.350, 1, 1, 1, 1, 1);
		Global.Ultimate_Targets = Array(3, 1, 2, 3, 3, 3, 1, 3, 3, 3, 3, 1, 0, 2, 3, 2, 1, 2, 1, 2, 0, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2,
			3, 2, 3, 2);
		Global.Ultimate_Target_Team = Array(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 1, 0);
		Global.Ultimate_Max = Array(4, 4, 0, 14, 25, 25, 18, 24, 25, 20, 20, 35, 5, 20, 30, 0, 18, 30, 30, 0, 50, 25, 12, 6, 0, 0, 40, 14,
			25, 3, 40, 30, 25, 40, 50, 30, 30);
		Global.Ultimate_Min = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0);
		Global.Primary_Arc = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.500, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0);
		Global.Secondary_Arc = Array(0, 0, 0, 0.250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.400, 0, 0, 0, 0, 0, 0, 0.500, 0, 0, 0, 0.500, 0, 0, 0,
			0, 0, 0, 0.400, 0, 0, 0, 0);
		Global.Ability1_Arc = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.500, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0);
		Global.Ability2_Arc = Array(0, 0, 0, 0, 0, 0, 0, 0.200, 0, 0, 0, 0.350, 0, 0, 0.400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.500, 0, 0, 0,
			0, 0.400, 0, 0, 0.600, 0.600, 0, 0);
		Global.Ultimate_Arc = Array(0, 0, 0, 0.250, 0, 0, 0, -0.100, 0, 0, 0, 0, 0, 0, 0, 0, 0.050, 0, 0.500, 0, 0, 0, 0, 0, 0, 0.500, 0,
			0.200, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		Global.Ultimate_Duration = Array(0, 10, 6, 0, 0, 12, 0, 0, 0, 6, 0, 0, 10, 8, 0, 4, 0, 0, 6, 4, 0, 6, 0, 6, 6, 0, 0, 0, 0, 4, 0,
			10, 3, 12, 15, 10, 0);
		Global.Aim_Predict_Scale = Array(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10);
		Abort If(Global.Can_Hear == False);
		Global.Melee_Sound_Max = Array(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10);
		Global.Primary_Sound_Max = Array(20, 20, 20, 20, 20, 30, 30, 30, 15, 20, 20, 15, 15, 25, 30, 20, 20, 0, 25, 30, 25, 30, 20, 20, 30,
			30, 30, 20, 20, 15, 25, 25, 25, 15, 20, 0, 25);
		Global.Secondary_Sound_Max = Array(0, 0, 30, 30, 15, 0, 0, 0, 15, 15, 15, 0, 0, 20, 30, 0, 0, 0, 20, 25, 0, 20, 12, 20, 30, 0, 30,
			15, 10, 15, 0, 25, 0, 15, 0, 20, 25);
		Global.Ability1_Sound_Max = Array(15, 25, 20, 0, 15, 0, 0, 15, 10, 0, 0, 15, 25, 15, 15, 15, 20, 0, 0, 25, 25, 0, 0, 25, 20, 0, 30,
			25, 0, 15, 20, 25, 25, 15, 30, 10, 20);
		Global.Ability2_Sound_Max = Array(30, 15, 15, 0, 20, 0, 0, 20, 10, 0, 15, 0, 15, 0, 0, 10, 10, 20, 20, 0, 0, 0, 0, 15, 15, 0, 0, 0,
			0, 20, 0, 20, 25, 25, 25, 20, 20);
		Global.Ultimate_Sound_Max = Array(0, 20, 30, 0, 0, 0, 0, 20, 20, 30, 0, 0, 25, 30, 0, 20, 0, 0, 20, 25, 0, 30, 0, 20, 15, 0, 25, 0,
			0, 0, 0, 0, 30, 30, 30, 30, 30);
		Global.Walking_Sound_Max = Array(30, 25, 30, 30, 30, 30, 30, 0, 20, 0, 25, 25, 30, 25, 25, 25, 20, 25, 30, 30, 25, 30, 25, 20, 25,
			25, 25, 25, 20, 30, 25, 0, 25, 20, 25, 25, 25);
		Global.Crouch_Walk_Sound_Max = Array(5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
			0, 5, 5, 5, 5, 5);
	}
}

rule("Nodes Setup")
{
	event
	{
		Subroutine;
		Node_Setup;
	}

	actions
	{
		If(Current Map == Map(Hanamura) || Current Map == Map(Hanamura Winter));
			Call Subroutine(Hanamura);
			Abort;
		End;
		If(Current Map == Map(Horizon Lunar Colony));
			Call Subroutine(Horizon);
			Abort;
		End;
		If(Current Map == Map(Paris));
			Call Subroutine(Paris);
			Abort;
		End;
		If(Current Map == Map(Temple of Anubis));
			Call Subroutine(Temple_of_Anubus);
			Abort;
		End;
		If(Current Map == Map(Volskaya Industries));
			Call Subroutine(Volskaya);
			Abort;
		End;
	}
}

rule("Hanamura")
{
	event
	{
		Subroutine;
		Hanamura;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(23.326, 1.550, -4.398), Vector(22.802, 1.572, -21.227), Vector(20.379, 8.008, -21.078), Vector(
			12.076, 8.321, -19.733), Vector(7.436, 8.550, -22.362), Vector(-4.010, 8.550, -20.266), Vector(-10.098, 8.550, -22.046),
			Vector(-10.159, 8.630, -27.940), Vector(-10.448, 2.550, -22.072), Vector(-3.706, 2.550, -22.648), Vector(-4.502, 2.550,
			-18.663), Vector(2.903, 1.550, -18.511), Vector(12.677, 1.550, -24.341), Vector(13.540, 1.550, -18.551), Vector(17.102, 0.594,
			-4.198), Vector(13.787, 0.569, -10.678), Vector(6.207, 0.651, -7.531), Vector(10.580, 0.550, 0.575), Vector(8.623, 1.525,
			0.772), Vector(4.805, 1.550, 0.009), Vector(2.516, 2.463, 0.083), Vector(-4.158, 2.550, -8.863), Vector(-11.794, 2.550, 0.321),
			Vector(-19.305, 0.292, -18.511), Vector(-18.804, 0.367, -21.806), Vector(-4.273, 5.550, 18.894), Vector(-3.979, 5.522, 22.171),
			Vector(-14.486, 5.508, 21.405), Vector(-14.642, 5.461, 11.854), Vector(10.242, 5.550, 22.690), Vector(10.454, 5.550, 17.067),
			Vector(12.812, 5.550, 22.339), Vector(14.063, 5.615, 17.081), Vector(14.846, 5.550, 13.098), Vector(8.320, 5.573, 7.338),
			Vector(16.042, 5.576, 7.381), Vector(20.338, 5.710, 8.857), Vector(24.107, 1.550, 3.920), Vector(8.611, 0.480, 32.047), Vector(
			-44.941, 2.550, -113.131), Vector(-23.513, 2.550, -111.756), Vector(-13.984, 2.550, -101.881), Vector(-33.613, 2.550, -81.852),
			Vector(-43.687, 2.550, -92.405), Vector(-28.019, 2.550, -87.786), Vector(-22.425, 2.550, -89.371), Vector(-15.520, 2.550,
			-96.790), Vector(0.972, 8.560, -90.118), Vector(7.405, 8.550, -83.355), Vector(7.679, 8.560, -88.683), Vector(30.693, 4.550,
			-73.233), Vector(30.324, 4.550, -79.620), Vector(36.638, 4.550, -74.064), Vector(39.791, 4.550, -79.534), Vector(36.336, 4.550,
			-84.995), Vector(13.544, 5.550, -78.057), Vector(7.500, 5.550, -76.473), Vector(15.270, 5.550, -73.499), Vector(2.112, 6.560,
			-71.530), Vector(-2.505, 5.550, -66.774), Vector(0.288, 5.550, -58.229), Vector(-3.119, 5.550, -60.522), Vector(-4.678, 4.708,
			-58.827), Vector(-10.212, 4.550, -53.249), Vector(-20.232, 2.550, -63.176), Vector(-17.562, 2.550, -65.719), Vector(-7.489,
			-3.550, -64.417), Vector(-13.447, -3.550, -69.901), Vector(-3.520, -3.550, -71.075), Vector(2.337, -3.550, -77.819), Vector(
			11.152, -3.550, -85.529), Vector(14.924, -3.450, -86.900), Vector(16.193, -3.450, -90.854), Vector(9.584, 0.550, -73.161),
			Vector(5.617, 0.550, -68.609), Vector(0.845, 0.550, -66.721), Vector(1.980, 0.919, -72.070), Vector(-0.694, 1.412, -74.516),
			Vector(-2.950, 0.722, -77.181), Vector(-5.583, 0.556, -75.642), Vector(-1.978, 0.625, -80.740), Vector(-9.561, 0.625, -74.101),
			Vector(-0.194, 0.625, -83.874), Vector(2.613, 0.625, -93.657), Vector(-2.068, 0.625, -90.092), Vector(-10.959, 0.625, -84.734),
			Vector(8.078, 0.025, -65.919), Vector(22.556, -0.366, -64.746), Vector(25.035, -0.326, -70.248), Vector(35.254, -0.334,
			-61.302), Vector(37.784, -0.422, -61.434), Vector(37.025, -0.293, -38.859), Vector(25.313, -0.101, -39.620), Vector(30.891,
			3.905, -63.560), Vector(30.003, 4.426, -68.520), Vector(30.840, 3.297, -53.564), Vector(30.830, 3.390, -42.570), Vector(30.717,
			3.550, -32.612), Vector(38.142, 3.550, -34.735), Vector(18.872, 1.550, -27.956), Vector(12.711, 1.550, -26.516), Vector(12.558,
			-0.201, -39.817), Vector(21.491, -0.121, -48.008), Vector(12.915, 0.326, -49.034), Vector(6.676, 0.080, -49.253), Vector(1.875,
			-0.325, -45.146), Vector(12.865, -0.178, -61.159), Vector(-8.050, 2.550, -32.381), Vector(-4.343, 2.550, -29.667), Vector(
			5.460, 1.981, -29.559), Vector(11.122, 1.550, -29.824), Vector(-10.145, 2.610, -27.910), Vector(101.717, 3.550, 7.038), Vector(
			103.830, 2.647, 7.075), Vector(108.438, 2.550, 3), Vector(106.256, 2.550, -0.829), Vector(82.457, -1.450, -0.031), Vector(
			78.571, -0.739, 0.167), Vector(72.788, -0.420, -0.517), Vector(82.051, -1.450, 9.591), Vector(81.864, -1.450, 18.213), Vector(
			76.415, -0.451, 23.038), Vector(94.332, 3.550, 7.176), Vector(90.657, 3.550, 0.558), Vector(87.567, 3.550, 6.918), Vector(
			73.874, -0.452, 25.297), Vector(66.355, -0.455, 26.897), Vector(63.156, -0.511, 19.953), Vector(62.007, -0.214, 1.812), Vector(
			68.239, -0.345, 5.141), Vector(60.646, -0.447, 12.381), Vector(65.826, -0.321, -6.317), Vector(44.272, 1.419, -11.591), Vector(
			43.744, 2.322, -8.778), Vector(44.928, 2.549, -5.859), Vector(48.171, 1.603, -5.974), Vector(49.877, 0.738, -5.933), Vector(
			54.116, 0.550, -5.108), Vector(53.974, 0.550, 3.989), Vector(53.768, 0.026, 9.502), Vector(49.439, 0.467, 13.473), Vector(
			49.236, 0.608, 6.765), Vector(43.397, 1.424, 10.119), Vector(41.121, 2.550, 1.999), Vector(36.364, 1.747, 1.946), Vector(
			36.712, 1.716, 9.701), Vector(40.608, 1.795, 18.869), Vector(40.690, 1.865, 32.050), Vector(47.836, 7.550, 17.403), Vector(
			48.101, 7.550, 1.772), Vector(42.910, 7.550, 1.794), Vector(40.179, 7.550, -2.464), Vector(40.230, 7.550, -6.177), Vector(
			42.999, 7.550, -3.567), Vector(57.528, 7.550, -12.180), Vector(57.784, 7.550, -14.903), Vector(61.827, 7.550, -12.727), Vector(
			61.801, 7.550, -6.126), Vector(45.933, 7.550, -10.997), Vector(45.846, 7.550, 8.578), Vector(41.647, 7.550, 15.876), Vector(
			58.109, 3.550, -25.378), Vector(38.746, 1.572, -23.554), Vector(38.976, 1.501, -14.289), Vector(38.984, 1.499, -11.432),
			Vector(33.204, 1.649, -12.868), Vector(31.508, 1.640, -2.649), Vector(35.075, 1.755, 5.929), Vector(1.910, 0.550, 17.312),
			Vector(14.321, 0.550, 18.889), Vector(-13.861, 0.550, 18.621), Vector(6.323, 1.551, 8.883), Vector(13.904, 1.551, 8.651),
			Vector(13.843, 0.896, 12.593), Vector(-34.591, 2.550, -101.898), Vector(20.761, 5.550, -82.739), Vector(24.715, 5.073,
			-80.266), Vector(37.793, -0.303, -50.779), Vector(-2.594, 2.550, -36.363), Vector(5.115, 5.532, 28.542), Vector(3.215, 6.188,
			-66.369), Vector(8.019, 5.868, -71.019), Vector(-27.203, 2.550, -61.468));
		Global.Healthkits = Array(Vector(25.659, 1.572, -23.521), Vector(2.024, 2.550, -22.003), Vector(-14.703, 5.429, 12.849), Vector(
			7.563, 5.550, 16.500), Vector(7.940, 0.389, 35.713), Vector(29.928, 4.550, -89.595), Vector(-13.098, 2.550, -61.352), Vector(
			-0.526, -3.550, -74.065), Vector(14.811, -3.450, -96.204), Vector(-0.999, 0.550, -97.554), Vector(29.831, -0.328, -65.271),
			Vector(38.656, -0.335, -38.688), Vector(12.915, 0.326, -49.037), Vector(0.574, 2.550, -36.499), Vector(45.192, 2.550, -0.798),
			Vector(40.854, 1.857, 34.598), Vector(52.121, 3.550, -27.883));
		Global.ObjectiveA_Nodes = Array(Vector(1.229, 2.551, 8.770), Vector(1.173, 2.551, 5.163), Vector(1.210, 2.551, 1.202), Vector(
			1.210, 2.551, -2.319), Vector(1.210, 2.551, -6.102), Vector(-1.536, 2.551, -6.153), Vector(-1.561, 2.551, -2.367), Vector(
			-1.425, 2.551, 1.315), Vector(-1.452, 2.551, 5.101), Vector(-3.732, 2.550, 5.157), Vector(-4.056, 2.550, -2.341), Vector(
			-4.014, 2.550, -6.299), Vector(-6.608, 2.550, -6.298), Vector(-6.563, 2.550, -2.249), Vector(-6.448, 2.550, 0.134), Vector(
			-6.631, 2.550, 5.149), Vector(-9.541, 2.550, -6.500), Vector(-9.618, 2.550, -2.539), Vector(-9.676, 2.550, 0.098), Vector(
			-9.848, 2.550, 5.172), Vector(-9.981, 2.550, 9.133), Vector(-9.861, 2.550, 2.538), Vector(-4.328, 2.550, 2.651), Vector(0.072,
			2.550, 2.702));
		Global.ObjectiveB_Nodes = Array(Vector(-21.182, 0.625, -86.458), Vector(-19.057, 0.625, -88.496), Vector(-17.015, 0.800, -90.692),
			Vector(-15.043, 0.675, -92.204), Vector(-12.440, 0.625, -94.445), Vector(-10.310, 0.625, -92.211), Vector(-12.696, 0.625,
			-89.867), Vector(-14.521, 0.625, -88.070), Vector(-16.669, 0.625, -85.947), Vector(-18.729, 0.625, -83.919), Vector(-16.137,
			0.625, -81.284), Vector(-14.068, 0.625, -83.370), Vector(-11.895, 0.625, -85.464), Vector(-10.028, 0.625, -87.302), Vector(
			-7.724, 0.625, -89.687), Vector(-5.492, 0.625, -87.415), Vector(-7.864, 0.625, -85.083), Vector(-9.666, 0.625, -83.313),
			Vector(-11.855, 0.625, -81.160), Vector(-14.026, 0.625, -79.022), Vector(-11.996, 0.625, -76.922), Vector(-9.783, 0.625,
			-79.062), Vector(-7.607, 0.625, -81.206), Vector(-5.799, 0.625, -82.956), Vector(-3.323, 0.625, -85.344));
		Global.Chokepoint = Array(Vector(1.354, 1.320, -72.613), Vector(12.896, 1.550, -23.731), Vector(29.407, 1.810, -3.931));
		Global.Staircase_Top = Array(Vector(1.485, 8.560, -94.928), Vector(12.239, 8.550, -92.720), Vector(12.940, 1.550, -30.217), Vector(
			-8.359, 2.550, -37.229), Vector(4.626, 8.550, -25.707), Vector(26.404, 7.550, -17.067), Vector(22.222, 3.548, 15.676), Vector(
			17.911, 5.549, 13.438), Vector(21.795, 3.550, 22.088), Vector(-3.320, 5.550, 26.877), Vector(-4.120, 5.550, 13.560), Vector(
			-14.209, 2.550, 4.129), Vector(-9.527, 2.550, -17.871), Vector(-12.611, 2.550, -30.736), Vector(27.872, 3.550, -29.514),
			Vector(-12.602, 4.550, -55.338), Vector(-27.662, 2.550, -53.900), Vector(-25.911, 2.550, -69.793), Vector(-23.188, 2.550,
			-83.562), Vector(-9.565, 2.550, -97.634), Vector(6.170, 0.550, -91.992), Vector(16.857, 0.550, -78.027), Vector(26.588, 3.465,
			-59.778), Vector(36.688, 7.550, 19.395), Vector(48.092, 7.550, -14.500), Vector(46.424, 3.550, -26.669), Vector(58.032, 3.550,
			-22.211), Vector(76.081, 3.550, 6.813), Vector(103.054, 2.550, -0.079), Vector(-14.163, 2.551, -2.498));
		Global.Staircase_Bottom = Array(Vector(-8.654, 2.550, -105.336), Vector(18.346, 5.550, -85.931), Vector(13.125, -0.392, -35.474),
			Vector(-4.662, -0.450, -44.151), Vector(-9.166, 2.550, -25.514), Vector(26.384, 1.569, -21.243), Vector(22.346, 1.550, 9.923),
			Vector(18.199, 3.548, 19.492), Vector(15.095, 0.567, 27.782), Vector(-4.576, 0.553, 31.248), Vector(-3.964, 2.550, 6.639),
			Vector(-13.750, 0.550, 10.165), Vector(-15.202, 0.371, -17.774), Vector(-17.348, 0.308, -30.299), Vector(21.814, 1.550,
			-29.540), Vector(-16.068, 2.550, -59.050), Vector(-11.031, -3.450, -60.910), Vector(-21.294, 0.625, -74.187), Vector(-19.641,
			0.625, -79.817), Vector(-5.488, 0.625, -93.446), Vector(5.835, -3.550, -82.520), Vector(17.094, -3.450, -88.167), Vector(
			25.485, -0.198, -48.878), Vector(37.229, 2.055, 32), Vector(48.122, 3.550, -23.712), Vector(41.607, 1.587, -26.914), Vector(
			57.735, 0.463, -13.378), Vector(76.038, -0.367, 17.636), Vector(92.502, -1.450, 0.128), Vector(-14.578, 0.509, -7.653));
		Global.Healthkits_Small = Array();
		Global.Healthkits_Large = Array();
		Global.Staircase_Middle = Array(0, 0, 0, Vector(-8.679, 0.550, -44.166), 0, Vector(35.414, 4.550, -19.065), 0, 0, Vector(21.509,
			2.550, 26.687), Vector(-12.062, 2.551, 29.122), 0, 0, 0, 0, 0, 0, Vector(-22.568, 0.550, -49.306), 0, 0, 0, Vector(1.335,
			-1.381, -87.488), Vector(21.901, -1.450, -82.408), 0, Vector(31.652, 4.550, 30.354), 0, 0, 0, 0, 0, 0);
	}
}

rule("Horizon")
{
	event
	{
		Subroutine;
		Horizon;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(-27.416, 9.550, 11.435), Vector(-0.100, 9.550, 4.617), Vector(-7.170, 9.550, -9.529), Vector(
			-14.581, 9.550, -15.637), Vector(-15.857, 9.550, -26.488), Vector(4.976, 14.573, -23.815), Vector(7.042, 14.573, -30.751),
			Vector(10.340, 10.550, -1.775), Vector(1.970, 9.709, 0.845), Vector(5.918, 10.550, -0.720), Vector(4.788, 10.573, -12.787),
			Vector(-1.953, 10.199, -8.784), Vector(11.757, 10.550, -8.720), Vector(19.299, 10.550, 3.716), Vector(31.798, 10.550, -3.219),
			Vector(29.472, 10.550, -7.158), Vector(20.318, 10.550, -2.638), Vector(16.082, 10.550, -11.573), Vector(16.735, 10.550,
			-0.454), Vector(23.669, 10.550, 1.283), Vector(21.746, 14.560, 2.395), Vector(19.388, 14.550, -34.935), Vector(25.620, 14.550,
			-44.089), Vector(15.941, 14.550, -44.511), Vector(8.381, 10.550, -32.560), Vector(4.203, 10.550, -25.457), Vector(16.609,
			10.550, -27.218), Vector(12.130, 10.550, -18.763), Vector(40.929, 14.550, -47.438), Vector(44.645, 14.550, -44.961), Vector(
			42.932, 13.872, -41.957), Vector(44.334, 13.550, -37.203), Vector(46.449, 13.630, -34.344), Vector(51.945, 13.550, -34.786),
			Vector(49.181, 13.573, -29.746), Vector(39.411, 13.550, -36.377), Vector(33.098, 13.550, -26.020), Vector(25.763, 13.893,
			-30.813), Vector(27.314, 8.550, -24.657), Vector(29.352, 8.550, -29.056), Vector(39.543, 8.550, -22.023), Vector(28, 8.550,
			-36.684), Vector(28.155, 8.550, -43.395), Vector(27.992, 8.550, -13.659), Vector(21.213, 9.468, -13.812), Vector(18.729,
			10.404, -12.364), Vector(39.067, 8.550, -13.452), Vector(47.677, 8.550, -16.572), Vector(51.232, 8.550, -14.584), Vector(
			54.486, 8.550, -12.242), Vector(56.807, 8.550, -23.028), Vector(60.130, 8.550, -21.062), Vector(55.119, 7.688, -27.992),
			Vector(58.291, 7.550, -33.512), Vector(48.866, 7.550, -39.633), Vector(37.271, 8.573, -52.009), Vector(34.885, 8.550, -45.072),
			Vector(40.399, 7.955, -43.176), Vector(50.457, 7.894, -44.832), Vector(47.379, 8.573, -52.526), Vector(57.547, 8.550, -46.274),
			Vector(64.108, 8.548, -42.002), Vector(66.429, 8.548, -45.288), Vector(58.461, 8.550, -55.792), Vector(49.036, 8.987, -58.546),
			Vector(41.714, 9.560, -64.718), Vector(38.537, 9.578, -68.146), Vector(39.829, 15.551, -57.861), Vector(43.419, 15.550,
			-62.208), Vector(48.339, 15.550, -59.055), Vector(43.050, 15.550, -77.565), Vector(52.750, 15.550, -76.880), Vector(56.158,
			15.550, -74.222), Vector(50.665, 15.550, -74.356), Vector(53.158, 15.577, -79.095), Vector(66.561, 15.549, -76.361), Vector(
			71.375, 15.550, -68.345), Vector(64.344, 15.551, -61.241), Vector(64.619, 15.551, -67.729), Vector(71.203, 8.551, -46.265),
			Vector(76.291, 8.550, -43.657), Vector(81.479, 7.997, -40.294), Vector(92.125, 14.079, -67.425), Vector(88.367, 14.725,
			-71.735), Vector(83.015, 15.550, -72.555), Vector(67.774, 8.550, -50.607), Vector(65.247, 7.991, -62.930), Vector(59.419,
			7.543, -71.189), Vector(66.571, 9.550, -85.520), Vector(61.315, 10.418, -86.532), Vector(74.573, 8.550, -71.861), Vector(
			79.695, 8.550, -62), Vector(80.566, 8.522, -74.102), Vector(54.563, 7.931, -63.512), Vector(40.343, 9.550, -86.533), Vector(
			42.325, 9.550, -90.665), Vector(46.524, 10.392, -90.353), Vector(41.727, 9.550, -101.793), Vector(50.729, 9.550, -100.972),
			Vector(58.682, 9.550, -99.946), Vector(58.491, 10.378, -97.490), Vector(50.678, 10.451, -97.681), Vector(53.567, 11.024,
			-79.766), Vector(60.487, 10.550, -92.918), Vector(70.557, 10.842, -92.804), Vector(66.998, 10.550, -96.786), Vector(61.783,
			10.550, -92.753), Vector(32.789, 9.550, -85.840), Vector(30.771, 9.550, -100.633), Vector(27.046, 9.550, -94.068), Vector(
			15.953, 8.477, -86.120), Vector(4.705, 8.171, -82.659), Vector(2.260, 7.550, -90.033), Vector(-8.207, 7.550, -88.812), Vector(
			-12.908, 7.550, -96.011), Vector(-5.666, 7.550, -99.081), Vector(11.191, 7.449, -96.003), Vector(18.638, 7.550, -104.389),
			Vector(-4.062, 11.550, -121.655), Vector(-6.253, 10.781, -125.786), Vector(-18.784, 6.090, -138.869), Vector(-17.468, 6.050,
			-143.060), Vector(-18.129, 6.217, -148.333), Vector(-22.509, 6.050, -145.156), Vector(-22.738, 6.050, -140.563), Vector(
			-22.203, 6.050, -133.995), Vector(-30.459, 6.050, -132.309), Vector(-33.854, 6.050, -138.049), Vector(-26.159, 6.550,
			-154.141), Vector(-33.410, 6.550, -150.422), Vector(-35.814, 6.550, -156.349), Vector(-47.511, 6.623, -150.970), Vector(
			-43.046, 6.550, -140.485), Vector(-49.173, 6.550, -136.375), Vector(-47.589, 6.028, -131.453), Vector(-41.769, 6.050,
			-134.062), Vector(-39.472, 6.050, -127.583), Vector(-39.719, 11.550, -127.133), Vector(-35.175, 11.550, -118.507), Vector(
			-35.886, 6.090, -126.625), Vector(-37.383, 6.050, -120.451), Vector(-42.696, 6.050, -117.668), Vector(-36.096, 5.958,
			-117.130), Vector(-35.285, 4.986, -115.354), Vector(-30.479, 4.550, -114.447), Vector(-34.684, 4.550, -124.077), Vector(
			-21.229, 4.550, -131.051), Vector(-18.354, 5.390, -137.560), Vector(-17.057, 4.548, -134.694), Vector(-14.100, 4.092,
			-131.918), Vector(-8.383, 3.546, -133.595), Vector(-14.727, 4.300, -121.911), Vector(-4.357, 4.550, -118.581), Vector(-4.474,
			3.567, -128.716), Vector(-11.381, 4.550, -118.748), Vector(-19.624, 4.513, -115.519), Vector(-24.245, 4.485, -113.598), Vector(
			-17.970, 4.550, -111.511), Vector(-25.728, 6.050, -98.755), Vector(-28.302, 5.158, -103.466), Vector(-30.057, 4.550, -107.326),
			Vector(-32.134, 6.130, -96.315), Vector(-36.878, 6.050, -99.875), Vector(-39.950, 6.050, -108.674), Vector(-48.896, 6.233,
			-167.993), Vector(12.214, 14.550, -9.129), Vector(78.524, 15.550, -72.096), Vector(26.088, 9.550, -84.856), Vector(33.437,
			15.537, -97.321), Vector(32.887, 15.537, -89.298), Vector(-21.546, 10.551, -142.513));
		Global.Healthkits = Array(Vector(-5.660, 3.518, -132.685), Vector(-34.994, 6.550, -142.106), Vector(-36.689, 6.050, -108.801),
			Vector(-20.733, 6.050, -103.183), Vector(15.776, 7.550, -110.317), Vector(15.296, 8.550, -78.830), Vector(33.999, 9.550,
			-103.051), Vector(37.044, 9.550, -74.276), Vector(73.574, 8.550, -60.844), Vector(87.286, 13.710, -59.145), Vector(17.783,
			10.550, -48.335), Vector(35.868, 8.550, -34.060), Vector(61.598, 8.550, -22.974));
		Global.ObjectiveA_Nodes = Array(Vector(49.346, 10.551, -95.103), Vector(51.597, 10.545, -94.944), Vector(54.162, 10.541, -94.772),
			Vector(56.654, 10.530, -94.624), Vector(58.985, 10.547, -94.713), Vector(58.870, 10.549, -91.409), Vector(56.502, 10.462,
			-91.449), Vector(54.065, 10.425, -91.531), Vector(51.399, 10.472, -91.711), Vector(49.225, 10.550, -92.002), Vector(49.080,
			10.550, -88.804), Vector(51.297, 10.472, -88.729), Vector(54.036, 10.409, -88.665), Vector(56.366, 10.462, -88.604), Vector(
			58.802, 10.530, -88.627), Vector(58.707, 10.550, -85.449), Vector(56.242, 10.452, -85.535), Vector(53.868, 10.408, -85.616),
			Vector(51.220, 10.456, -85.706), Vector(48.942, 10.550, -85.784), Vector(48.884, 10.550, -83.244), Vector(51.127, 10.517,
			-83.169), Vector(53.738, 10.461, -83.086), Vector(56.216, 10.506, -83.002), Vector(58.610, 10.549, -83.195), Vector(56.073,
			10.550, -80.563), Vector(53.647, 10.550, -80.643), Vector(50.952, 10.550, -80.784));
		Global.ObjectiveB_Nodes = Array(Vector(-32.927, 4.300, -122.951), Vector(-30.697, 4.438, -124.027), Vector(-28.576, 4.328,
			-125.117), Vector(-26.432, 4.303, -126.215), Vector(-24.454, 4.301, -127.228), Vector(-22.474, 4.301, -128.189), Vector(
			-20.560, 4.261, -129.143), Vector(-19.199, 4.175, -126.675), Vector(-21.026, 4.270, -125.589), Vector(-23.104, 4.298,
			-124.645), Vector(-25.030, 4.389, -123.643), Vector(-27.272, 4.324, -122.538), Vector(-29.216, 4.314, -121.280), Vector(
			-31.259, 4.299, -119.980), Vector(-29.696, 4.289, -117.128), Vector(-27.618, 4.153, -118.258), Vector(-25.454, 4.172,
			-119.350), Vector(-23.442, 4.289, -120.596), Vector(-21.356, 4.279, -121.855), Vector(-19.573, 4.219, -122.778), Vector(
			-17.654, 4.189, -123.826), Vector(-16.043, 4.300, -120.845), Vector(-17.808, 4.300, -119.600), Vector(-19.548, 4.300,
			-118.652), Vector(-21.602, 4.302, -117.506), Vector(-23.773, 4.302, -116.324), Vector(-25.970, 4.294, -115.239), Vector(
			-28.108, 4.300, -114.078));
		Global.Chokepoint = Array(Vector(52.737, 8.550, -50.109), Vector(15.496, 7.550, -95.478), Vector(-14.188, 4.570, -107.894));
		Global.Staircase_Top = Array(Vector(17.670, 14.550, 3.458), Vector(1.876, 14.550, -19.829), Vector(18.404, 10.550, -46.099),
			Vector(11.054, 14.550, -40.380), Vector(37.976, 13.550, -32.391), Vector(32.320, 12.034, -20.587), Vector(33.552, 13.550,
			-22.011), Vector(33.105, 15.550, -54.836), Vector(42.592, 9.560, -77.622), Vector(66.252, 9.550, -80.093), Vector(78.286,
			15.550, -75.626), Vector(92.303, 13.427, -59.540), Vector(68.506, 8.550, -68.383), Vector(72.773, 9.550, -82.055), Vector(
			41.558, 15.550, -80.731), Vector(2.387, 7.550, -101.752), Vector(-9.376, 7.550, -98.669), Vector(-11.541, 7.515, -98.870),
			Vector(-15.724, 7.550, -93.901), Vector(25.117, 9.550, -89.127), Vector(22.394, 9.550, -98.417), Vector(66.031, 10.550,
			-100.729), Vector(-46.304, 11.573, -125.169), Vector(-13.585, 10.550, -140.475), Vector(5.767, 10.550, -112.094), Vector(
			-5.975, 11.550, -118.321), Vector(20.670, 10.550, -33.250));
		Global.Staircase_Bottom = Array(Vector(8.304, 10.550, 0.946), Vector(-11.381, 9.549, -28.002), Vector(22.969, 8.548, -42.901),
			Vector(13.462, 10.560, -43.255), Vector(42.709, 8.610, -22.318), Vector(28.604, 8.550, -18.659), Vector(32.323, 12.110,
			-20.487), Vector(33.032, 9.550, -67.406), Vector(48.916, 7.549, -77.425), Vector(66.088, 7.545, -74.162), Vector(72.079, 9.550,
			-86.233), Vector(86.402, 8.115, -43.997), Vector(65.825, 7.555, -68.458), Vector(72.798, 8.550, -77.813), Vector(27.988, 9.550,
			-81.580), Vector(-2.541, 4.550, -110.778), Vector(-14.988, 4.570, -108.138), Vector(-14.988, 4.570, -108.138), Vector(-18.942,
			6.112, -96.049), Vector(19.425, 7.639, -89.584), Vector(16.930, 7.553, -99.053), Vector(62.142, 9.549, -101.051), Vector(
			-46.835, 6.050, -128.644), Vector(-15.348, 6.217, -144.213), Vector(11.964, 7.550, -108.366), Vector(-4.161, 10.550, -114.576),
			Vector(23.435, 8.550, -37.471));
		Global.Healthkits_Small = Array(Vector(-5.660, 3.518, -132.685), Vector(-34.994, 6.550, -142.106), Vector(-20.733, 6.050,
			-103.183), Vector(15.776, 7.550, -110.317), Vector(33.999, 9.550, -103.051), Vector(37.044, 9.550, -74.276), Vector(17.783,
			10.550, -48.335));
		Global.Healthkits_Large = Array(Vector(-36.689, 6.050, -108.801), Vector(15.296, 8.550, -78.830), Vector(73.574, 8.550, -60.844),
			Vector(87.286, 13.710, -59.145), Vector(35.868, 8.550, -34.060), Vector(61.598, 8.550, -22.974));
		Global.Staircase_Middle = Array(Vector(11.475, 12.550, 6.764), Vector(-4.713, 12.550, -31.389), 0, Vector(6.399, 12.550, -45.494),
			Vector(44.933, 10.550, -27.857), Vector(30.907, 10.070, -21.456), 0, Vector(27.490, 13.550, -58.165), 0, 0, Vector(78.570,
			11.550, -85.181), Vector(90.856, 11.210, -51.428), 0, 0, 0, Vector(0.249, 6.550, -105.835), 0, 0, 0, 0, 0, 0, Vector(-55.333,
			8.550, -124.210), Vector(-6.260, 8.550, -146.774), 0, 0, 0);
	}
}

rule("Paris")
{
	event
	{
		Subroutine;
		Paris;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(24.308, 13.550, -86.868), Vector(23.233, 12.592, -85.093), Vector(22.769, 12.548, -79.475),
			Vector(29.892, 12.548, -76.696), Vector(34.438, 13.550, -81.461), Vector(33.281, 12.658, -79.778), Vector(30.198, 13.550,
			-85.401), Vector(16.810, 11.581, -61.484), Vector(21.483, 11.873, -62.732), Vector(15.809, 11.809, -65.854), Vector(17.494,
			12.550, -73.753), Vector(11.644, 12.550, -80.370), Vector(5.531, 11.574, -70.299), Vector(14.642, 11.474, -56.956), Vector(
			7.186, 11.572, -58.621), Vector(0.136, 11.545, -50.437), Vector(-9.380, 15.550, -40.527), Vector(-15.859, 15.550, -34.054),
			Vector(-16.424, 15.550, -47.422), Vector(-4.767, 11.474, -54.710), Vector(-2.243, 11.473, -57.638), Vector(-8.907, 11.550,
			-65.156), Vector(-4.641, 11.633, -68.622), Vector(8.162, 12.409, -74.641), Vector(-4.768, 11.633, -60.858), Vector(-12.900,
			11.550, -60.118), Vector(-18.799, 11.633, -59.620), Vector(-15.347, 17.550, -56.451), Vector(-13.034, 11.474, -51.996), Vector(
			-19.818, 11.475, -48.423), Vector(-25.964, 11.475, -39.395), Vector(-24.867, 11.474, -34.675), Vector(-31.389, 11.593,
			-30.297), Vector(-26.480, 11.474, -25.889), Vector(-0.394, 12.938, -27.169), Vector(-23.582, 11.633, -22.876), Vector(-17.373,
			11.550, -17.042), Vector(-19.134, 11.633, -14.117), Vector(-52.490, 13.603, -19.204), Vector(-39.745, 15.540, -17.723), Vector(
			-37.194, 15.542, -15.172), Vector(-33.074, 15.540, -10.875), Vector(-33.070, 15.541, -6.737), Vector(-34.966, 15.541, -5.970),
			Vector(-42.078, 11.474, 3.258), Vector(-39.901, 15.542, -13.152), Vector(-47.741, 15.542, -12.277), Vector(-52.292, 16.540,
			-8.120), Vector(-56.816, 16.101, -3.688), Vector(-67.860, 15.540, 1.828), Vector(-46.318, 11.574, 5.506), Vector(-47.927,
			12.568, 7.071), Vector(-49.518, 13.486, 8.559), Vector(-42.393, 13.540, 16.341), Vector(-39.757, 12.676, 13.648), Vector(
			-40.989, 12.471, 13.282), Vector(-39.034, 11.574, 8.542), Vector(-37.390, 11.474, 3.600), Vector(-29.443, 11.474, -2.861),
			Vector(-29.312, 11.474, -12.457), Vector(-21, 11.572, -9.315), Vector(-38.891, 17.489, 17.682), Vector(-42.334, 17.540,
			25.215), Vector(-47.311, 17.620, 25.466), Vector(-47.192, 17.546, 20.869), Vector(-50.281, 17.546, 23.958), Vector(-34.258,
			13.541, 32.160), Vector(-47.296, 13.620, 25.579), Vector(-41.280, 13.542, 28.620), Vector(-24.897, 11.540, 34.357), Vector(
			-29.128, 11.540, 19.524), Vector(-29.882, 11.574, 18.698), Vector(-22.312, 11.603, 20.280), Vector(-28.698, 11.603, 26.504),
			Vector(-17.599, 11.540, 25.202), Vector(-21.853, 11.540, 31.282), Vector(-50.795, 13.540, 20.952), Vector(-68.318, 13.526,
			-17.811), Vector(-58.050, 13.505, -21.887), Vector(-77.914, 11.405, -35.128), Vector(-65.271, 11.554, -42.475), Vector(-75.853,
			13.539, -15.291), Vector(-81.719, 11.559, -26.639), Vector(-88.970, 11.434, -28.746), Vector(-95.691, 12.324, -38.385), Vector(
			-88.967, 12.464, -45.159), Vector(-83.948, 11.530, -45.098), Vector(-72.240, 11.554, -51.136), Vector(-68.157, 12.405,
			-55.257), Vector(-78.327, 11.405, -49.955), Vector(-80.091, 12.222, -53.616), Vector(-80.903, 13.125, -55.273), Vector(-86.185,
			13.550, -64.647), Vector(-100.342, 13.550, -57.923), Vector(-98.006, 13.550, -53.313), Vector(-108.955, 13.550, -47.788),
			Vector(-105.662, 12.886, -42.170), Vector(-103.850, 12.321, -36.444), Vector(-110.349, 11.550, -62.061), Vector(-116.872,
			11.550, -61.056), Vector(-121.681, 11.340, -54.212), Vector(-117.191, 11.400, -45.109), Vector(-113.979, 12.325, -43.588),
			Vector(-118.589, 12.389, -41.081), Vector(-113.513, 12.565, -32.895), Vector(-108.806, 12.328, -34.822), Vector(-108.825,
			11.550, -68.974), Vector(-115.904, 11.550, -70.885), Vector(-109.761, 12.544, -76.062), Vector(-108.021, 13.512, -76.902),
			Vector(-105.438, 13.550, -78.296), Vector(-106.996, 12.471, -70.135), Vector(-105.413, 13.393, -71.076), Vector(-102.627,
			13.550, -72.528), Vector(-120.155, 14.550, -86.092), Vector(-110.381, 14.550, -82.038), Vector(-112.749, 14.550, -87.297),
			Vector(-110.830, 13.700, -88.072), Vector(-108.383, 13.708, -83.146), Vector(-105.904, 13.550, -87.414), Vector(-118.469,
			14.550, -96.360), Vector(-117.289, 14.550, -91.677), Vector(-100.168, 16.550, -92.241), Vector(-104.779, 16.550, -89.910),
			Vector(-95.170, 16.550, -94.644), Vector(-91.974, 14.550, -109.413), Vector(-87.093, 14.550, -104.819), Vector(-76.290, 16.550,
			-92.112), Vector(-76.407, 16.550, -84.858), Vector(-69.189, 16.550, -88.979), Vector(-63.515, 14.550, -79.509), Vector(-56.494,
			12.447, -66.895), Vector(-62.180, 12.550, -67.923), Vector(-64.152, 12.541, -64.238), Vector(-71.022, 14.550, -71.084), Vector(
			-77.475, 13.824, -68.435), Vector(-88.212, 14.550, -98.996), Vector(-89.966, 13.683, -98.174), Vector(-84.246, 14.550,
			-97.373), Vector(-87.185, 13.779, -92.916), Vector(-92.984, 13.550, -94.422), Vector(-87.633, 13.550, -67.280), Vector(-63.761,
			12.402, -58.793), Vector(-48.319, 10.247, -56.678), Vector(-51.024, 10.689, -49.133), Vector(-56.052, 10.569, -51.056), Vector(
			-58.155, 11.433, -38.886), Vector(-108.946, 16.550, -110.585), Vector(-121.455, 14.550, -102.134), Vector(-94.810, 14.550,
			-114.972), Vector(-70.678, 15.540, -1.360), Vector(-25.004, 14.542, 5.888), Vector(-22.905, 14.542, 1.661), Vector(-52.447,
			13.540, -26.979), Vector(-10.813, 17.550, -57.865), Vector(-6.180, 15.550, -67.294), Vector(20.865, 18.550, -80.430), Vector(
			15.214, 18.550, -69.860), Vector(20.510, 18.550, -69.179), Vector(24.727, 18.550, -64.622), Vector(30.621, 18.550, -75.128));
		Global.Healthkits = Array(Vector(-0.509, 11.545, -49.747), Vector(-15.592, 11.550, -58.205), Vector(-30.555, 11.574, -39.988),
			Vector(-14.883, 11.550, -21.102), Vector(-17.322, 14.540, 4.140), Vector(-40.862, 13.540, 25.241), Vector(-69.465, 15.540,
			2.218), Vector(-39.551, 12.608, -40.093), Vector(-73.395, 11.567, -38.396), Vector(-46.502, 10.255, -57.414), Vector(-125.168,
			11.550, -56.353), Vector(-105.172, 16.550, -103.052), Vector(-81.640, 14.550, -95.099));
		Global.ObjectiveA_Nodes = Array(Vector(-54.907, 13.574, 21.648), Vector(-56.303, 13.574, 20.432), Vector(-57.615, 13.574, 18.510),
			Vector(-58.849, 13.574, 16.937), Vector(-60.297, 13.574, 15.188), Vector(-61.929, 13.574, 13.528), Vector(-59.766, 13.574,
			11.352), Vector(-58.062, 13.574, 13.080), Vector(-56.551, 13.574, 14.614), Vector(-55.110, 13.574, 16.070), Vector(-53.497,
			13.574, 17.712), Vector(-52.265, 13.574, 18.995), Vector(-49.944, 13.574, 16.708), Vector(-51.201, 13.574, 15.562), Vector(
			-52.773, 13.574, 13.967), Vector(-54.328, 13.574, 12.485), Vector(-55.847, 13.574, 10.999), Vector(-57.591, 13.574, 9.272),
			Vector(-55.853, 13.573, 7.360), Vector(-54.024, 13.573, 8.948), Vector(-52.370, 13.573, 10.604), Vector(-50.940, 13.573,
			12.034), Vector(-49.305, 13.573, 13.671), Vector(-48.108, 13.573, 14.867), Vector(-45.892, 13.573, 12.610), Vector(-46.960,
			13.550, 11.516), Vector(-48.601, 13.540, 9.794), Vector(-49.991, 13.540, 8.443), Vector(-51.672, 13.540, 6.683), Vector(
			-53.367, 13.575, 4.898));
		Global.ObjectiveB_Nodes = Array(Vector(-98.932, 13.650, -72.609), Vector(-99.779, 13.650, -74.436), Vector(-100.882, 13.551,
			-76.812), Vector(-101.996, 13.551, -79.128), Vector(-103.070, 13.551, -81.358), Vector(-104.357, 13.650, -84.031), Vector(
			-105.217, 13.650, -85.680), Vector(-102.654, 13.650, -86.902), Vector(-101.553, 13.650, -84.668), Vector(-100.628, 13.650,
			-82.793), Vector(-99.405, 13.650, -80.319), Vector(-98.240, 13.650, -78.031), Vector(-97.071, 13.650, -75.711), Vector(-96.176,
			13.650, -73.894), Vector(-93.883, 13.550, -75.049), Vector(-94.844, 13.650, -77.011), Vector(-95.955, 13.650, -79.260), Vector(
			-97.135, 13.696, -81.494), Vector(-98.215, 13.650, -83.682), Vector(-99.277, 13.650, -85.842), Vector(-100.234, 13.550,
			-87.766), Vector(-97.555, 13.550, -89.086), Vector(-96.620, 13.550, -87.190), Vector(-95.482, 13.650, -84.874), Vector(-93.312,
			13.684, -80.612), Vector(-92.148, 13.650, -78.256), Vector(-91.198, 13.550, -76.312), Vector(-88.307, 13.650, -77.736), Vector(
			-89.251, 13.650, -79.644), Vector(-90.452, 13.650, -82.040), Vector(-91.538, 13.650, -84.237), Vector(-92.537, 13.650,
			-86.244), Vector(-93.718, 13.650, -88.599), Vector(-94.713, 13.650, -90.569), Vector(-92.105, 13.650, -91.834), Vector(-91.149,
			13.650, -89.917), Vector(-90.044, 13.550, -87.675), Vector(-88.973, 13.550, -85.507), Vector(-87.867, 13.550, -83.271), Vector(
			-86.745, 13.650, -81.001), Vector(-85.724, 13.650, -78.934));
		Global.Chokepoint = Array(Vector(-26.323, 11.474, -25.893), Vector(-66.594, 13.341, -27.318), Vector(-89.906, 13.550, -71.770),
			Vector(-52.878, 11.829, -7.114));
		Global.Staircase_Top = Array(Vector(-66.589, 13.405, -26.140), Vector(-82.618, 13.501, -16.139), Vector(-70.643, 15.542, -6.647),
			Vector(-65.143, 15.540, -6.527), Vector(-59.979, 15.542, 4.187), Vector(-34.590, 15.540, -6.683), Vector(-26.074, 14.540,
			1.271), Vector(-24.616, 16.540, 14.734), Vector(-37.694, 17.516, 20.769), Vector(-47.665, 17.540, 32.683), Vector(-32.230,
			13.254, 33.940), Vector(-57.139, 13.446, -12.114), Vector(-44.305, 15.540, -18.183), Vector(-39.479, 12.608, -28.553), Vector(
			-53.137, 13.540, -32.498), Vector(-49.383, 13.540, -27.547), Vector(-9.602, 15.550, -68.980), Vector(-8.132, 17.550, -60.216),
			Vector(-5.678, 15.550, -36.848), Vector(2.847, 12.946, -37.302), Vector(-8.880, 12.832, -27.182), Vector(-55.398, 12.397,
			-63.327), Vector(-61.802, 14.550, -76.613), Vector(-62.077, 16.551, -89.961), Vector(-77.293, 16.550, -94.813), Vector(
			-100.875, 16.550, -101.828), Vector(-106.802, 16.551, -98.947), Vector(-82.695, 16.550, -89.036), Vector(-80.155, 16.550,
			-83.716), Vector(-103.237, 13.571, -53.511), Vector(-120.158, 14.551, -81.422), Vector(-102.386, 16.550, -111.738), Vector(
			-113.796, 16.550, -106.208));
		Global.Staircase_Bottom = Array(Vector(-69.609, 11.405, -32.632), Vector(-85.103, 11.392, -20.781), Vector(-75.034, 13.566,
			-10.562), Vector(-61.208, 13.525, -10.475), Vector(-55.935, 13.575, 8.057), Vector(-40.884, 11.575, -0.246), Vector(-21.302,
			11.572, -3.285), Vector(-28.099, 14.540, 10.863), Vector(-34.271, 16.540, 24.479), Vector(-36.035, 13.540, 33.813), Vector(
			-29.453, 11.540, 36.633), Vector(-51.467, 11.620, -5.333), Vector(-48.019, 13.540, -21.756), Vector(-35.553, 11.476, -23.693),
			Vector(-49.045, 12.608, -36.187), Vector(-44.489, 12.608, -32.938), Vector(-15.940, 11.550, -62.363), Vector(-4.390, 15.550,
			-63.832), Vector(-1.161, 12.946, -32.046), Vector(3.562, 11.509, -41.938), Vector(-17.665, 11.549, -29.343), Vector(-52.905,
			10.449, -58.189), Vector(-59.507, 12.550, -71.912), Vector(-59.223, 14.548, -85.725), Vector(-79.826, 14.550, -99.545), Vector(
			-95.984, 14.550, -104.081), Vector(-111.703, 14.548, -96.284), Vector(-85.486, 13.550, -86.780), Vector(-83.598, 13.550,
			-82.150), Vector(-105.584, 11.550, -58.091), Vector(-117.084, 11.550, -74.470), Vector(-98.007, 14.550, -113.815), Vector(
			-118.548, 14.550, -103.858));
		Global.Healthkits_Small = Array(Vector(-15.592, 11.550, -58.205), Vector(-30.555, 11.574, -39.988), Vector(-14.883, 11.550,
			-21.102), Vector(-17.322, 14.540, 4.140), Vector(-40.862, 13.540, 25.241), Vector(-39.551, 12.608, -40.093), Vector(-73.395,
			11.567, -38.396), Vector(-46.502, 10.255, -57.414), Vector(-105.172, 16.550, -103.052), Vector(-81.640, 14.550, -95.099));
		Global.Healthkits_Large = Array(Vector(-0.509, 11.545, -49.747), Vector(-69.465, 15.540, 2.218), Vector(-125.168, 11.550,
			-56.353));
		Global.Staircase_Middle = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, Vector(-42.432, 15.540, 37.130), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, Vector(-83.750, 15.175, -86.309), Vector(-82.981, 15.175, -84.748), 0, 0, 0, 0);
	}
}

rule("Temple Of Anubis")
{
	event
	{
		Subroutine;
		Temple_of_Anubus;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(3.981, 3.323, -36.909), Vector(8.605, 3.323, -40.174), Vector(10.350, 2.380, -39.130), Vector(
			9.493, 2.323, -32.820), Vector(16.271, 2.323, -28.814), Vector(11.492, 2.323, -25.745), Vector(12.426, 2.323, -22.622), Vector(
			7.483, 2.323, -22.075), Vector(4.930, 2.323, -34.192), Vector(-0.946, 2.323, -27.882), Vector(-0.890, 2.323, -31.785), Vector(
			-15.634, -0.714, -40.979), Vector(-24.713, -0.731, -33.487), Vector(18.208, 2.323, -18.646), Vector(26.765, 2.134, -12.078),
			Vector(15.455, 1.629, 7.748), Vector(-0.603, -0.850, -7.807), Vector(-8.120, -0.646, -14.031), Vector(-4.440, 0.061, -20.606),
			Vector(-10.896, -0.382, -21.944), Vector(-15.909, -0.172, -11.113), Vector(-6.120, -1.241, -2.344), Vector(-2.388, -1.241,
			1.979), Vector(2.731, -1.241, 2.453), Vector(0.592, 2.513, 13.336), Vector(3.717, 2.730, 18.015), Vector(14.922, 5.657,
			12.658), Vector(-7.994, 2.654, 9.724), Vector(-7.889, 3.091, 2.076), Vector(-1.576, 3.226, 0.606), Vector(0.355, 3.079, 6.900),
			Vector(-7.572, 2.498, 14.516), Vector(-13.043, 2.554, 11.881), Vector(-21.034, 2.402, 1.635), Vector(-22.778, 2.577, -3.143),
			Vector(-25.375, -0.728, -14.787), Vector(-18.387, -0.509, -24.928), Vector(-27.084, -0.728, -25.613), Vector(-6.457, 2.629,
			19.267), Vector(-1.267, 2.589, 26.096), Vector(2.813, 2.473, 28.497), Vector(-15.921, 6.061, 38.065), Vector(-19.987, 6.061,
			28.189), Vector(-28.536, 6.191, 37.751), Vector(-28.941, 3.015, 19.977), Vector(-24.721, 2.059, 14.081), Vector(-19.301, 2.135,
			17.240), Vector(-14.574, 2.289, 21.322), Vector(-10.462, 2.423, 19.912), Vector(-15.463, 2.406, 17.225), Vector(-30.817, 8.060,
			27.353), Vector(-32.288, 8.060, 29.569), Vector(-10.741, 2.335, 28.327), Vector(-19.667, 2.243, 24.550), Vector(-30.630, 2.881,
			27.033), Vector(-34.976, 7.081, 23.741), Vector(-43.375, 11.059, 16.044), Vector(-52.130, 11.059, 27.075), Vector(-48.726,
			11.059, 36.395), Vector(-52.483, 11.081, 36.699), Vector(-46.487, 11.093, 33.530), Vector(-60.800, 8.059, 43.578), Vector(
			-57.557, 8.089, 43.809), Vector(-57.066, 3.050, 44.937), Vector(-62.014, 3.070, 47.782), Vector(-56.681, 3.070, 53.479),
			Vector(-52.138, 3.103, 48.145), Vector(-51.954, 3.060, 40.871), Vector(-33.749, 2.892, 33.908), Vector(-37.396, 3.065, 38.026),
			Vector(-37.841, 3.215, 45.675), Vector(-33.353, 3.540, 50.425), Vector(-39.317, 3.050, 55.631), Vector(-43.026, 3.092, 53.282),
			Vector(-36.401, 7.050, 62.855), Vector(-32.103, 7.050, 60.790), Vector(-33.309, 7.550, 67.096), Vector(-30.712, 2.873, 40.070),
			Vector(-24.408, 2.905, 46.099), Vector(-32.954, 3.129, 61.572), Vector(-36.044, 3.050, 61.034), Vector(-39.771, 3.050, 65.068),
			Vector(-36.733, 3.075, 75.030), Vector(-38.827, 3.050, 70.155), Vector(-31.122, 3.075, 73.341), Vector(-27.624, 3.047, 71.465),
			Vector(-32.392, 3.025, 65.569), Vector(-26.918, 3.022, 58.088), Vector(-19.399, 2.876, 52.859), Vector(-15.577, 2.849, 57.189),
			Vector(-21.410, 3.060, 61.128), Vector(-22.348, 3.116, 68.305), Vector(-17.301, 3.072, 67.891), Vector(-4.031, 5.541, 74.734),
			Vector(0.158, 5.065, 68.868), Vector(-0.355, 5.061, 62.586), Vector(6.359, 5.081, 61.843), Vector(6.836, 5.156, 67.564),
			Vector(7.588, 5.172, 74.153), Vector(5.893, 6.050, 55.047), Vector(0.450, 6.729, 55.455), Vector(-8.055, 7.114, 58.641),
			Vector(-9.808, 5.541, 79.612), Vector(-17.036, 6.228, 77.519), Vector(-26.804, 6.210, 79.479), Vector(-28.017, 7.153, 75.910),
			Vector(-28.048, 7.692, 72.809), Vector(-25.347, 6.166, 87.880), Vector(-24.884, 6.214, 96.300), Vector(-24.551, 7.114, 97.304),
			Vector(-15.897, 6.206, 96.733), Vector(-9.422, 6.290, 95.581), Vector(-9.440, 6.212, 86.866), Vector(-15.127, 6.248, 87.442),
			Vector(-3.545, 5.255, 86.524), Vector(-0.059, 4.442, 86.523), Vector(5.385, 5.610, 80.748), Vector(5.259, 4.755, 83.488),
			Vector(10.720, 3.949, 88.664), Vector(13.633, 2.050, 99.483), Vector(8.396, 2.062, 99.683), Vector(17.627, 3.949, 89.987),
			Vector(9.366, 5.963, 113.623), Vector(3.903, 6.137, 114.078), Vector(17.169, 5.963, 114.495), Vector(12.348, 6.384, 118.744),
			Vector(9.042, 5.963, 121.403), Vector(10.482, 6.043, 129.826), Vector(-4.997, 6.046, 130.729), Vector(-4.456, 6.049, 137.092),
			Vector(-9.985, 5.845, 142.967), Vector(-27.474, 6.121, 117.348), Vector(-19.323, 6.229, 116.260), Vector(4.633, 2.235, 96.479),
			Vector(2.424, 2.221, 94.692), Vector(-1.624, 1.990, 95.833), Vector(-0.395, 2.204, 101.059), Vector(-4.311, 1.251, 100.651),
			Vector(-8.874, 1.462, 100.141), Vector(-31.983, 6.193, 118.172), Vector(-32.557, 5.975, 126.376), Vector(-26.233, 6.017,
			122.403), Vector(-11.845, 5.790, 118.647), Vector(-11.527, 5.534, 122.531), Vector(-1.970, 5.510, 121.602), Vector(-2.264,
			5.985, 116.813), Vector(-7.631, 6.187, 103.042), Vector(-5.482, 6.302, 99.548), Vector(-11.554, 6.302, 101.527), Vector(
			-16.427, 7.970, 63.699), Vector(-21.298, 7.980, 56.825), Vector(-27.662, 7.970, 62.615), Vector(-22.902, 7.970, 68.593),
			Vector(-22.380, 7.938, 63.189), Vector(-39.888, 11.750, 48.453), Vector(-35.548, 11.750, 44.434), Vector(-32.051, 11.750,
			44.322), Vector(-30.578, 10.565, 56.892), Vector(-34.230, 11.458, 54.471), Vector(-37.331, 11.750, 50.471), Vector(-69.532,
			4.061, 16.988), Vector(-60.928, 3.120, 26.062), Vector(-53.098, 3.059, 24.147), Vector(-53.333, 3.059, 31.413), Vector(-48.663,
			3.059, 34.396), Vector(-51.478, 7.059, 18.654), Vector(-53.466, 7.059, 22.836), Vector(-51.231, 7.059, 27.175), Vector(-45.086,
			7.059, 27.581), Vector(9.932, 1.043, 6.803), Vector(12.893, 2.012, -1.957), Vector(21.167, 2.240, -1.299), Vector(8.927,
			-0.467, -6.854), Vector(-50.751, 9.061, 9.389), Vector(-32.089, 11.999, 12.426), Vector(-35.142, 12.164, 10.512), Vector(
			-36.974, 10.581, 7.241), Vector(-14.463, 7.872, 50.566), Vector(-19.466, 7.882, 46.827), Vector(-24.838, 9.570, 47.644),
			Vector(-24.612, 9.570, 43.614), Vector(-11.194, 12.095, 55.267), Vector(-14.940, 12.330, 53.198), Vector(-41.856, 7.059,
			23.780), Vector(-42.888, 7.059, 16.896), Vector(-63.841, 4.061, 23.340), Vector(16.505, 5.963, 108.744), Vector(18.433, 3.949,
			96.748), Vector(3.584, 2.362, 100.386), Vector(-13.022, 7.981, 126.966));
		Global.Healthkits = Array(Vector(5.912, 2.872, 19.910), Vector(-24.755, 2.698, -1.502), Vector(-4.915, 4.059, 45.586), Vector(
			-23.210, 2.059, 15.523), Vector(-39.251, 6.559, 7.032), Vector(-42.641, 11.059, 24.406), Vector(-37.764, 3.050, 57.758),
			Vector(-35.661, 3.050, 69.597), Vector(12.072, 5.157, 67.239), Vector(-16.997, 6.284, 84.687), Vector(17.615, 3.949, 88.212),
			Vector(-3.417, -1.241, 3.664));
		Global.ObjectiveA_Nodes = Array(Vector(-36.757, 3.147, 42.370), Vector(-37.965, 3.079, 40.849), Vector(-39.285, 3.076, 39.355),
			Vector(-40.772, 3.061, 37.639), Vector(-42.138, 3.062, 35.980), Vector(-44.330, 3.062, 34.055), Vector(-46.118, 3.062, 36.096),
			Vector(-44.008, 3.062, 37.972), Vector(-42.348, 3.060, 39.474), Vector(-40.736, 3.074, 40.918), Vector(-39.129, 3.102, 42.178),
			Vector(-38.042, 3.150, 43.861), Vector(-39.465, 3.071, 45.391), Vector(-40.712, 3.063, 43.912), Vector(-42.203, 3.055, 42.529),
			Vector(-43.741, 3.216, 41.148), Vector(-45.241, 3.059, 39.342), Vector(-47.414, 3.036, 37.468), Vector(-49.234, 3.059, 39.410),
			Vector(-47.028, 3.217, 41.373), Vector(-43.751, 3.218, 44.312), Vector(-42.195, 3.054, 45.710), Vector(-40.796, 3.067, 46.961),
			Vector(-42.553, 3.075, 49.020), Vector(-43.952, 3.052, 47.813), Vector(-45.521, 3.052, 46.594), Vector(-47.086, 3.218, 45.320),
			Vector(-48.933, 3.054, 43.795), Vector(-51.140, 3.056, 41.998), Vector(-52.591, 3.053, 43.785), Vector(-50.495, 3.053, 45.606),
			Vector(-48.715, 3.053, 47.133), Vector(-47.163, 3.053, 48.476), Vector(-45.624, 3.053, 49.811), Vector(-47.072, 3.053, 51.385),
			Vector(-48.559, 3.053, 49.942), Vector(-49.917, 3.053, 48.451), Vector(-51.422, 3.053, 47.123), Vector(-53.797, 3.053,
			45.086));
		Global.ObjectiveB_Nodes = Array(Vector(-15.756, 6.268, 108.684), Vector(-13.478, 6.214, 108.545), Vector(-10.715, 6.214, 108.583),
			Vector(-7.856, 6.204, 108.408), Vector(-4.389, 6.214, 108.211), Vector(-1.249, 6.202, 107.946), Vector(1.340, 6.239, 107.744),
			Vector(1.623, 6.237, 109.881), Vector(-0.996, 6.210, 110.191), Vector(-4.080, 6.215, 110.470), Vector(-7.676, 6.212, 110.799),
			Vector(-10.584, 6.212, 111.059), Vector(-13.263, 6.212, 111.296), Vector(-15.618, 6.212, 111.507), Vector(-13.097, 6.213,
			113.981), Vector(-10.375, 6.213, 113.748), Vector(-3.727, 6.230, 113.351), Vector(-0.782, 6.226, 113.091), Vector(1.847, 6.218,
			112.702), Vector(2.119, 6.308, 115.769), Vector(-0.514, 6.212, 116.019), Vector(-3.513, 6.229, 116.574), Vector(-10.114, 6.321,
			116.696), Vector(-12.970, 6.081, 116.462), Vector(-15.330, 6.311, 116.864));
		Global.Chokepoint = Array(Vector(-14.707, 2.272, 21.863), Vector(-24.614, 2.904, 46.126), Vector(-9.977, 5.992, 81.221));
		Global.Staircase_Top = Array(Vector(-3.666, 2.323, -33.916), Vector(2.980, 2.107, -19.888), Vector(2.372, 2.548, 11.957), Vector(
			-13.535, 2.568, 2.542), Vector(-11.242, 6.059, 41.424), Vector(-30.214, 8.059, 29.618), Vector(-33.095, 8.059, 27.499), Vector(
			-47.788, 9.059, 8.619), Vector(-45.700, 11.059, 14.656), Vector(-56.188, 11.059, 33.531), Vector(-53.356, 7.065, 16.308),
			Vector(-39.915, 7.050, 62.610), Vector(-15.650, 5.541, 74.024), Vector(-10.516, 5.541, 72.131), Vector(5.835, 4.129, 87.591),
			Vector(13.765, 3.949, 89.378), Vector(10.637, 5.970, 105.237), Vector(-17.988, 6.207, 95.938), Vector(-20.288, 6.228, 112.201),
			Vector(-32.499, 6.213, 113.307), Vector(-25.391, 7.958, 113.667), Vector(-12.478, 7.950, 131.274), Vector(-18.351, 7.833,
			127.092));
		Global.Staircase_Bottom = Array(Vector(-9.657, -0.542, -38.438), Vector(-1.354, -0.304, -13.540), Vector(5.572, -1.073, 2.118),
			Vector(-8.900, -1.024, -4.716), Vector(-0.388, 2.365, 36.979), Vector(-26.104, 6.059, 32.058), Vector(-41.571, 3.063, 34.328),
			Vector(-31.628, 3.088, 18.714), Vector(-49.973, 9.059, 11.921), Vector(-60.067, 8.059, 40.308), Vector(-59.104, 3.061, 22.845),
			Vector(-46.053, 3.047, 55.888), Vector(-22.043, 3.087, 73.851), Vector(-10.685, 3.209, 65.885), Vector(5.740, 2.351, 93.471),
			Vector(13.565, 2.050, 94.388), Vector(18.057, 3.949, 103.797), Vector(-10.917, 1.896, 102.119), Vector(-20.757, 4.262,
			106.789), Vector(-22.053, 4.233, 105.076), Vector(-28.078, 5.189, 108.631), Vector(-12.126, 5.927, 135.817), Vector(-22.279,
			6.028, 127.485));
		Global.Healthkits_Small = Array(Vector(-23.210, 2.059, 15.523), Vector(-39.251, 6.559, 7.032), Vector(-37.764, 3.050, 57.758),
			Vector(-16.997, 6.284, 84.687), Vector(17.615, 3.949, 88.212), Vector(-3.417, -1.241, 3.664));
		Global.Healthkits_Large = Array(Vector(-24.755, 2.698, -1.502), Vector(-4.915, 4.059, 45.586), Vector(-42.641, 11.059, 24.406),
			Vector(-35.661, 3.050, 69.597), Vector(12.072, 5.157, 67.239), Vector(-8.047, 1.349, 101.431));
		Global.Staircase_Middle = Array(0, 0, Vector(6.662, 0.257, 6.227), 0, Vector(-5.720, 4.061, 44.082), 0, Vector(-36.168, 7.059,
			25.708), Vector(-40.513, 6.561, 12.611), 0, 0, 0, 0, 0, 0, 0, 0, 0, Vector(-16.532, 4.003, 102.663), 0, Vector(-32.677, 5.188,
			107.469), Vector(-26.313, 6.690, 111.105), 0, 0);
	}
}

rule("Volskaya")
{
	event
	{
		Subroutine;
		Volskaya;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(19.115, -3.430, -7.029), Vector(22.230, -3.430, -2.728), Vector(11.664, -3.430, 0.382), Vector(
			14.471, -3.430, 3.732), Vector(14.699, -3.430, 8.417), Vector(22.479, -3.430, 16.681), Vector(12.294, -3.430, 11.616), Vector(
			8.697, -3.430, 14.177), Vector(3.268, -3.430, 10.937), Vector(1.857, -3.430, 5.124), Vector(6.298, -3.430, 0.208), Vector(
			-11.676, -5.429, 0.889), Vector(-18.760, -5.429, 3.040), Vector(-21.062, -4.971, 12.861), Vector(-20.263, -4.237, 17.439),
			Vector(-8.611, -4.224, 16.377), Vector(-4.076, -4.398, 19.473), Vector(5.244, -3.553, 28.582), Vector(9.836, -3.284, 30.330),
			Vector(9.762, -2.620, 44.645), Vector(4.051, -2.832, 48.484), Vector(2.942, -2.681, 39.472), Vector(-7.610, -2.680, 35.937),
			Vector(-16.961, -2.628, 36.414), Vector(-3.939, -2.680, 32.992), Vector(-8.027, -2.680, 29.489), Vector(-12.501, -2.628,
			32.243), Vector(-12.119, -3.299, 26.815), Vector(-8.182, -3.654, 26.154), Vector(-4.488, -3.421, 26.550), Vector(-6.737,
			-4.198, 23.789), Vector(-17.288, -4.266, 23.026), Vector(-24.407, -3.485, 34.104), Vector(-26.350, -4.067, 25.506), Vector(
			-39.582, -1.430, 29.641), Vector(-39.076, -1.430, 34.137), Vector(-34.752, -1.430, 34.769), Vector(-36.102, -1.430, 44.520),
			Vector(-27.377, -1.665, 51.362), Vector(-24.035, -2.852, 38.069), Vector(-21.062, -2.126, 48.056), Vector(-8.842, -2.083,
			51.688), Vector(-34.931, -1.006, 50.911), Vector(-35.597, -3.430, 13.048), Vector(-37.508, 3.570, 31.484), Vector(-36.800,
			3.570, 37.948), Vector(-28.547, 3.563, 39.603), Vector(-13.882, -1.749, 59.083), Vector(-18.960, -1.022, 61.353), Vector(
			-27.312, -0.431, 61.504), Vector(-29.990, -0.431, 55.102), Vector(-33.174, 3.570, 73.803), Vector(-29.789, 3.570, 70.053),
			Vector(-29.618, 3.647, 73.484), Vector(-29.774, 3.647, 76.796), Vector(-32.812, 3.658, 81.164), Vector(-27.768, -1.210,
			65.839), Vector(-23.880, -1.568, 67.878), Vector(-18.624, -1.749, 68.276), Vector(-10.463, -1.749, 69.855), Vector(-4.385,
			-1.561, 61.387), Vector(8.200, -1.430, 57.782), Vector(10.041, -0.519, 58.129), Vector(13.625, -0.430, 63.177), Vector(17.154,
			-0.430, 59.680), Vector(16.029, -0.430, 53.548), Vector(12.763, -0.430, 72.434), Vector(8.652, -1.155, 72.616), Vector(-1.985,
			-1.749, 73.489), Vector(-21.524, -1.729, 74.117), Vector(-21.985, -2.470, 83.259), Vector(-12.122, -2.441, 83.034), Vector(
			-1.233, -2.069, 77.713), Vector(-5.982, -2.422, 86.552), Vector(-1.490, -2.678, 85.267), Vector(-5.985, -2.496, 97.820),
			Vector(0.555, -2.155, 101.041), Vector(13.199, -2.431, 100.697), Vector(1.895, 3.470, 92.466), Vector(-2.446, 3.470, 95.443),
			Vector(-2.646, 3.730, 91.519), Vector(-0.875, 3.470, 87.720), Vector(2.134, 3.470, 85.156), Vector(3.405, 3.629, 102.223),
			Vector(-0.787, 3.745, 102.271), Vector(1.488, 3.570, 107.651), Vector(-2.600, 2.921, 107.674), Vector(-14.028, 2.570, 106.908),
			Vector(-11.756, 2.570, 109.268), Vector(-16.404, 2.572, 109.223), Vector(-5.354, 2.572, 109.220), Vector(-21.352, 2.734,
			109.327), Vector(-24.403, 3.035, 107.370), Vector(-27.815, 3.570, 107.400), Vector(-27.825, 3.570, 98.466), Vector(-25.630,
			3.619, 94.885), Vector(-25.730, 3.739, 100.670), Vector(-32.857, 3.570, 98.650), Vector(-32.793, 3.570, 93.471), Vector(
			-34.153, 3.570, 89.847), Vector(-34.120, 3.570, 84.913), Vector(-38.475, 3.570, 97.230), Vector(-26.195, -2.313, 89.096),
			Vector(-30.969, -2.430, 88.744), Vector(-31.784, -2.430, 94.464), Vector(-31.871, -2.496, 104.348), Vector(-20.520, -2.463,
			97.590), Vector(-22.432, -1.430, 117.197), Vector(-6.448, -1.430, 117.760), Vector(-7.472, -2.496, 102.167), Vector(-13.216,
			-2.145, 102.533), Vector(-11.458, 2.820, 77.646), Vector(-11.432, 2.820, 73.925), Vector(-6.518, 2.820, 74.816), Vector(
			-14.983, 2.820, 74.133), Vector(-16.582, 2.820, 80.687), Vector(-11.038, 2.820, 81.130), Vector(-5.433, 2.829, 81.280), Vector(
			-18.550, 3.493, 78.386), Vector(27.165, -2.496, 70.183), Vector(26.335, -2.496, 80.215), Vector(23.501, -2.496, 86.816),
			Vector(18.358, -2.430, 86.412), Vector(22.929, -2.496, 101.479), Vector(26.751, 2.570, 76.861), Vector(24.187, 2.570, 89.587),
			Vector(24.067, 2.570, 87.145), Vector(-42.591, 3.570, 97.319), Vector(-39.044, -2.611, 72.881), Vector(-48.146, -2.377,
			78.117), Vector(-49.160, -2.491, 88.289), Vector(-52.001, -3.425, 97.925), Vector(-44.252, -3.429, 103.582), Vector(-35.421,
			-2.496, 103.709), Vector(-59.423, -2.805, 94.053), Vector(-64.304, -2.516, 91.043), Vector(-61.286, -2.430, 85.605), Vector(
			-55.635, -2.611, 76.016), Vector(-50.681, -2.611, 64.123), Vector(-45.950, -1.672, 60.850), Vector(-44.236, -1.430, 57.024),
			Vector(-50.469, -1.430, 48.442), Vector(-54.643, -1.430, 46.464), Vector(-60.676, -1.430, 55.062), Vector(-58.174, -1.759,
			57.155), Vector(-58.453, -2.611, 63.954), Vector(-65.071, -2.611, 73.381), Vector(-72.684, -2.430, 77.054), Vector(-72.353,
			-1.782, 73.187), Vector(-67.753, -1.430, 65.880), Vector(-72.919, -0.306, 62.034), Vector(-70.812, -1.118, 63.298), Vector(
			-64.567, 3.570, 90.686), Vector(-61.703, 3.570, 86.465), Vector(-55.084, 3.570, 89.111), Vector(-49.589, 3.570, 92.694),
			Vector(-57.612, -1.430, 42.940), Vector(-70.114, -0.930, 37.522), Vector(-71.164, -0.930, 33.723), Vector(-67.720, -0.930,
			29.147), Vector(-63.522, -0.930, 29.934), Vector(-59.719, -0.930, 33.152), Vector(-64.327, -0.928, 39.841), Vector(-78.440,
			-0.430, 49.353), Vector(-75.832, -0.430, 56.011), Vector(-71.642, -0.430, 50.749), Vector(-85.049, -2.426, 73.341), Vector(
			-100.962, 3.740, 71.803), Vector(-97.911, 3.572, 73.851), Vector(-96.376, 3.572, 68.467), Vector(-94.627, 3.572, 64.339),
			Vector(-91.831, 3.572, 60.689), Vector(-91.449, 3.572, 56.255), Vector(-87.742, 3.648, 58.282), Vector(-114.645, 3.570,
			71.778), Vector(-110.376, 3.570, 67.612), Vector(-110.628, 3.570, 64.171), Vector(-118.235, -0.430, 53.423), Vector(-111.705,
			-0.312, 48.345), Vector(-114.968, -0.430, 49.214), Vector(-121.906, -0.430, 45.480), Vector(-125.369, -0.430, 47.922), Vector(
			-130.214, -0.430, 45.053), Vector(-132.296, -0.430, 41.671), Vector(-128.938, 0.569, 38.694), Vector(-126.317, 0.569, 34.896),
			Vector(-127.048, 0.569, 27.394), Vector(-120.549, 0.544, 33.474), Vector(-118.477, 0.569, 28.308), Vector(-110.779, -0.430,
			26.838), Vector(-105.563, -0.430, 18.547), Vector(-98.086, -0.926, 23.022), Vector(-102.348, -0.930, 30.017), Vector(-99.669,
			-0.428, 32.314), Vector(-108.673, -0.930, 40.380), Vector(-101.363, -0.430, 44.968), Vector(-87.883, -0.928, 28.724), Vector(
			-88.885, -0.926, 39.396), Vector(-90.959, -0.431, 43.016), Vector(-81.479, -0.930, 31.166), Vector(-77.959, -0.930, 26.831),
			Vector(-91.098, 3.570, 27.544), Vector(-93.702, 3.572, 26.169), Vector(-96.730, 3.572, 33.281), Vector(-88.770, 3.572, 38.644),
			Vector(-89.840, 3.748, 35.584), Vector(-89.765, 3.674, 40.430), Vector(-84.789, 3.570, 36.290), Vector(-81.440, 3.572, 43.105),
			Vector(-83.322, 3.572, 46.807), Vector(-83.438, 3.579, 50.769), Vector(-87.071, 3.579, 49.076), Vector(-100.021, 3.570,
			38.536), Vector(-102.446, 3.811, 46.669), Vector(-100.670, 3.570, 43.478), Vector(-103.527, 3.811, 41.706), Vector(-105.813,
			3.687, 45.358), Vector(-102.850, 3.570, 43.959), Vector(-107.396, 3.570, 51.111), Vector(-107.256, 3.570, 56.993), Vector(
			-85.044, -0.430, 51.472), Vector(-88.646, -0.430, 56.284), Vector(-82.544, -0.430, 64.078), Vector(-85.334, -0.430, 58.812),
			Vector(-80.393, -0.430, 54.047), Vector(-92.247, -2.430, 67.260), Vector(-91.255, -2.430, 71.294), Vector(-95.775, -2.430,
			73.729), Vector(-98.958, -2.430, 71.734), Vector(-96.375, -2.430, 66.994), Vector(-104.341, -2.430, 67.574), Vector(-100.997,
			-2.430, 62.125), Vector(-99.738, -1.496, 60.514), Vector(-98.738, -0.572, 58.960), Vector(-97.045, -0.430, 56.735), Vector(
			-77.591, -0.430, 68.752), Vector(-84.202, -0.424, 78.688), Vector(-89.661, -0.428, 87.233), Vector(-71.214, 4.070, 53.689),
			Vector(-75.097, 4.206, 51.640), Vector(-74.899, 4.248, 48.094), Vector(-72.378, 4.230, 43.876), Vector(-70.052, 4.070, 40.810),
			Vector(-66.459, 4.176, 42.616), Vector(-62.366, 4.184, 45.114), Vector(-70.425, 4.070, 51.319), Vector(36.345, 0.571, -1.508),
			Vector(20.374, 0.571, -19.592), Vector(16.709, -3.429, -16.537), Vector(12.904, -3.429, -12.422), Vector(7.833, -3.430,
			-8.829), Vector(14.164, -3.430, -2.900), Vector(17.368, -3.430, 1.821), Vector(23.297, -3.430, 9.172), Vector(28.363, -3.430,
			5.357), Vector(33.231, -3.430, 1.222), Vector(21.637, -3.430, 20.256), Vector(16.074, -3.423, 24.850), Vector(0.806, -3.430,
			-7.881), Vector(-16.527, 3.777, 30.641), Vector(-17.308, 3.599, 43.815), Vector(0.360, 3.642, 43.351), Vector(0.495, 3.591,
			30.902), Vector(7.388, 2.422, 43.116), Vector(7.267, 2.346, 35.081), Vector(-8.600, 4.136, 43.313), Vector(-17.816, 4.517,
			57.624), Vector(-17.825, 4.517, 53.402), Vector(7.155, 3.660, 92.643), Vector(13.680, -0.430, 78.444), Vector(-67.330, 3.570,
			81.924), Vector(-82.751, 1.570, 20.028));
		Global.Healthkits = Array(Vector(-39.628, -1.430, 24.338), Vector(-8.106, -2.590, 37.492), Vector(17.732, -3.427, 45.712), Vector(
			20.840, -0.430, 55.596), Vector(16.939, -2.430, 94.748), Vector(-33.316, -2.430, 88.370), Vector(-13.976, -1.430, 117.541),
			Vector(-15.840, -2.430, 78.587), Vector(-30.393, -0.430, 53.872), Vector(-65.422, 3.570, 83.113), Vector(-64.234, -2.430,
			82.749), Vector(-73.366, -0.930, 32.706), Vector(-69.632, -0.430, 46.764), Vector(-109.866, -0.430, 55.291), Vector(-91.409,
			-2.430, 63.145), Vector(-96.973, -0.430, 33.606));
		Global.ObjectiveA_Nodes = Array(Vector(-7.769, -2.289, 85.207), Vector(-7.815, -2.289, 87.377), Vector(-7.840, -2.289, 89.852),
			Vector(-7.870, -2.289, 92.546), Vector(-7.896, -2.289, 95.101), Vector(-10.586, -2.289, 95.080), Vector(-10.507, -2.289,
			92.481), Vector(-10.507, -2.298, 89.904), Vector(-10.502, -2.289, 87.292), Vector(-10.497, -2.289, 85.103), Vector(-13.432,
			-2.289, 85.104), Vector(-13.432, -2.310, 87.354), Vector(-13.432, -2.144, 89.979), Vector(-13.433, -2.160, 92.463), Vector(
			-13.413, -2.291, 94.941), Vector(-16.509, -2.291, 94.941), Vector(-16.509, -2.293, 92.276), Vector(-16.509, -2.316, 89.911),
			Vector(-16.509, -2.289, 87.247), Vector(-16.505, -2.289, 85.047), Vector(-19.485, -2.289, 85.047), Vector(-19.485, -2.289,
			87.273), Vector(-19.485, -2.289, 89.919), Vector(-19.484, -2.289, 92.403), Vector(-19.484, -2.289, 95.021));
		Global.ObjectiveB_Nodes = Array(Vector(-85.259, -0.430, 47.489), Vector(-87.578, -0.430, 46.107), Vector(-90.244, -0.430, 44.475),
			Vector(-92.404, -0.430, 43.138), Vector(-94.466, -0.430, 41.875), Vector(-96.901, -0.430, 40.386), Vector(-98.394, -0.430,
			42.773), Vector(-95.954, -0.430, 44.219), Vector(-93.803, -0.430, 45.536), Vector(-91.720, -0.430, 46.812), Vector(-88.960,
			-0.430, 48.498), Vector(-86.710, -0.430, 49.878), Vector(-88.119, -0.430, 52.264), Vector(-90.392, -0.430, 50.855), Vector(
			-93.176, 0.659, 49.149), Vector(-95.257, 0.541, 47.899), Vector(-97.430, -0.430, 46.608), Vector(-99.799, -0.430, 45.150),
			Vector(-101.640, -0.430, 48.130), Vector(-99.006, -0.430, 49.694), Vector(-97.037, -0.430, 50.902), Vector(-94.790, -0.430,
			52.278), Vector(-92.267, -0.430, 53.823), Vector(-89.944, -0.430, 55.238), Vector(-91.288, -0.430, 57.447), Vector(-93.702,
			-0.430, 55.975), Vector(-96.241, -0.430, 54.421), Vector(-98.429, -0.430, 53.079), Vector(-100.506, -0.430, 51.832), Vector(
			-102.906, -0.430, 50.366), Vector(-103.862, -0.430, 51.903), Vector(-101.452, -0.430, 53.374), Vector(-99.312, -0.430, 54.687),
			Vector(-97.289, -0.430, 55.928), Vector(-94.725, -0.430, 57.466), Vector(-92.310, -0.430, 58.923));
		Global.Chokepoint = Array(Vector(-9.119, -1.626, 54.718), Vector(-33.496, -1.974, 73.884), Vector(-71.918, -0.479, 62.658));
		Global.Staircase_Top = Array(Vector(27.686, -1.430, -10.888), Vector(23.336, 0.570, -18.080), Vector(34.674, 0.570, -5.313),
			Vector(-2.188, -3.429, -7.196), Vector(-30.642, -3.430, 6.991), Vector(-43.221, -1.430, 22.742), Vector(-47.084, 3.570,
			24.521), Vector(-33.596, -1.430, 27.320), Vector(9.408, 3.569, 90.964), Vector(24.269, 2.569, 72.754), Vector(-5.994, -1.430,
			108.300), Vector(-7.298, -1.430, 113.788), Vector(-13.958, -1.430, 117.341), Vector(-20.271, -1.431, 113.485), Vector(-21.869,
			-1.430, 108.011), Vector(-38.808, 3.570, 93.752), Vector(-32.475, 3.604, 64.814), Vector(-43.518, 3.597, 91.647), Vector(
			-70.587, 3.570, 91.748), Vector(-65.994, 4.079, 52.743), Vector(-81.074, -0.424, 66.465), Vector(-86.667, -0.430, 63.666),
			Vector(-102.093, 3.570, 79.628), Vector(-110.662, 3.570, 61.378), Vector(-80.923, 1.571, 23.151), Vector(-90.132, 3.570,
			23.134));
		Global.Staircase_Bottom = Array(Vector(23.420, -3.430, -7.475), Vector(26.596, -1.430, -14.508), Vector(31.330, -1.430, -8.959),
			Vector(-6.437, -5.430, -3.685), Vector(-25.602, -5.440, 6.907), Vector(-43.185, -3.430, 17.558), Vector(-45.096, -1.429,
			28.211), Vector(-28.934, -3.429, 27.227), Vector(13.732, -2.430, 87.731), Vector(17.714, -0.314, 72.481), Vector(-5.988,
			-2.496, 104.790), Vector(-10.278, -2.496, 113.708), Vector(-14.020, -2.496, 113.559), Vector(-17.397, -2.496, 113.666), Vector(
			-21.813, -2.491, 105.020), Vector(-32.420, -2.377, 83.668), Vector(-32.424, -0.430, 56.062), Vector(-42.925, -2.430, 78.816),
			Vector(-75.948, -2.429, 80.614), Vector(-62.350, -1.430, 54.457), Vector(-83.525, -2.428, 71.002), Vector(-89.500, -2.430,
			67.937), Vector(-89.172, -2.430, 78.443), Vector(-118.468, -0.430, 56.971), Vector(-83.376, -0.916, 28.143), Vector(-87.687,
			1.629, 19.072));
		Global.Healthkits_Small = Array(Vector(20.840, -0.430, 55.596), Vector(16.939, -2.430, 94.748), Vector(-13.976, -1.430, 117.541),
			Vector(-15.840, -2.430, 78.587), Vector(-30.393, -0.430, 53.872), Vector(-65.422, 3.570, 83.113), Vector(-69.632, -0.430,
			46.764), Vector(-109.866, -0.430, 55.291), Vector(-96.973, -0.430, 33.606));
		Global.Healthkits_Large = Array(Vector(-39.628, -1.430, 24.338), Vector(-8.106, -2.590, 37.492), Vector(17.732, -3.427, 45.712),
			Vector(-33.316, -2.430, 88.370), Vector(-64.234, -2.430, 82.749), Vector(-73.366, -0.930, 32.706), Vector(-91.409, -2.430,
			63.145));
		Global.Staircase_Middle = Array(0, 0, 0, 0, 0, 0, Vector(-53.266, 1.570, 26.263), 0, Vector(11.338, -0.430, 80.661), 0, 0, 0, 0, 0,
			0, Vector(-38.321, -0.430, 83.606), 0, 0, Vector(-78.859, -0.430, 86.015), Vector(-64.903, -0.602, 52.896), 0, 0, Vector(
			-93.567, -0.424, 84.709), 0, 0, 0);
	}
}

rule("Gamertags")
{
	event
	{
		Subroutine;
		Gamertags;
	}

	actions
	{
		Global.Gamertags = Array(Custom String("Spiderman318"), Custom String("Spiderman423"), Custom String("Hollywoof423"),
			Custom String("Hollywoof318"), Custom String("Sunpatches"), Custom String("Sunpatches77"), Custom String("Sk366in"),
			Custom String("Breggers537"), Custom String("GenjiMain2019"), Custom String("BastionMain2021"), Custom String("MercyUWU794"),
			Custom String("WorkshopGamer2022"), Custom String("Spiderman31807"), Custom String("Hollywoof31807"), Custom String(
			"MineralMiner2681"), Custom String("CallMeDave2291"), Custom String("GenericDude4378"), Custom String("GirlyGamerXOXO91876"),
			Custom String("ImBatman"), Custom String("Deadpool"), Custom String("Not_Ur_Friend6719"), Custom String("Comp4Life"),
			Custom String("Overwatch2_When5456"), Custom String("Jakey_Bakey"), Custom String("The_BarStool45219"), Custom String(
			"TeamFortressWatch"), Custom String("AI"), Custom String("Robot"), Custom String("Bot"), Custom String(
			"Artificial Intelligence"), Custom String("Dummy2"), Custom String("Sussy_Baka"), Custom String("Patchie"), Custom String(
			"OhhhWhoLivesUnderMyBed"), Custom String("Terminater"), Custom String("Prototype C"), Custom String("OilyWater"),
			Custom String("BlueBlood"), Custom String("FallDude546"), Custom String("KillerMain2022"), Custom String(
			"Toxic_Friendship_GoBye"), Custom String("Toxic_Waste_Disposal"), Custom String("Toxic_DumpSite"), Custom String(
			"Xx_Mercy_xX"), Custom String("CallMeDaddy"), Custom String("CallMeMommy"), Custom String("CallMeSus"), Custom String(
			"CallMe01100010"), Custom String("CallMeAt_18006745210"), Custom String("Stranger_Fans_4"), Custom String(
			"Idk Im Writing 100 of these?!?!"), Custom String("Send Help Plz"), Custom String("ProNoob69"), Custom String("YuffyDuffy329"),
			Custom String("Aimbot4You"), Custom String("HackerMan-801"), Custom String("Slenderdude"), Custom String("Iron_Catto"),
			Custom String("AEG_Rain"), Custom String("Name.EXE"), Custom String("Error 404"), Custom String("Kill.EXE"), Custom String(
			"EXE-Failed"), Custom String("WasteOfSpace"), Custom String("Tangey_Blue3191"), Custom String("DragonDogma"), Custom String(
			"PlayStation5Boii"), Custom String("PS4_4_Life"), Custom String("Clash-Royal4319"), Custom String("Ark.Survival.Dino"),
			Custom String("UnrealEngine5Pog"), Custom String("OW2_Beta_2026"), Custom String("LamarDavis6969"), Custom String(
			"GamerTag.EXE"), Custom String("FunkeyMonk"), Custom String("CoCo"), Custom String("GabeRed"), Custom String("HelenPeg630"),
			Custom String("Friendo3464"), Custom String("DoiKnowYou"), Custom String("SurvivorMain2018"), Custom String("Virgo-Cutie2964"),
			Custom String("Minecrafter-54791"), Custom String("LetsHateThisGame"), Custom String("Humon Disguise"), Custom String(
			"Disguised AI"), Custom String("UrMomGay666"), Custom String("DemonChild666"), Custom String("Angelic555Transcend"),
			Custom String("Super.. Hot.."), Custom String("Well Done Gregory!"), Custom String("Meme5481"), Custom String(
			"PleaseLaugh4700"), Custom String("Tini-TheCat"), Custom String("Kitto-Catto-5471"), Custom String("BoardHouse444"),
			Custom String("IHaveNoFriends"), Custom String("Rick&Morty-S6?"), Custom String("ItsAFriday6682"), Custom String(
			"Triple0-Double2-54"), Custom String("IronBaby420"), Custom String("SpiderBastion42307"), Custom String("X_Simp318"),
			Custom String("YuffBoi2020"), Custom String("BatMan318"), Custom String("FreakVessel22"), Custom String("FunBastion8910"),
			Custom String("ImFreaky2020"), Custom String("SpiderMuffy8910"), Custom String("NickBoi34768"), Custom String("TimeMan_XX"),
			Custom String("IronBlue_XX"), Custom String("NickGamer37481"), Custom String("FunFace6969"), Custom String("Its_Bastion555"),
			Custom String("TheMuffy_XX"), Custom String("TheVessel420"), Custom String("GoodMan001"), Custom String("TheDaddy37481"),
			Custom String("FreakPatch9910"), Custom String("SunTimes423"), Custom String("X_Gamer42307"), Custom String("FreakMan31423"),
			Custom String("FreakVessel005"), Custom String("TheFunny999"), Custom String("FunGamer1891"), Custom String("FunMercy0420"),
			Custom String("GoodMercy666"), Custom String("IronFace37481"), Custom String("Virgo40420"), Custom String("GoodBastion92"),
			Custom String("CallmeName9910"), Custom String("BatPatch.EXE"), Custom String("Error40442307"), Custom String(
			"SpiderDaddy31807"), Custom String("GamerMan37481"), Custom String("ErrorBoi37481"), Custom String("GoodLúcio420"),
			Custom String("AEG_Vessel423"), Custom String("GoodLuffy9910"), Custom String("GamerFreaky_XX"), Custom String("X_Mercy555"),
			Custom String("Its_Baby999"), Custom String("IronFreaky420"), Custom String("TheLúcio69"), Custom String("SunPatch.EXE"),
			Custom String("TimePlease6969"), Custom String("VirgoFreaky34768"), Custom String("CallmeMuffy31807"), Custom String(
			"FiveSimp555"), Custom String("GamerBlue31423"), Custom String("BatDaddy005"), Custom String("ErrorVessel37481"),
			Custom String("Its_Simp31423"), Custom String("CallmeBastion42307"), Custom String("GoodMercy318"), Custom String(
			"JauneMuffy.EXE"), Custom String("XX_Tuffy420"), Custom String("ImBaby_X"), Custom String("ErrorBoi31807"), Custom String(
			"X_Bastion22"), Custom String("DuffyUWU_X"), Custom String("ProUWU_XX"), Custom String("VirgoRain1891"), Custom String(
			"InsymGamer555"), Custom String("GamerPatch555"), Custom String("Its_Funny_X"), Custom String("FiveLuffy.EXE"), Custom String(
			"ImUWU2020"), Custom String("IronFunny720"), Custom String("ErrorMuffy420"), Custom String("FiveDaddy005"), Custom String(
			"TimeMan555"), Custom String("Jaune4048910"), Custom String("VirgoLúcio87431"), Custom String("JauneFunny31807"),
			Custom String("X_Man.EXE"), Custom String("X_Luffy_X"), Custom String("BuffyBoi42307"), Custom String("X_Muffy6969"),
			Custom String("XX_Face_XX"), Custom String("IronGenji37481"), Custom String("NickSimp001"), Custom String("BatVessel22"),
			Custom String("FreakName.EXE"), Custom String("NightBoi6969"), Custom String("XX_Bastion666"), Custom String("GoodLúcio42307"),
			Custom String("NightMercy_XX"), Custom String("XX_Mommy22"), Custom String("NightBoi9910"), Custom String("InsymBoi0420"),
			Custom String("GamerMuffy720"), Custom String("YuffTuffy555"), Custom String("YuffMommy92"), Custom String("SpiderSimp555"),
			Custom String("TheSimp1891"), Custom String("FiveBaby999"), Custom String("VirgoPlease_XX"), Custom String("TimeBlue37481"),
			Custom String("GoodGamer42307"), Custom String("IronMuffy420"), Custom String("GamerDaddy555"), Custom String("ImBastion720"),
			Custom String("FunPatch666"), Custom String("CallmeBaby666"), Custom String("TimeMommy420"), Custom String("TimeMan420"),
			Custom String("ProBaby1891"), Custom String("VirgoGenji22"), Custom String("X_Times1891"), Custom String("YuffSimp31423"),
			Custom String("RedFace92"), Custom String("YuffBastion31807"), Custom String("VirgoUWU31807"), Custom String("SpiderMuffy78"),
			Custom String("GamerName0420"), Custom String("IronFace92"), Custom String("GamerFreaky6969"), Custom String("NickMan999"),
			Custom String("XX_Funny92"), Custom String("Sun404005"), Custom String("DuffyDaddy720"), Custom String("FiveBastion42307"),
			Custom String("TimeBastion.EXE"), Custom String("NightBastion666"), Custom String("VirgoPlease42307"));
	}
}

rule("Hero Set Variables")
{
	event
	{
		Subroutine;
		Hero_Variables;
	}

	actions
	{
		Event Player.Can_Change_Arc = True;
		Event Player.Current_Hero = Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player);
		Event Player.Aim_Predict_Scale = Global.Aim_Predict_Scale[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Passive = Global.Passive[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Primary_Max = Global.Primary_Max[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Primary_Min = Global.Primary_Min[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Secondary_Max = Global.Secondary_Max[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Secondary_Min = Global.Secondary_Min[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Aim_Arc = Global.Primary_Arc[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ability1_Max = Global.Ability1_Max[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Mobility_Distance = Global.Mobility_Distance[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Charging_Time = Global.Charge_Time[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ultimate_Duration = Global.Ultimate_Duration[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Use_Ultimate_Max = Global.Use_Ultimate_Max[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ability1_Min = Global.Ability1_Min[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ability2_Max = Global.Ability2_Max[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ultimate_Health = Global.Ultimate_Health[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ultimate_Targets = Global.Ultimate_Targets[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ability2_Min = Global.Ability2_Min[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ultimate_Target_Team = Global.Ultimate_Target_Team[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)
			] == 0 ? Opposite Team Of(Team Of(Event Player)) : Team Of(Event Player);
		Event Player.Ultimate_Max = Global.Ultimate_Max[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ultimate_Min = Global.Ultimate_Min[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Alternative_Form = Empty Array;
		Event Player.Offensive = Empty Array;
		Event Player.Defensive = Empty Array;
		Event Player.Mobility = Empty Array;
		Event Player.Healing = Empty Array;
		Event Player.Secondary_Fire = Empty Array;
		Event Player.Secondary_Offensive = Empty Array;
		Event Player.Use_If_Shield = Empty Array;
		Event Player.Secondary_Defensive = Empty Array;
		Event Player.Secondary_Healing = Empty Array;
		Event Player.Hold = Empty Array;
		Event Player.Confirm = Empty Array;
		Event Player.Toggle = Empty Array;
		Event Player.Cooldown = Empty Array;
		Event Player.Charge = Empty Array;
		Event Player.Resource = Empty Array;
		Event Player.Charging = Empty Array;
		Event Player.Heal_Friendlys = Empty Array;
		If(Is True For Any(Array(Hero(Brigitte), Hero(Doomfist), Hero(Genji), Hero(Junkrat), Hero(Reinhardt), Hero(Roadhog), Hero(Bastion),
			Hero(Hanzo), Hero(Winston), Hero(Junker Queen), Hero(Ramattra)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Offensive, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Ana), Hero(Ashe), Hero(Mercy), Hero(Moira), Hero(Orisa), Hero(Reaper), Hero(Sigma), Hero(Zarya)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Defensive, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Cassidy), Hero(Echo), Hero(Soldier: 76), Hero(Tracer), Hero(Widowmaker), Hero(Winston), Hero(
			Wrecking Ball), Hero(D.Va), Hero(Sombra), Hero(Sojourn)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Mobility, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Ashe), Hero(Cassidy), Hero(D.Va), Hero(Doomfist), Hero(Echo), Hero(Junkrat), Hero(Moira), Hero(
			Reinhardt), Hero(Sigma), Hero(Widowmaker), Hero(Hanzo), Hero(Zenyatta), Hero(Ana), Hero(Orisa), Hero(Junker Queen), Hero(
			Ramattra), Hero(Sojourn)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Offensive, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Baptiste), Hero(Genji), Hero(Pharah), Hero(Sombra), Hero(Winston), Hero(Wrecking Ball), Hero(
			Torbjörn), Hero(Mei), Hero(Doomfist), Hero(Orisa)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Defensive, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Reaper), Hero(Lúcio)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Mobility, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Baptiste), Hero(Mei)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Healing, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Ana), Hero(Roadhog), Hero(Soldier: 76), Hero(Tracer), Hero(Kiriko)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Healing, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Cassidy), Hero(Genji), Hero(Mei), Hero(Roadhog), Hero(Symmetra), Hero(Torbjörn), Hero(Zarya), Hero(
			Zenyatta), Hero(Kiriko), Hero(Lifeweaver), Hero(Winston)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Secondary_Fire, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(Doomfist), Hero(Echo), Hero(Junkrat), Hero(Lúcio), Hero(Soldier: 76), Hero(Sombra), Hero(Reinhardt),
			Hero(Brigitte), Hero(Junker Queen), Hero(Bastion), Hero(Orisa), Hero(Sojourn)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Secondary_Offensive, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(D.Va), Hero(Sigma), Hero(Ramattra)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Secondary_Defensive, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Secondary_Healing, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(Lúcio)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Hold, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Confirm, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Bastion), Hero(Mei), Hero(Reaper), Hero(Sombra), Hero(Wrecking Ball), Hero(Hanzo), Hero(Mercy), Hero(
			D.Va), Hero(Soldier: 76), Hero(Ramattra), Hero(Orisa)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Toggle, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Hold, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Mei), Hero(Reaper), Hero(Ashe)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Confirm, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Genji), Hero(Moira), Hero(Tracer), Hero(Widowmaker), Hero(Wrecking Ball), Hero(Hanzo), Hero(Mei),
			Hero(Orisa)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Toggle, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Brigitte), Hero(D.Va), Hero(Doomfist), Hero(Reinhardt), Hero(Sombra), Hero(Symmetra), Hero(Zenyatta),
			Hero(Lifeweaver), Hero(Winston)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Hold, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Confirm, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Toggle, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Hold, Append To Array, Button(Ultimate));
		End;
		If(Is True For Any(Array(Hero(Baptiste), Hero(Cassidy), Hero(Junkrat), Hero(Sigma), Hero(Symmetra), Hero(Lifeweaver), Hero(Orisa)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Confirm, Append To Array, Button(Ultimate));
		End;
		If(Is True For Any(Array(Hero(Ramattra)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Toggle, Append To Array, Button(Ultimate));
		End;
		If(Is True For All(Array(Hero(Bastion), Hero(Junkrat), Hero(Lúcio), Hero(Soldier: 76), Hero(Symmetra), Hero(Tracer), Hero(
			Wrecking Ball), Hero(Zenyatta)), Event Player.Current_Hero != Current Array Element));
			Modify Player Variable(Event Player, Cooldown, Append To Array, Button(Ability 1));
		End;
		If(Is True For All(Array(Hero(Bastion), Hero(Brigitte), Hero(Zenyatta)), Event Player.Current_Hero != Current Array Element));
			Modify Player Variable(Event Player, Cooldown, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Brigitte), Hero(Doomfist), Hero(Echo), Hero(Orisa), Hero(Reinhardt), Hero(Sigma), Hero(Soldier: 76),
			Hero(Sombra), Hero(Bastion), Hero(Junker Queen)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Cooldown, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(Junkrat), Hero(Symmetra), Hero(Tracer)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charge, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Brigitte)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charge, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charge, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Resource, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Resource, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(D.Va), Hero(Pharah)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Resource, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charging, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charging, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Doomfist), Hero(Sigma), Hero(Symmetra), Hero(Zenyatta), Hero(Winston)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charging, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(Cassidy), Hero(Orisa)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charging, Append To Array, Button(Ultimate));
		End;
		If(Is True For Any(Array(Hero(Ashe), Hero(Hanzo)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charging, Append To Array, Button(Primary Fire));
		End;
		If(Is True For Any(Array(Hero(Hanzo)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Hold, Append To Array, Button(Primary Fire));
		End;
		If(Is True For Any(Array(Hero(Ana), Hero(Ashe), Hero(Baptiste), Hero(Bastion), Hero(Brigitte), Hero(Cassidy), Hero(D.Va), Hero(
			Moira), Hero(Reinhardt), Hero(Soldier: 76), Hero(Sombra), Hero(Symmetra), Hero(Tracer), Hero(Widowmaker), Hero(Winston), Hero(
			Wrecking Ball), Hero(Zarya), Hero(Hanzo), Hero(Junker Queen)), Event Player.Current_Hero == Current Array Element));
			Event Player.Aim_Predict = 0.050;
		End;
		If(Is True For Any(Array(Hero(Doomfist), Hero(Echo), Hero(Genji), Hero(Lúcio), Hero(Mei), Hero(Orisa), Hero(Sigma), Hero(Torbjörn),
			Hero(Zenyatta), Hero(Mercy), Hero(Sojourn), Hero(Ramattra), Hero(Kiriko), Hero(Lifeweaver)),
			Event Player.Current_Hero == Current Array Element));
			Event Player.Aim_Predict = 0.225;
		End;
		If(Is True For Any(Array(Hero(Pharah), Hero(Junkrat)), Event Player.Current_Hero == Current Array Element));
			Event Player.Aim_Predict = 0.400;
		End;
		If(Is True For Any(Array(Hero(Bastion), Hero(Lúcio), Hero(Wrecking Ball), Hero(Ramattra)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Alternative_Form, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Alternative_Form, Append To Array, Button(Ability 2));
		End;
		If(Is True For All(Array(Hero(Ashe)), Event Player.Current_Hero != Current Array Element));
			Modify Player Variable(Event Player, Hold, Append To Array, Button(Primary Fire));
		End;
		If(Is True For Any(Array(Hero(D.Va)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Alternative_Form, Append To Array, Custom String("Passive"));
		End;
		If(Is True For All(Array(Hero(Ana), Hero(Brigitte), Hero(Hanzo), Hero(Junkrat), Hero(Roadhog)),
			Event Player.Current_Hero != Current Array Element));
			Modify Player Variable(Event Player, Use_If_Shield, Append To Array, Button(Ability 1));
		End;
		If(Is True For All(Array(Hero(Ana), Hero(Ashe), Hero(Cassidy), Hero(Echo), Hero(Sigma), Hero(Zenyatta)),
			Event Player.Current_Hero != Current Array Element));
			Modify Player Variable(Event Player, Use_If_Shield, Append To Array, Button(Ability 2));
		End;
		If(Is True For All(Array(Hero(Echo), Hero(Lúcio), Hero(Orisa), Hero(Soldier: 76), Hero(Sombra)),
			Event Player.Current_Hero != Current Array Element));
			Modify Player Variable(Event Player, Use_If_Shield, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(Ana), Hero(Kiriko), Hero(Lifeweaver), Hero(Mercy), Hero(Moira)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Heal_Friendlys, Append To Array, Button(Primary Fire));
		End;
		If(Is True For Any(Array(Hero(Baptiste)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Heal_Friendlys, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(Baptiste), Hero(Kiriko)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Heal_Friendlys, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Ana), Hero(Baptiste), Hero(Brigitte), Hero(Kiriko), Hero(Lifeweaver), Hero(Lúcio), Hero(Moira)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Heal_Friendlys, Append To Array, Button(Ability 2));
		End;
	}
}

rule("Start AI Facing")
{
	event
	{
		Subroutine;
		AI_Start_Facing;
	}

	actions
	{
		If(Global.AI_Aim_Type == 0);
			Start Facing(Event Player, Entity Exists(First Of(Event Player.Target_Order)) ? Direction Towards(Eye Position(Event Player),
				Eye Position(First Of(Event Player.Target_Order))) : Direction Towards(Eye Position(Event Player), Event Player.Current_Node),
				Is True For Any(Array(Has Status(Event Player, Knocked Down), Has Status(Event Player, Asleep), Has Status(Event Player,
				Frozen), Has Status(Event Player, Stunned)), Current Array Element == True) ? 0 : (Magnitude Of(Throttle Of(Event Player))
				== 0 && !Entity Exists(First Of(Event Player.Target_Order)) ? 0 : Global.AI_Turn_Speed), To World, Direction and Turn Rate);
		Else If(Global.AI_Aim_Type == 1);
			Start Facing(Event Player, Entity Exists(First Of(Event Player.Target_Order)) ? Direction From Angles(
				Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))
				+ Velocity Of(First Of(Event Player.Target_Order)) * Event Player.Aim_Predict * (Distance Between(Event Player, First Of(
				Event Player.Target_Order)) / Event Player.Aim_Predict_Scale))), Vertical Angle From Direction(Direction Towards(Eye Position(
				Event Player), Eye Position(First Of(Event Player.Target_Order))))) : Direction Towards(Eye Position(Event Player),
				Event Player.Current_Node), Is True For Any(Array(Has Status(Event Player, Knocked Down), Has Status(Event Player, Asleep),
				Has Status(Event Player, Frozen), Has Status(Event Player, Stunned)), Current Array Element == True) ? 0 : (Magnitude Of(
				Throttle Of(Event Player)) == 0 && !Entity Exists(First Of(Event Player.Target_Order)) ? 0 : Global.AI_Turn_Speed), To World,
				Direction and Turn Rate);
		Else If(Global.AI_Aim_Type == 2);
			Start Facing(Event Player, Entity Exists(First Of(Event Player.Target_Order)) ? Direction From Angles(
				Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player), Eye Position(First Of(
				Event Player.Target_Order)))), Vertical Angle From Direction(Direction Towards(Eye Position(Event Player),
				Event Player.Aim_Arc > 0 ? First Of(Event Player.Target_Order) : Eye Position(First Of(Event Player.Target_Order))))
				+ Distance Between(Event Player, First Of(Event Player.Target_Order)) * Event Player.Aim_Arc * -1) : Direction Towards(
				Eye Position(Event Player), Event Player.Current_Node), Is True For Any(Array(Has Status(Event Player, Knocked Down),
				Has Status(Event Player, Asleep), Has Status(Event Player, Frozen), Has Status(Event Player, Stunned)),
				Current Array Element == True) ? 0 : (Magnitude Of(Throttle Of(Event Player)) == 0 && !Entity Exists(First Of(
				Event Player.Target_Order)) ? 0 : Global.AI_Turn_Speed), To World, Direction and Turn Rate);
		Else;
			Start Facing(Event Player, Entity Exists(First Of(Event Player.Target_Order)) ? Direction From Angles(
				Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))
				+ Velocity Of(First Of(Event Player.Target_Order)) * Event Player.Aim_Predict * (Distance Between(Event Player, First Of(
				Event Player.Target_Order)) / Event Player.Aim_Predict_Scale))), Vertical Angle From Direction(Direction Towards(Eye Position(
				Event Player), Event Player.Aim_Arc > 0 ? First Of(Event Player.Target_Order) : Eye Position(First Of(
				Event Player.Target_Order)))) + Distance Between(Event Player, First Of(Event Player.Target_Order))
				* Event Player.Aim_Arc * -1) : Direction Towards(Eye Position(Event Player), Event Player.Current_Node), Is True For Any(Array(
				Has Status(Event Player, Knocked Down), Has Status(Event Player, Asleep), Has Status(Event Player, Frozen), Has Status(
				Event Player, Stunned)), Current Array Element == True) ? 0 : (Magnitude Of(Throttle Of(Event Player)) == 0 && !Entity Exists(
				First Of(Event Player.Target_Order)) ? 0 : Global.AI_Turn_Speed), To World, Direction and Turn Rate);
		End;
	}
}

rule("AI Difficulty")
{
	event
	{
		Subroutine;
		AI_Difficulty;
	}

	actions
	{
		If(Global.AI_Difficulty == 1);
			Global.AI_Aim_Type = 0;
			Global.AI_Turn_Speed = 100;
			Global.Targeting_Type = 0;
			Global.Use_Complex_Abilitys = False;
			Global.Team_Based_Targeting = True;
			Global.Invisible_Targeting = 3;
			Global.Ignore_Abilitys = True;
		Else If(Global.AI_Difficulty == 2);
			Global.AI_Aim_Type = 2;
			Global.AI_Turn_Speed = 225;
			Global.Targeting_Type = 1;
			Global.Use_Complex_Abilitys = False;
			Global.Team_Based_Targeting = True;
			Global.Invisible_Targeting = 1;
			Global.Ignore_Abilitys = True;
		Else If(Global.AI_Difficulty == 2);
			Global.AI_Aim_Type = 3;
			Global.AI_Turn_Speed = 320;
			Global.Targeting_Type = 3;
			Global.Use_Complex_Abilitys = True;
			Global.Team_Based_Targeting = True;
			Global.Invisible_Targeting = 0;
			Global.Ignore_Abilitys = False;
		End;
	}
}

rule("Remove Bot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Global.Bots_T1 > Global.Number_Of_Bots_T1 || Global.Bots_T2 > Global.Number_Of_Bots_T2) == True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(Random Real(1, 3), Abort When False);
		Skip If(Team Of(Event Player) == Team 2, 3);
		Skip If(Global.Bots_T1 <= Global.Number_Of_Bots_T1, 2);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
		Global.Bots_T1 -= 1;
		Skip If(Team Of(Event Player) == Team 1, 3);
		Skip If(Global.Bots_T2 <= Global.Number_Of_Bots_T2, 2);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
		Global.Bots_T2 -= 1;
		Loop If Condition Is True;
	}
}

disabled rule("--------------------------------------------------------RTS---------------------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Attacker Commander Left, Default To Auto")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Entity Exists(Global.T2_Commander) != True;
		Global.T2_Commander != Null;
	}

	actions
	{
		All Players(Team 2).Mode = Custom String("Auto");
	}
}

rule("Defender Commander Left, Default To Auto")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Entity Exists(Global.T1_Commander) != True;
		Global.T1_Commander != Null;
	}

	actions
	{
		All Players(Team 1).Mode = Custom String("Auto");
	}
}

rule("RTS Global Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Icon(Global.T1_Commander, Global.T1_Commander.Path_Position_Command, Flag, Visible To and Position, Color(Green), True);
		Create Icon(Global.T2_Commander, Global.T2_Commander.Path_Position_Command, Flag, Visible To and Position, Color(Green), True);
	}
}

rule("Setup Commander")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Command Mode {0}\nCycle Command Mode {1}", Event Player.Command_Mode,
			Input Binding String(Button(Ultimate))), Null, Null, Right, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Command_Mode == Custom String("Global")
			&& Event Player.Sub_Command_Mode == Custom String("Order")), Null, Custom String(
			"Mode : {1}\nSet Grouping Location {0}\nTarget : {2}\n", Input Binding String(Button(Primary Fire)), Event Player.Mode,
			Custom String("{0}\nRemove Target {1}", Hero Icon String(Hero Of(Event Player.Target)), Input Binding String(Button(
			Secondary Fire)))), Custom String("Go To Loot At Position {0}\nFollow Teamate {1} {2}", Input Binding String(Button(Reload)),
			Hero Icon String(Hero Of(Event Player.Closest_Facing_Team)), Custom String("{0}\nAttack {1} {2}", Input Binding String(Button(
			Ability 1)), Hero Icon String(Hero Of(Event Player.Closest_Facing_Enemy)), Custom String("{0}\nChange Mode {1}",
			Input Binding String(Button(Ability 2)), Input Binding String(Button(Interact))))), Left, 0, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Sub_Command_Mode == Custom String("Mode")), Null,
			Event Player.Command_Mode == Custom String("Global") ? Custom String("Mode : {0}\nGrouping Position {1}\n", Event Player.Mode,
			Input Binding String(Button(Reload))) : (Event Player.Command_Mode == Custom String("Single") ? Custom String("Mode : {0}",
			Event Player.Selected_AI.Mode) : Custom String("")), Custom String("Auto {1}\n{2}", Null, Input Binding String(Button(
			Interact)), Custom String("Objective {0}\nCombat {1}\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(
			Button(Secondary Fire)), Custom String("Idle {0}\nReset {1}\n{2}", Input Binding String(Button(Melee)), Input Binding String(
			Button(Ability 2)), Custom String("Group {0}", Input Binding String(Button(Ability 1)))))), Left, 0, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Command_Mode == Custom String("Single")), Null, Custom String(
			"Selected AI Mode : {0}\nSelect {1} {2}", Event Player.Selected_AI.Mode, Hero Icon String(Hero Of(
			Event Player.Closest_Facing_Team)), Custom String("{2}\nDeselect : {1} {0}\n", Input Binding String(Button(Secondary Fire)),
			Hero Icon String(Hero Of(Event Player.Selected_AI)), Input Binding String(Button(Primary Fire)))), Custom String(
			"Go To Loot At Position {0}\nFollow Teamate {1} {2}", Input Binding String(Button(Reload)), Hero Icon String(Hero Of(
			Event Player.Closest_Facing_Team)), Custom String("{0}\nAttack {1} {2}", Input Binding String(Button(Ability 1)),
			Hero Icon String(Hero Of(Event Player.Closest_Facing_Enemy)), Custom String("{0}\nChange Mode {1}", Input Binding String(
			Button(Ability 2)), Input Binding String(Button(Interact))))), Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Command_Mode == Custom String("Multi Select")
			&& Event Player.Sub_Command_Mode == Custom String("Order")), Null, Custom String("Select {1} {2}", Null, Hero Icon String(
			Hero Of(Event Player.Closest_Facing_Team)), Custom String("{2}\nDeselect : {1} {0}\n", Input Binding String(Button(
			Secondary Fire)), Hero Icon String(Hero Of(Event Player.Closest_Facing_Team)), Input Binding String(Button(Primary Fire)))),
			Custom String("Go To Loot At Position {0}\nFollow Teamate {1} {2}", Input Binding String(Button(Reload)), Hero Icon String(
			Hero Of(Event Player.Closest_Facing_Team)), Custom String("{0}\nAttack {1} {2}", Input Binding String(Button(Ability 1)),
			Hero Icon String(Hero Of(Event Player.Closest_Facing_Enemy)), Custom String("{0}\nChange Mode {1}", Input Binding String(
			Button(Ability 2)), Input Binding String(Button(Interact))))), Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Command_Mode == Custom String("Comp")), Null, Custom String(
			"Hero Types {0}\nCycle Hero Types {1}\n", Event Player.Sub_Command_Mode, Input Binding String(Button(Interact))),
			Custom String("Next Hero {0}\nPrevious Hero {1}\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(Button(
			Secondary Fire)), Custom String("Request Hero : {2} {0}\nRequest Target {1}", Input Binding String(Button(Reload)),
			Hero Icon String(Hero Of(Event Player.Closest_Facing_Team)), Hero Icon String(Event Player.Request_Hero))), Left, 0, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Command_Mode == Custom String("Role Lock")), Null, Custom String(
			"Role Type {0}\nCycle Role Type {1}\nCycle Role {2}", Event Player.Sub_Command_Mode, Input Binding String(Button(
			Secondary Fire)), Input Binding String(Button(Primary Fire))), Custom String("Role {0}\n\nChange {1} {2}", Event Player.Role,
			Hero Icon String(Hero Of(Event Player.Closest_Facing_Team)), Custom String("From {0}\nTo {1} : {2}",
			Event Player.Closest_Facing_Team.Role, Event Player.Role, Input Binding String(Button(Reload)))), Left, 0, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Command_Mode == Custom String("Multi Select") && Count Of(
			Event Player.Selected_AI) > 0), Null, Custom String("\n\nSelected AI"), Custom String("1. {0} {1}", Hero Icon String(Hero Of(
			Event Player.Selected_AI[0])), Hero Of(Event Player.Selected_AI[0])), Left, 0.500, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Command_Mode == Custom String("Multi Select") && Count Of(
			Event Player.Selected_AI) > 1), Null, Null, Custom String("2. {0} {1}", Hero Icon String(Hero Of(Event Player.Selected_AI[1])),
			Hero Of(Event Player.Selected_AI[1])), Left, 1, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Command_Mode == Custom String("Multi Select") && Count Of(
			Event Player.Selected_AI) > 2), Null, Null, Custom String("3. {0} {1}", Hero Icon String(Hero Of(Event Player.Selected_AI[2])),
			Hero Of(Event Player.Selected_AI[2])), Left, 2, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Command_Mode == Custom String("Multi Select") && Count Of(
			Event Player.Selected_AI) > 3), Null, Null, Custom String("4. {0} {1}", Hero Icon String(Hero Of(Event Player.Selected_AI[3])),
			Hero Of(Event Player.Selected_AI[3])), Left, 3, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Command_Mode == Custom String("Multi Select") && Count Of(
			Event Player.Selected_AI) > 4), Null, Null, Custom String("5. {0} {1}", Hero Icon String(Hero Of(Event Player.Selected_AI[4])),
			Hero Of(Event Player.Selected_AI[4])), Left, 4, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Command_Mode == Custom String("Multi Select") && Count Of(
			Event Player.Selected_AI) > 5), Null, Null, Custom String("6. {0} {1}", Hero Icon String(Hero Of(Event Player.Selected_AI[5])),
			Hero Of(Event Player.Selected_AI[5])), Left, 5, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Wait Until(Has Spawned(Event Player), 99999);
		Event Player.Camera_Position = Evaluate Once(World Vector Of(Vector(0, 2, 0), Event Player, Rotation And Translation));
		Start Forcing Player Position(Event Player, First Of(Spawn Points(Team Of(Event Player))), False);
		Start Forcing Player To Be Hero(Event Player, Hero(Soldier: 76));
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Melee Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
		Chase Player Variable At Rate(Event Player, Camera_Position, Ray Cast Hit Position(Event Player.Camera_Position,
			Event Player.Camera_Position + Vector(0, Is Button Held(Event Player, Button(Jump)) ? 1 : (Is Button Held(Event Player, Button(
			Crouch)) ? 0 - 1 : 0), 0) + World Vector Of(Throttle Of(Event Player), Event Player, Rotation) * Min(Magnitude Of(Throttle Of(
			Event Player)), 1), Null, Event Player, False) - (World Vector Of(Throttle Of(Event Player), Event Player, Rotation) * Min(
			Magnitude Of(Throttle Of(Event Player)), 0.100) + Vector(0, Is Button Held(Event Player, Button(Jump)) ? 0.100 : (
			Is Button Held(Event Player, Button(Crouch)) ? 0 - 0.100 : 0), 0)), 15, Destination and Rate);
		Start Camera(Event Player, Update Every Frame(Event Player.Camera_Position), Update Every Frame(
			Event Player.Camera_Position - Facing Direction Of(Event Player) * (0 - 1)), 0);
		Set Invisible(Event Player, All);
		If(Is Team On Offense(Team Of(Event Player)));
			Global.T2_Commander = Event Player;
		Else;
			Global.T1_Commander = Event Player;
		End;
		Disable Hero HUD(Event Player);
		Event Player.Path_Position_Command = Position Of(Event Player);
		Event Player.Mode = Custom String("Auto");
		Event Player.Command_Mode = Custom String("Global");
		Event Player.Sub_Command_Mode = Custom String("Order");
		Wait Until(Is Team On Defense(Team Of(Event Player))
			? Global.Bots_T1 == Global.Number_Of_Bots_T1 : Global.Bots_T2 == Global.Number_Of_Bots_T2, 99999);
		Start Forcing Player Outlines(All Players(Team Of(Event Player)), Event Player, True, Color(Green), Always);
	}
}

rule("Update Closest Facing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
	}

	actions
	{
		Skip If(Array Contains(Event Player.Selected_AI, Event Player.Closest_Facing_Team), 1);
		Stop Forcing Player Outlines(Event Player.Closest_Facing_Team, Event Player);
		Skip If(Is True For Any(Array(Custom String("Comp"), Custom String("Role Lock")),
			Event Player.Command_Mode == Current Array Element), 1);
		Stop Forcing Player Outlines(Event Player.Closest_Facing_Enemy, Event Player);
		Event Player.Closest_Facing_Team = First Of(Sorted Array(Filtered Array(All Living Players(Team Of(Event Player)),
			Event Player.Command_Mode == Custom String("Multi Select") || !Array Contains(Event Player.Selected_AI,
			Current Array Element)), Distance Between(Ray Cast Hit Position(Event Player.Camera_Position,
			Event Player.Camera_Position + Facing Direction Of(Event Player) * 99, All Players(Team Of(Event Player)), Event Player,
			False), Current Array Element)));
		Skip If(Is True For Any(Array(Custom String("Comp"), Custom String("Role Lock")),
			Event Player.Command_Mode == Current Array Element), 2);
		Event Player.Closest_Facing_Enemy = First Of(Sorted Array(Remove From Array(All Living Players(Opposite Team Of(Team Of(
			Event Player))), Is Team On Defense(Team Of(Event Player)) ? Global.T2_Commander : Global.T1_Commander), Distance Between(
			Ray Cast Hit Position(Event Player.Camera_Position, Event Player.Camera_Position + Facing Direction Of(Event Player) * 99,
			All Players(Team Of(Event Player)), Event Player, False), Current Array Element)));
		Start Forcing Player Outlines(Event Player.Closest_Facing_Enemy, Event Player, True, Color(Purple), Default);
		Skip If(Array Contains(Event Player.Selected_AI, Event Player.Closest_Facing_Team), 1);
		Start Forcing Player Outlines(Event Player.Closest_Facing_Team, Event Player, True, Color(Yellow), Always);
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Cycle Command Mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		If(Event Player.Command_Mode == Custom String("Global"));
			Stop Forcing Player Outlines(All Players(Team Of(Event Player)), Event Player);
			Event Player.Selected_AI = Null;
			Event Player.Command_Mode = Custom String("Single");
			Event Player.Sub_Command_Mode = Custom String("Order");
		Else If(Event Player.Command_Mode == Custom String("Comp"));
			Event Player.Command_Mode = Custom String("Role Lock");
			Event Player.Sub_Command_Mode = Custom String("Normal");
			Event Player.Role = Custom String("Any");
			Stop Forcing Player Outlines(Event Player.Closest_Facing_Enemy, Event Player);
		Else If(Event Player.Command_Mode == Custom String("Role Lock"));
			Stop Forcing Player Outlines(Event Player.Selected_AI, Event Player);
			Start Forcing Player Outlines(All Players(Team Of(Event Player)), Event Player, True, Color(Green), Always);
			Event Player.Command_Mode = Custom String("Global");
			Event Player.Sub_Command_Mode = Custom String("Order");
			Stop Forcing Player Outlines(Event Player.Closest_Facing_Enemy, Event Player);
		Else If(Event Player.Command_Mode == Custom String("Multi Select"));
			Stop Forcing Player Outlines(All Players(Team Of(Event Player)), Event Player);
			Stop Forcing Player Outlines(Event Player.Selected_AI, Event Player);
			Event Player.Command_Mode = Custom String("Comp");
			Event Player.Sub_Command_Mode = Custom String("All Heros");
			Event Player.Hero_Options = Filtered Array(All Heroes, Array Contains(Global.Vaild_Heros, Current Array Element));
			Event Player.Hero_Index = 0;
			Event Player.Request_Hero = First Of(Event Player.Hero_Options);
			Stop Forcing Player Outlines(Event Player.Closest_Facing_Enemy, Event Player);
		Else If(Event Player.Command_Mode == Custom String("Single"));
			Stop Forcing Player Outlines(All Players(Team Of(Event Player)), Event Player);
			Event Player.Selected_AI = Empty Array;
			Event Player.Command_Mode = Custom String("Multi Select");
			Event Player.Sub_Command_Mode = Custom String("Order");
		End;
	}
}

rule("Global - Cycle Sub-Command")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Interact)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Global");
	}

	actions
	{
		Wait Until(!Is Button Held(Event Player, Button(Interact)), 99999);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		If(Event Player.Sub_Command_Mode == Custom String("Mode"));
			Event Player.Sub_Command_Mode = Custom String("Order");
		Else If(Event Player.Sub_Command_Mode == Custom String("Order"));
			Event Player.Sub_Command_Mode = Custom String("Mode");
		End;
	}
}

rule("Global - Go To")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Reload)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Global");
		Event Player.Sub_Command_Mode == Custom String("Order");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Event Player.Ray_Cast_Facing = Ray Cast Hit Position(Event Player.Camera_Position,
			Event Player.Camera_Position + Facing Direction Of(Event Player) * 99, Null, Event Player, False) - Facing Direction Of(
			Event Player) * 1;
		Event Player.Ray_Cast_Facing = Ray Cast Hit Position(Event Player.Ray_Cast_Facing, Event Player.Ray_Cast_Facing - Vector(0, 999,
			0), Null, Event Player, False);
		Remove From Array(All Players(Team Of(Event Player)), Event Player).Path_Position_Command = Ray Cast Hit Position(
			Event Player.Ray_Cast_Facing, Event Player.Ray_Cast_Facing + Vector(0, 1.550, 0), Null, Event Player, False);
		Play Effect(All Players(All Teams), Ring Explosion, Color(White), Ray Cast Hit Position(Event Player.Ray_Cast_Facing,
			Event Player.Ray_Cast_Facing + Vector(0, 1.550, 0), Null, Event Player, False), 3);
		All Players(Team Of(Event Player)).Mode = Custom String("Path");
	}
}

rule("Global - Follow")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Global");
		Event Player.Sub_Command_Mode == Custom String("Order");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Filtered Array(Remove From Array(All Players(Team Of(Event Player)), Event Player),
			Current Array Element != Event Player.Closest_Facing_Team).Follow_Teamate = Event Player.Closest_Facing_Team;
		Small Message(Event Player, Custom String("Follow : {1}", Null, Hero Icon String(Hero Of(Event Player.Closest_Facing_Team))));
		Filtered Array(Remove From Array(All Players(Team Of(Event Player)), Event Player),
			Current Array Element != Event Player.Closest_Facing_Team).Mode = Custom String("Follow");
	}
}

rule("Global - Attack")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Global");
		Event Player.Sub_Command_Mode == Custom String("Order");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		All Players(Team Of(Event Player)).Target = Event Player.Closest_Facing_Enemy;
		Small Message(Event Player, Custom String("Target : {1}", Null, Hero Icon String(Hero Of(Event Player.Closest_Facing_Enemy))));
	}
}

rule("Global - Change Mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is True For Any(Array(Is Button Held(Event Player, Button(Primary Fire)), Is Button Held(Event Player, Button(Secondary Fire)),
			Is Button Held(Event Player, Button(Ability 1)), Is Button Held(Event Player, Button(Ability 2)), Is Button Held(Event Player,
			Button(Interact)), Is Button Held(Event Player, Button(Melee))), Current Array Element) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Global");
		Event Player.Sub_Command_Mode == Custom String("Mode");
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.Mode = Custom String("Objective");
			Small Message(Event Player, Custom String("Set Mode : Objective"));
		Else If(Is Button Held(Event Player, Button(Ability 1)));
			Event Player.Mode = Custom String("Group");
			Small Message(Event Player, Custom String("Set Mode : Group"));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.Mode = Custom String("Combat");
			Small Message(Event Player, Custom String("Set Mode : Combat"));
		Else If(Is Button Held(Event Player, Button(Melee)));
			Event Player.Mode = Custom String("Idle");
			Small Message(Event Player, Custom String("Set Mode : Idle"));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Event Player.Mode = Custom String("Reset");
			Small Message(Event Player, Custom String("Set Mode : Reset"));
		Else If(Is Button Held(Event Player, Button(Interact)));
			Event Player.Mode = Custom String("Auto");
			Small Message(Event Player, Custom String("Set Mode : Auto"));
		End;
		All Players(Team Of(Event Player)).Mode = Event Player.Mode;
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 20);
		Wait Until(Is True For All(Array(Button(Primary Fire), Button(Secondary Fire), Button(Ability 1), Button(Ability 2), Button(Melee),
			Button(Interact)), !Is Button Held(Event Player, Current Array Element)), 99999);
		Event Player.Sub_Command_Mode = Custom String("Order");
	}
}

rule("Global - Change Group Position")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Event Player.Sub_Command_Mode == Custom String("Mode") ? Button(Reload) : Button(Primary Fire))
			== True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Global");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Event Player.Ray_Cast_Facing = Ray Cast Hit Position(Event Player.Camera_Position,
			Event Player.Camera_Position + Facing Direction Of(Event Player) * 99, Null, Event Player, False) - Facing Direction Of(
			Event Player) * 1;
		Event Player.Ray_Cast_Facing = Ray Cast Hit Position(Event Player.Ray_Cast_Facing, Event Player.Ray_Cast_Facing - Vector(0, 999,
			0), Null, Event Player, False);
		All Players(Team Of(Event Player)).Path_Position_Command = Ray Cast Hit Position(Event Player.Ray_Cast_Facing,
			Event Player.Ray_Cast_Facing + Vector(0, 1.550, 0), Null, Event Player, False);
		Small Message(Event Player, Custom String("Group Position : {1}", Null, Ray Cast Hit Position(Event Player.Ray_Cast_Facing,
			Event Player.Ray_Cast_Facing + Vector(0, 1.550, 0), Null, Event Player, False)));
	}
}

rule("Global - Remove Target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Global");
		Event Player.Sub_Command_Mode == Custom String("Order");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		All Players(Team Of(Event Player)).Target = Null;
		Small Message(Event Player, Custom String("Removed Targets"));
	}
}

rule("Single / Multi Select - Cycle Sub-Command")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Interact)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		(Event Player.Command_Mode == Custom String("Single") || Event Player.Command_Mode == Custom String("Multi Select")) == True;
	}

	actions
	{
		Wait Until(!Is Button Held(Event Player, Button(Interact)), 99999);
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		If(Event Player.Sub_Command_Mode == Custom String("Mode"));
			Event Player.Sub_Command_Mode = Custom String("Order");
		Else If(Event Player.Sub_Command_Mode == Custom String("Order"));
			Event Player.Sub_Command_Mode = Custom String("Mode");
		End;
	}
}

rule("Single - Select AI")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Single");
		Event Player.Sub_Command_Mode == Custom String("Order");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Stop Forcing Player Outlines(Event Player.Selected_AI, Event Player);
		Event Player.Selected_AI = Event Player.Closest_Facing_Team;
		Small Message(Event Player, Custom String("Select : {0}", Hero Icon String(Hero Of(Event Player.Selected_AI))));
		Start Forcing Player Outlines(Event Player.Selected_AI, Event Player, True, Color(Green), Always);
	}
}

rule("Single - De-Select AI")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Single");
		Event Player.Sub_Command_Mode == Custom String("Order");
	}

	actions
	{
		Small Message(Event Player, Custom String("Deselect : {0}", Hero Icon String(Hero Of(Event Player.Selected_AI))));
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Stop Forcing Player Outlines(Event Player.Selected_AI, Event Player);
		Event Player.Selected_AI = Null;
	}
}

rule("Single / Multi Select - Go To")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Reload)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		(Event Player.Command_Mode == Custom String("Single") || Event Player.Command_Mode == Custom String("Multi Select")) == True;
		Event Player.Sub_Command_Mode == Custom String("Order");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Event Player.Ray_Cast_Facing = Ray Cast Hit Position(Event Player.Camera_Position,
			Event Player.Camera_Position + Facing Direction Of(Event Player) * 99, Null, Event Player, False) - Facing Direction Of(
			Event Player) * 1;
		Event Player.Ray_Cast_Facing = Ray Cast Hit Position(Event Player.Ray_Cast_Facing, Event Player.Ray_Cast_Facing - Vector(0, 999,
			0), Null, Event Player, False);
		Event Player.Selected_AI.Path_Position_Command = Ray Cast Hit Position(Event Player.Ray_Cast_Facing,
			Event Player.Ray_Cast_Facing + Vector(0, 1.550, 0), Null, Event Player, False);
		Play Effect(All Players(All Teams), Ring Explosion, Color(White), Ray Cast Hit Position(Event Player.Ray_Cast_Facing,
			Event Player.Ray_Cast_Facing + Vector(0, 1.550, 0), Null, Event Player, False), 3);
		Event Player.Selected_AI.Mode = Custom String("Path");
	}
}

rule("Single / Multi Select - Follow")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		(Event Player.Command_Mode == Custom String("Single") || Event Player.Command_Mode == Custom String("Multi Select")) == True;
		Event Player.Sub_Command_Mode == Custom String("Order");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Filtered Array(Event Player.Selected_AI, Current Array Element != Event Player.Closest_Facing_Team)
			.Follow_Teamate = Event Player.Closest_Facing_Team;
		Small Message(Event Player, Custom String("Follow : {1}", Null, Hero Icon String(Hero Of(Event Player.Closest_Facing_Team))));
		Filtered Array(Event Player.Selected_AI, Current Array Element != Event Player.Closest_Facing_Team).Mode = Custom String("Follow");
	}
}

rule("Single / Multi Select - Attack")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		(Event Player.Command_Mode == Custom String("Single") || Event Player.Command_Mode == Custom String("Multi Select")) == True;
		Event Player.Sub_Command_Mode == Custom String("Order");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Event Player.Selected_AI.Target = Event Player.Closest_Facing_Enemy;
		Small Message(Event Player, Custom String("Target : {1}", Null, Hero Icon String(Hero Of(Event Player.Closest_Facing_Enemy))));
	}
}

rule("Single - Change Mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is True For Any(Array(Is Button Held(Event Player, Button(Primary Fire)), Is Button Held(Event Player, Button(Secondary Fire)),
			Is Button Held(Event Player, Button(Ability 1)), Is Button Held(Event Player, Button(Ability 2)), Is Button Held(Event Player,
			Button(Interact)), Is Button Held(Event Player, Button(Melee))), Current Array Element) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Single");
		Event Player.Sub_Command_Mode == Custom String("Mode");
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.Selected_AI.Mode = Custom String("Objective");
			Small Message(Event Player, Custom String("{0} Set Mode : Objective", Hero Icon String(Hero Of(Event Player.Selected_AI))));
		Else If(Is Button Held(Event Player, Button(Ability 1)));
			Event Player.Selected_AI.Mode = Custom String("Group");
			Small Message(Event Player, Custom String("{0} Set Mode : Group", Hero Icon String(Hero Of(Event Player.Selected_AI))));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.Selected_AI.Mode = Custom String("Combat");
			Small Message(Event Player, Custom String("{0} Set Mode : Combat", Hero Icon String(Hero Of(Event Player.Selected_AI))));
		Else If(Is Button Held(Event Player, Button(Melee)));
			Event Player.Selected_AI.Mode = Custom String("Idle");
			Small Message(Event Player, Custom String("{0} Set Mode : Idle", Hero Icon String(Hero Of(Event Player.Selected_AI))));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Event Player.Selected_AI.Mode = Custom String("Reset");
			Small Message(Event Player, Custom String("{0} Set Mode : Reset", Hero Icon String(Hero Of(Event Player.Selected_AI))));
		Else If(Is Button Held(Event Player, Button(Interact)));
			Event Player.Selected_AI.Mode = Custom String("Auto");
			Small Message(Event Player, Custom String("{0} Set Mode : Auto", Hero Icon String(Hero Of(Event Player.Selected_AI))));
		End;
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 20);
		Wait Until(Is True For All(Array(Button(Primary Fire), Button(Secondary Fire), Button(Ability 1), Button(Ability 2), Button(Melee),
			Button(Interact)), !Is Button Held(Event Player, Current Array Element)), 99999);
		Event Player.Sub_Command_Mode = Custom String("Order");
	}
}

rule("Comp - Cycle Sub-Command")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Interact)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Comp");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		If(Event Player.Sub_Command_Mode == Custom String("All Heros"));
			Event Player.Sub_Command_Mode = Custom String("Tank Heros");
			Event Player.Hero_Options = Filtered Array(All Tank Heroes, Array Contains(Global.Vaild_Heros, Current Array Element));
			Event Player.Hero_Index = 0;
			Event Player.Request_Hero = First Of(Event Player.Hero_Options);
		Else If(Event Player.Sub_Command_Mode == Custom String("Tank Heros"));
			Event Player.Sub_Command_Mode = Custom String("DPS Heros");
			Event Player.Hero_Options = Filtered Array(All Damage Heroes, Array Contains(Global.Vaild_Heros, Current Array Element));
			Event Player.Hero_Index = 0;
			Event Player.Request_Hero = First Of(Event Player.Hero_Options);
		Else If(Event Player.Sub_Command_Mode == Custom String("DPS Heros"));
			Event Player.Sub_Command_Mode = Custom String("Support Heros");
			Event Player.Hero_Options = Filtered Array(All Support Heroes, Array Contains(Global.Vaild_Heros, Current Array Element));
			Event Player.Hero_Index = 0;
			Event Player.Request_Hero = First Of(Event Player.Hero_Options);
		Else If(Event Player.Sub_Command_Mode == Custom String("Support Heros"));
			Event Player.Sub_Command_Mode = Custom String("All Heros");
			Event Player.Hero_Options = Filtered Array(All Heroes, Array Contains(Global.Vaild_Heros, Current Array Element));
			Event Player.Hero_Index = 0;
			Event Player.Request_Hero = First Of(Event Player.Hero_Options);
		End;
	}
}

rule("Comp - Next Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Comp");
	}

	actions
	{
		If(Event Player.Hero_Index >= Count Of(Event Player.Hero_Options) - 1);
			Event Player.Hero_Index = 0;
		Else;
			Event Player.Hero_Index += 1;
		End;
		Event Player.Request_Hero = Event Player.Hero_Options[Event Player.Hero_Index];
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 20);
	}
}

rule("Comp - Previous Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Comp");
	}

	actions
	{
		If(Event Player.Hero_Index <= 0);
			Event Player.Hero_Index = Count Of(Event Player.Hero_Options) - 1;
		Else;
			Event Player.Hero_Index -= 1;
		End;
		Event Player.Request_Hero = Event Player.Hero_Options[Event Player.Hero_Index];
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 20);
	}
}

rule("Comp - Request Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Reload)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Comp");
	}

	actions
	{
		Event Player.Closest_Facing_Team.Requested_Hero = Event Player.Request_Hero;
		Small Message(Event Player, Custom String("Requested {0} Swap To {1}", Hero Icon String(Hero Of(Event Player.Closest_Facing_Team)),
			Hero Icon String(Event Player.Request_Hero)));
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 20);
	}
}

rule("Update AI Role Lock")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.Role != Event Player.Role_Lock;
		Event Player.Role != Null;
	}

	actions
	{
		If(Event Player.Role == Custom String("Any"));
			Event Player.Hero_Pool = All Heroes;
		Else If(Event Player.Role == Custom String("Tank"));
			Event Player.Hero_Pool = All Tank Heroes;
		Else If(Event Player.Role == Custom String("DPS"));
			Event Player.Hero_Pool = All Damage Heroes;
		Else If(Event Player.Role == Custom String("Support"));
			Event Player.Hero_Pool = All Support Heroes;
		Else If(Event Player.Role == Custom String("Any Main-Role"));
			Event Player.Hero_Pool = Array(Hero(Reinhardt), Hero(Winston), Hero(Orisa), Hero(Wrecking Ball), Hero(Mercy), Hero(Lúcio), Hero(
				Brigitte), Hero(Kiriko), Hero(Lifeweaver), Hero(Junkrat), Hero(Widowmaker), Hero(Hanzo), Hero(Cassidy), Hero(Ashe), Hero(
				Soldier: 76), Hero(Bastion), Hero(Reaper), Hero(Symmetra));
		Else If(Event Player.Role == Custom String("Any Off-Role"));
			Event Player.Hero_Pool = Remove From Array(All Heroes, Array(Hero(Reinhardt), Hero(Winston), Hero(Orisa), Hero(Wrecking Ball),
				Hero(Mercy), Hero(Lúcio), Hero(Brigitte), Hero(Kiriko), Hero(Lifeweaver), Hero(Junkrat), Hero(Widowmaker), Hero(Hanzo), Hero(
				Cassidy), Hero(Ashe), Hero(Soldier: 76), Hero(Bastion), Hero(Reaper), Hero(Symmetra)));
		Else If(Event Player.Role == Custom String("Main Tank"));
			Event Player.Hero_Pool = Array(Hero(Reinhardt), Hero(Winston), Hero(Orisa), Hero(Wrecking Ball));
		Else If(Event Player.Role == Custom String("Off Tank"));
			Event Player.Hero_Pool = Remove From Array(All Tank Heroes, Array(Hero(Reinhardt), Hero(Winston), Hero(Orisa), Hero(
				Wrecking Ball)));
		Else If(Event Player.Role == Custom String("Main DPS"));
			Event Player.Hero_Pool = Array(Hero(Junkrat), Hero(Widowmaker), Hero(Hanzo), Hero(Cassidy), Hero(Ashe), Hero(Soldier: 76), Hero(
				Bastion), Hero(Reaper), Hero(Symmetra));
		Else If(Event Player.Role == Custom String("Off DPS"));
			Event Player.Hero_Pool = Remove From Array(All Damage Heroes, Array(Hero(Junkrat), Hero(Widowmaker), Hero(Hanzo), Hero(Cassidy),
				Hero(Ashe), Hero(Soldier: 76), Hero(Bastion), Hero(Reaper), Hero(Symmetra)));
		Else If(Event Player.Role == Custom String("Main Support"));
			Event Player.Hero_Pool = Array(Hero(Mercy), Hero(Lúcio), Hero(Brigitte), Hero(Kiriko), Hero(Lifeweaver));
		Else If(Event Player.Role == Custom String("Off Support"));
			Event Player.Hero_Pool = Remove From Array(All Support Heroes, Array(Hero(Mercy), Hero(Lúcio), Hero(Brigitte), Hero(Kiriko), Hero(
				Lifeweaver)));
		End;
		Event Player.Role_Lock = Event Player.Role;
	}
}

rule("Swap Hero If Incorrect Role")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Spawn Room(Event Player) == True;
		Array Contains(Event Player.Hero_Pool, Event Player.Hero) != True;
	}

	actions
	{
		Event Player.Hero = Random Value In Array(Filtered Array(Is Team On Offense(Team Of(Event Player))
			? Global.T2_Available_Heros : Global.T1_Available_Heros, Array Contains(Event Player.Hero_Pool, Current Array Element)));
		Start Forcing Player To Be Hero(Event Player, Event Player.Hero);
		If(Is Team On Offense(Team Of(Event Player)) == True);
			Modify Global Variable(T2_Available_Heros, Remove From Array By Value, Hero Of(Event Player));
		Else;
			Modify Global Variable(T1_Available_Heros, Remove From Array By Value, Hero Of(Event Player));
		End;
		Call Subroutine(Hero_Variables);
		Event Player.Ultimates_Used = Player Stat(Event Player, Ultimates Used);
		If((Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander).Command_Mode == Custom String(
			"Global"));
			Start Forcing Player Outlines(Event Player, Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander,
				True, Color(Green), Always);
		Else If((Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander).Selected_AI == Event Player && (
				Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander).Command_Mode == Custom String(
				"Single"));
			Start Forcing Player Outlines(Event Player, Is Team On Defense(Team Of(Event Player)) ? Global.T1_Commander : Global.T2_Commander,
				True, Color(Green), Always);
		End;
	}
}

rule("Role Lock - Cycle Sub-Command")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Role Lock");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		If(Event Player.Sub_Command_Mode == Custom String("Normal"));
			Event Player.Sub_Command_Mode = Custom String("Off Role");
			Event Player.Role = Custom String("Any Off-Role");
		Else If(Event Player.Sub_Command_Mode == Custom String("Off Role"));
			Event Player.Sub_Command_Mode = Custom String("Main Role");
			Event Player.Role = Custom String("Any Main-Role");
		Else If(Event Player.Sub_Command_Mode == Custom String("Main Role"));
			Event Player.Sub_Command_Mode = Custom String("Normal");
			Event Player.Role = Custom String("Any");
		End;
	}
}

rule("Role Lock - Cycle Role")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Role Lock");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		If(Event Player.Sub_Command_Mode == Custom String("Normal"));
			If(Event Player.Role == Custom String("Any"));
				Event Player.Role = Custom String("Tank");
			Else If(Event Player.Role == Custom String("Tank"));
				Event Player.Role = Custom String("DPS");
			Else If(Event Player.Role == Custom String("DPS"));
				Event Player.Role = Custom String("Support");
			Else If(Event Player.Role == Custom String("Support"));
				Event Player.Role = Custom String("Any");
			End;
		Else If(Event Player.Sub_Command_Mode == Custom String("Off Role"));
			If(Event Player.Role == Custom String("Any Off-Role"));
				Event Player.Role = Custom String("Off Tank");
			Else If(Event Player.Role == Custom String("Off Tank"));
				Event Player.Role = Custom String("Off DPS");
			Else If(Event Player.Role == Custom String("Off DPS"));
				Event Player.Role = Custom String("Off Support");
			Else If(Event Player.Role == Custom String("Off Support"));
				Event Player.Role = Custom String("Any Off-Role");
			End;
		Else If(Event Player.Sub_Command_Mode == Custom String("Main Role"));
			If(Event Player.Role == Custom String("Any Main-Role"));
				Event Player.Role = Custom String("Main Tank");
			Else If(Event Player.Role == Custom String("Main Tank"));
				Event Player.Role = Custom String("Main DPS");
			Else If(Event Player.Role == Custom String("Main DPS"));
				Event Player.Role = Custom String("Main Support");
			Else If(Event Player.Role == Custom String("Main Support"));
				Event Player.Role = Custom String("Any Main-Role");
			End;
		End;
	}
}

rule("Role Lock - Change Role Lock")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Reload)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Role Lock");
	}

	actions
	{
		Event Player.Closest_Facing_Team.Role = Event Player.Role;
		Small Message(Event Player, Custom String("Changed {2 }From {0} To {1}", Event Player.Closest_Facing_Team.Role, Event Player.Role,
			Hero Icon String(Hero Of(Event Player.Closest_Facing_Team))));
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 20);
	}
}

rule("Multi Select - Select AI")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Multi Select");
		Event Player.Sub_Command_Mode == Custom String("Order");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Stop Forcing Player Outlines(Event Player.Selected_AI, Event Player);
		Skip If(Array Contains(Event Player.Selected_AI, Event Player.Closest_Facing_Team), 1);
		Modify Player Variable(Event Player, Selected_AI, Append To Array, Event Player.Closest_Facing_Team);
		Small Message(Event Player, Custom String("Select : {0}", Hero Icon String(Hero Of(Event Player.Closest_Facing_Team))));
		Start Forcing Player Outlines(Event Player.Selected_AI, Event Player, True, Color(Green), Always);
	}
}

rule("Multi Select - De-Select AI")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Multi Select");
		Event Player.Sub_Command_Mode == Custom String("Order");
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Stop Forcing Player Outlines(Event Player.Selected_AI, Event Player);
		Small Message(Event Player, Custom String("Deselect : {0}", Hero Icon String(Hero Of(Event Player.Closest_Facing_Team))));
		Modify Player Variable(Event Player, Selected_AI, Remove From Array By Value, Event Player.Closest_Facing_Team);
		Start Forcing Player Outlines(Event Player.Selected_AI, Event Player, True, Color(Green), Always);
	}
}

rule("Multi Select - Change Mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is True For Any(Array(Is Button Held(Event Player, Button(Primary Fire)), Is Button Held(Event Player, Button(Secondary Fire)),
			Is Button Held(Event Player, Button(Ability 1)), Is Button Held(Event Player, Button(Ability 2)), Is Button Held(Event Player,
			Button(Interact)), Is Button Held(Event Player, Button(Melee))), Current Array Element) == True;
		(Event Player == Global.T1_Commander || Event Player == Global.T2_Commander) == True;
		Event Player.Command_Mode == Custom String("Multi Select");
		Event Player.Sub_Command_Mode == Custom String("Mode");
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.Selected_AI.Mode = Custom String("Objective");
			Small Message(Event Player, Custom String("Set Mode : Objective"));
		Else If(Is Button Held(Event Player, Button(Ability 1)));
			Event Player.Selected_AI.Mode = Custom String("Group");
			Small Message(Event Player, Custom String("Set Mode : Group"));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.Selected_AI.Mode = Custom String("Combat");
			Small Message(Event Player, Custom String("Set Mode : Combat"));
		Else If(Is Button Held(Event Player, Button(Melee)));
			Event Player.Selected_AI.Mode = Custom String("Idle");
			Small Message(Event Player, Custom String("Set Mode : Idle"));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Event Player.Selected_AI.Mode = Custom String("Reset");
			Small Message(Event Player, Custom String("Set Mode : Reset"));
		Else If(Is Button Held(Event Player, Button(Interact)));
			Event Player.Selected_AI.Mode = Custom String("Auto");
			Small Message(Event Player, Custom String("Set Mode : Auto"));
		End;
		Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 20);
		Wait Until(Is True For All(Array(Button(Primary Fire), Button(Secondary Fire), Button(Ability 1), Button(Ability 2), Button(Melee),
			Button(Interact)), !Is Button Held(Event Player, Current Array Element)), 99999);
		Event Player.Sub_Command_Mode = Custom String("Order");
	}
}
