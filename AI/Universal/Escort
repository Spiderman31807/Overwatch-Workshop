settings
{
	main
	{
		Description: "VX9S6 : Assault\nESWTD : Escort\n????? : Control\n????? : Hybrid\nNSFHN : Deathmatch\nXZG53K : Elimination\nYJ24J : Capture The Flag"
		Mode Name: "Escort Universal AI"
	}

	lobby
	{
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Return To Lobby: Never
	}

	modes
	{
		Escort
		{
			disabled maps
			{
				Circuit royal
				Rialto
				Shambali Monastery
				Watchpoint: Gibraltar
			}
		}

		General
		{
			Game Mode Start: Immediately
			Limit Roles: 1 Tank 2 Offense 2 Support
			Tank Role Passive Health Bonus: Always Enabled
		}
	}

	workshop
	{
		Assemble Time: 10
		Memory: Off
		Player 1: [2]
		Player 2: [2]
		Player 3: [3]
		Player 4: [3]
		Player 5: [1]
		Player 6: [1]
		Random Gamertags: Off
		Sound Based Detection: Off
		Targeting Type: [3]
		Turn Speed: 225
	}

	extensions
	{
		Spawn More Dummy Bots
	}
}

variables
{
	global:
		0: Path_Nodes
		1: Healthkits
		5: ObjectiveA_Nodes
		6: ObjectiveB_Nodes
		7: Hero_Prioritize_Order
		8: All_Heros
		9: Primary_Max
		11: Number_Of_Bots_T1
		12: Ability1_Max
		13: Mobility_Distance
		14: Primary_Min
		16: Ultimate_Duration
		17: Secondary_Max
		18: Secondary_Min
		19: Charge_Time
		20: Use_Ultimate_Max
		21: Ultimate_Health
		22: Gamertags
		23: Swap_After_Ult
		25: T1_Available_Heros
		26: T2_Available_Heros
		27: Passive
		28: Slot1_Role_Lock
		29: Slot2_Role_Lock
		30: Slot3_Role_Lock
		31: Slot4_Role_Lock
		32: Slot5_Role_Lock
		33: Slot6_Role_Lock
		34: Ultimate_Targets
		35: Ability1_Min
		36: Ability2_Max
		37: Ability2_Min
		38: Ultimate_Target_Team
		39: Primary_Arc
		40: Secondary_Arc
		41: Ultimate_Max
		42: Ultimate_Min
		43: Ability1_Arc
		44: Ability2_Arc
		45: Ultimate_Arc
		46: Jump_Start
		47: Jump_End
		48: Primary_Sound_Max
		49: Secondary_Sound_Max
		50: Ability1_Sound_Max
		51: Ability2_Sound_Max
		52: Ultimate_Sound_Max
		53: Walking_Sound_Max
		54: Crouch_Walk_Sound_Max
		55: Melee_Sound_Max
		56: Aim_Predict_Scale
		57: AI_Communicate
		58: AI_Gamertags
		59: AI_Aim_Type
		60: AI_Turn_Speed
		61: Vaild_Heros
		62: Targeting_Type
		63: Use_Complex_Abilitys
		64: Can_Hear
		65: Team_Based_Targeting
		66: Jump_Index
		68: Invisible_Targeting
		69: Ignore_Abilitys
		70: Chokepoint
		71: AI_Difficulty
		72: Number_Of_Bots_T2
		75: Staircase_Top
		76: Staircase_Bottom
		77: Staircase_Middle
		78: Healthkits_Small
		79: Healthkits_Large
		80: Healthkit_Index
		81: Healthkit_CD
		82: Healthkit_Used
		83: Used_Healthkit_Type

	player:
		0: Walk_To_Position
		1: Current_Node
		2: Primary_Max
		3: Aim_Predict
		4: Node_Options
		5: AI_Username
		6: Offensive
		7: Defensive
		8: Mobility
		9: Ultimate_Target_Team
		10: Request
		11: Healing
		12: Ability1_Max
		13: Mobility_Distance
		14: Hero
		15: Secondary_Fire
		16: Secondary_Offensive
		17: Secondary_Defensive
		18: Secondary_Healing
		19: Hold
		20: Confirm
		21: Toggle
		22: Current_Offensive
		23: Current_Defensive
		24: Current_Mobility
		25: Current_Healing
		26: Targets
		27: Target_Order
		28: Primary_Min
		29: Cooldown
		30: Charge
		31: Resource
		32: Aim_Predict_Scale
		33: Secondary_Max
		34: Secondary_Min
		35: Charging
		36: Charging_Time
		37: Use_Ultimate_Max
		38: Ultimate_Health
		39: Hero_Pool
		40: Ultimates_Used
		41: Ultimate_Targets
		42: Role_Lock
		43: Ability1_Min
		44: Ability2_Max
		45: Ability2_Min
		46: Heal_Friendlys
		47: Current_Heal_Friendlys
		48: Walk_Max
		49: Walk_Min
		50: Invisible_Cooldown
		51: Using_Stairs
		52: Passive
		53: Requested_Hero
		54: Aim_Arc
		55: Can_Change_Arc
		56: Ultimate_Max
		57: Ultimate_Min
		58: Ultimate_Duration
		59: Stairs_Index
		60: Use_If_Shield
		61: Alternative_Form
		62: Zen_Orb_Target
		63: Zen_Orb_Hero
		64: Current_Hero
		65: Seen_By_Memory
		66: In_Combat_Array
		67: Is_Visible_Array
		68: Last_Stair_Type
		69: Node_DePrioritze
		70: Vist_Count
		71: Known_Nodes
		72: Jump_From
		73: Stored_Ultimate_Charge
		127: Ignore_Lower_Nodes
}

subroutines
{
	0: Junkertown
	1: Dorado
	2: Route66
	3: Havava
	5: Hero_Values
	6: Hero_Variables
	8: Global_Setup
	9: Node_Setup
	10: Debugs
	11: Heros
	14: AI_Start_Facing
	15: Gamertags
	16: AI_Difficulty
}

rule("------------------------------------------- Made By Spiderman318 | YT Spiderman318 ---------------------------------------")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Call Subroutine(Global_Setup);
		Wait(3, Ignore Condition);
		Wait Until(Is Assembling Heroes, 99999);
		Set Match Time(Workshop Setting Integer(Custom String("Game"), Custom String("Assemble Time"), 5, 0, 30, 0) + 5);
		Global.AI_Aim_Type = Workshop Setting Combo(Custom String("AI"), Custom String("Aim Type (Use Basic To Avoid Crash)"), 0, Array(
			Custom String("Basic (Aim At Head With No Leading Or Arc)"), Custom String("Leading (Aim At Head With Leading But No Arc)"),
			Custom String("Arc (Aim At Head With Arc But No Leading"), Custom String("Advanced (Aim At Head With Leading And Arc)")), 0);
		Global.AI_Turn_Speed = Workshop Setting Integer(Custom String("AI"), Custom String("Turn Speed"), 320, 10, 500, 11);
		Global.Ignore_Abilitys = Workshop Setting Toggle(Custom String("AI"), Custom String(
			"Igore Abilitys (Continues To Fire Into Deflect, Defence Matrix, Etc)"), False, 6);
		Global.AI_Gamertags = Workshop Setting Toggle(Custom String("AI"), Custom String("Random Gamertags"), True, 8);
		Global.Invisible_Targeting = Workshop Setting Combo(Custom String("AI"), Custom String("Invisible Targeting"), 0, Array(
			Custom String("While Hacking Or While 3 Meters or Less Away"), Custom String("While Hacking"), Custom String(
			"While 3 Meters or Less Away"), Custom String("Never")), 0);
		Global.AI_Communicate = Workshop Setting Toggle(Custom String("AI"), Custom String(
			"Can Communicate (Hello, Need Help, Need Healing, Understand, Thanks)"), True, 7);
		Global.Targeting_Type = Workshop Setting Combo(Custom String("AI"), Custom String("Targeting Type"), 0, Array(Custom String(
			"Basic (LOS)"), Custom String("Hero Basic (LOS / ABS)"), Custom String("Improved (LOS / SBT)"), Custom String(
			"Hero Improved (LOS/ ABS / SBT)"), Custom String(
			"\nLOS - Line Of Sight\r\n\r\nABS - Ability Based Sight\r\n\r\rDoes'nt Include Sonic Arrow"), Custom String(
			"\nSBT - Sound Based Targeting\r\nOnly Works If SBT Enabled")), 1);
		Global.Targeting_Type = Min(Global.Targeting_Type, 3);
		Global.Can_Hear = Workshop Setting Toggle(Custom String("AI"), Custom String("Sound Based Detection"), True, 2);
		Global.Use_Complex_Abilitys = Workshop Setting Toggle(Custom String("AI"), Custom String(
			"Use More Complex Abilitys (Zen Orbs, Lucio Crossfade, Etc)"), True, 5);
		Global.Team_Based_Targeting = Workshop Setting Toggle(Custom String("AI"), Custom String(
			"Team Based Targeting (Healing, Protection, Etc)"), True, 4);
		Global.Number_Of_Bots_T1 = Workshop Setting Integer(Custom String("AI"), Custom String("Amount (Team 1)"), 5, 0, 24, 12);
		Global.Number_Of_Bots_T2 = Workshop Setting Integer(Custom String("AI"), Custom String("Amount (Team 2)"), 5, 0, 24, 12);
		Call Subroutine(Hero_Values);
		Skip If(Global.AI_Gamertags == False, 1);
		Call Subroutine(Gamertags);
		Call Subroutine(Node_Setup);
		Call Subroutine(Debugs);
		Global.AI_Difficulty = Workshop Setting Combo(Custom String("AI"), Custom String(
			"Difficulty (Overrides Settings Such As Aim Type, Ignore Abilitys, Etc)"), 0, Array(Custom String(
			"Custom Difficulty (Dont Override)"), Custom String("Easy"), Custom String("Normal"), Custom String("Hard")), -1);
		Skip If(Global.AI_Difficulty == 0, 1);
		Call Subroutine(AI_Difficulty);
	}
}

rule("Use Healthkit")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Event Was Health Pack == True;
		Is In Spawn Room(Event Player) != True;
		(Hero Of(Healer) == Hero(Sombra) || !Entity Exists(Healer)) == True;
	}

	actions
	{
		If(Count Of(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large)) == 0);
			Modify Global Variable(Healthkit_Used, Append To Array, First Of(Sorted Array(Global.Healthkits, Distance Between(Event Player,
				Current Array Element))));
			Modify Global Variable(Healthkits, Remove From Array By Value, First Of(Sorted Array(Global.Healthkits, Distance Between(
				Event Player, Current Array Element))));
			Modify Global Variable(Healthkit_CD, Append To Array, Event Healing > 75 ? 15 : 10);
			Modify Global Variable(Used_Healthkit_Type, Append To Array, 0);
		Else;
			If(Array Contains(Global.Healthkits_Small, First Of(Sorted Array(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large),
				Distance Between(Event Player, Current Array Element)))));
				Modify Global Variable(Healthkit_Used, Append To Array, First Of(Sorted Array(Global.Healthkits_Small, Distance Between(
					Event Player, Current Array Element))));
				Modify Global Variable(Healthkits_Small, Remove From Array By Value, First Of(Sorted Array(Global.Healthkits_Small,
					Distance Between(Event Player, Current Array Element))));
				Modify Global Variable(Healthkit_CD, Append To Array, 10);
				Modify Global Variable(Used_Healthkit_Type, Append To Array, 1);
			Else;
				Modify Global Variable(Healthkit_Used, Append To Array, First Of(Sorted Array(Global.Healthkits_Large, Distance Between(
					Event Player, Current Array Element))));
				Modify Global Variable(Healthkits_Large, Remove From Array By Value, First Of(Sorted Array(Global.Healthkits_Large,
					Distance Between(Event Player, Current Array Element))));
				Modify Global Variable(Healthkit_CD, Append To Array, 15);
				Modify Global Variable(Used_Healthkit_Type, Append To Array, 2);
			End;
		End;
	}
}

rule("Healthkit Cooldown")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Healthkit_Used = Empty Array;
		Global.Healthkit_CD = Empty Array;
		Global.Used_Healthkit_Type = Empty Array;
		While(True);
			Wait Until(Count Of(Global.Healthkit_Used) > 0, 99999);
			For Global Variable(Healthkit_Index, Count Of(Global.Healthkit_Used) - 1, -1, -1);
				If(Global.Healthkit_CD[Global.Healthkit_Index] <= 0);
					If(Global.Used_Healthkit_Type[Global.Healthkit_Index] == 1);
						Modify Global Variable(Healthkits_Small, Append To Array, Global.Healthkit_Used[Global.Healthkits]);
					Else If(Global.Used_Healthkit_Type[Global.Healthkit_Index] == 2);
						Modify Global Variable(Healthkits_Large, Append To Array, Global.Healthkit_Used[Global.Healthkits]);
					Else;
						Modify Global Variable(Healthkits, Append To Array, Global.Healthkit_Used[Global.Healthkits]);
					End;
					Modify Global Variable(Healthkit_Used, Remove From Array By Index, Global.Healthkit_Index);
					Modify Global Variable(Healthkit_CD, Remove From Array By Index, Global.Healthkit_Index);
					Modify Global Variable(Used_Healthkit_Type, Remove From Array By Index, Global.Healthkit_Index);
				Else;
					Global.Healthkit_CD[Global.Healthkit_Index] -= 1;
				End;
			End;
			Wait(1, Ignore Condition);
		End;
	}
}

disabled rule("----------------------------------- AI Communicate ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Bot Say Hello")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.AI_Communicate == True;
		Is Communicating(Event Player, Hello) == True;
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		Wait(Random Real(0.500, 1.500), Ignore Condition);
		Communicate(Filtered Array(Remove From Array(All Living Players(Team Of(Event Player)), Event Player), Is In View Angle(
			Event Player, Eye Position(Current Array Element), 45) == True && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Current Array Element), Barriers Do Not Block LOS) == True && Distance Between(Event Player, Current Array Element)
			< 20 && Is Dummy Bot(Current Array Element)), Hello);
	}
}

rule("Bot Say Need Help")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Global.AI_Communicate == True;
		Is Communicating(Event Player, Need Help) != True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Communicate(Event Player, Need Help);
		Wait(8, Ignore Condition);
	}
}

rule("Bot Say Need Healing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.AI_Communicate == True;
		Is Communicating(Event Player, Need Healing) != True;
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.800;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Communicate(Event Player, Need Healing);
		Wait(8, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bot Say Understood")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.AI_Communicate == True;
		Is Communicating(Event Player, Ultimate Status) == True;
		Is Dummy Bot(Event Player) != True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Wait(Random Real(0.500, 1.500), Ignore Condition);
		Communicate(Filtered Array(Remove From Array(All Living Players(Team Of(Event Player)), Event Player), Is Dummy Bot(
			Current Array Element)), Acknowledge);
	}
}

rule("Bot Say Thanks")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Global.AI_Communicate == True;
		Is Communicating(Event Player, Thanks) != True;
		Is Dummy Bot(Event Player) == True;
		Healer != Healee;
		Entity Exists(Healer) == True;
	}

	actions
	{
		Wait(Random Real(0.500, 1.500), Ignore Condition);
		Communicate(Event Player, Thanks);
		Wait(8, Ignore Condition);
	}
}

disabled rule("----------------------------------- AI Communicate ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- Pathfinder ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Use Jump Node")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Array Contains(Global.Jump_Start, Event Player.Current_Node) == True;
		Distance Between(Event Player, Event Player.Current_Node) <= 3;
	}

	actions
	{
		Event Player.Jump_From = Event Player.Current_Node;
		Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.Jump_From), Distance Between(Event Player,
			Event Player.Jump_From) / 2, To World, Replace existing throttle, Direction and Magnitude);
		Wait Until(Update Every Frame(Distance Between(Event Player, Event Player.Jump_From)) <= 1.600, 99999);
		Start Throttle In Direction(Event Player, Direction Towards(Event Player.Jump_From, Global.Jump_End[Index Of Array Value(
			Global.Jump_Start, Event Player.Jump_From)]), 1, To World, Replace existing throttle, None);
		Wait Until(Update Every Frame(Distance Between(Event Player, Global.Jump_End[Index Of Array Value(Global.Jump_Start,
			Event Player.Jump_From)])) <= 1.600, 99999);
		Press Button(Event Player, Button(Jump));
		Wait Until(Is On Ground(Event Player), 4);
		Wait(1, Ignore Condition);
		Start Throttle In Direction(Event Player, Is In Line of Sight(Eye Position(Event Player), Event Player.Walk_To_Position,
			Barriers Do Not Block LOS) ? (Distance Between(Event Player, Event Player.Walk_To_Position)
			< Event Player.Walk_Min ? Direction Towards(Event Player.Walk_To_Position, Event Player) : Direction Towards(Event Player,
			Event Player.Walk_To_Position)) : Direction Towards(Position Of(Event Player), Event Player.Current_Node), (Distance Between(
			Event Player, Event Player.Walk_To_Position) < Event Player.Walk_Min || Distance Between(Event Player,
			Event Player.Walk_To_Position) > Event Player.Walk_Max) && Is In Line of Sight(Eye Position(Event Player),
			Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 1 : (Is In Line of Sight(Eye Position(Event Player),
			Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 0 : 1), To World, Replace existing throttle,
			Direction and Magnitude);
	}
}

rule("Pathfind Melee/Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Magnitude Of(Throttle Of(Event Player)) > 0;
		Horizontal Speed Of(Event Player) < 2;
	}

	actions
	{
		Wait(Max(Server Load / 1000, 0.250), Abort When False);
		Press Button(Event Player, Button(Jump));
		Skip If((Hero Of(Event Player) == Hero(Sombra) || Hero Being Duplicated(Event Player) == Hero(Sombra))
			&& Event Player.Invisible_Cooldown == 0 && Event Player.Is_Visible_Array == Empty Array, 3);
		Skip If(Entity Exists(First Of(Event Player.Target_Order)) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			First Of(Event Player.Target_Order)), Barriers Do Not Block LOS) && Team Of(Event Player) != Team Of(First Of(
			Event Player.Target_Order)), 2);
		Wait(Max(Server Load / 1000, 0.250), Abort When False);
		Press Button(Event Player, Button(Melee));
		Loop If Condition Is True;
	}
}

rule("Current Node")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.Using_Stairs = Array Contains(Append To Array(Append To Array(Global.Staircase_Middle, Filtered Array(
			Global.Staircase_Bottom, Current Array Element != Null)), Global.Staircase_Top), Event Player.Current_Node) ? True : False;
		Skip If(Y Component Of(Position Of(Event Player)) + 2.750 >= Y Component Of(Event Player.Walk_To_Position), 2);
		Event Player.Ignore_Lower_Nodes = 5;
		Chase Player Variable Over Time(Event Player, Ignore_Lower_Nodes, 0, 5, Destination and Duration);
		If(Distance Between(Position Of(Event Player), Event Player.Current_Node) < 3);
			If(Event Player.Using_Stairs);
				If(Array Contains(Global.Staircase_Bottom, Event Player.Current_Node));
					Event Player.Last_Stair_Type = Custom String("Bottom");
				Else If(Array Contains(Filtered Array(Global.Staircase_Middle, Current Array Element != Null), Event Player.Current_Node));
					Event Player.Last_Stair_Type = Custom String("Middle");
				Else If(Array Contains(Filtered Array(Global.Staircase_Top, Current Array Element != Null), Event Player.Current_Node));
					Event Player.Last_Stair_Type = Custom String("Top");
				End;
			End;
			If(Array Contains(Event Player.Known_Nodes, Event Player.Current_Node) != True);
				Modify Player Variable(Event Player, Known_Nodes, Append To Array, Event Player.Current_Node);
				Modify Player Variable(Event Player, Vist_Count, Append To Array, 1);
			Else;
				Event Player.Vist_Count[Index Of Array Value(Event Player.Known_Nodes, Event Player.Current_Node)] += 1;
			End;
			Event Player.Node_DePrioritze[Index Of Array Value(Event Player.Known_Nodes, Event Player.Current_Node)] += 10;
		End;
		Event Player.Node_Options = Filtered Array(Append To Array(Append To Array(Global.Path_Nodes, Append To Array(Append To Array(
			Global.ObjectiveA_Nodes, Global.ObjectiveB_Nodes), Global.Chokepoint)), Append To Array(Append To Array(
			Global.Staircase_Bottom, Filtered Array(Global.Staircase_Middle, Current Array Element != Null)), Global.Staircase_Top)),
			Event Player.Node_DePrioritze[Index Of Array Value(Event Player.Known_Nodes, Current Array Element)] <= 9999);
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Event Player, Current Array Element) <= 30);
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Y Component Of(Position Of(Event Player))
			+ 2.750 > Y Component Of(Current Array Element));
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
			Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
			Event Player), Current Array Element) / 1.200), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 1.200) + Vector(0, -99, 0),
			Null, All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 1.200)) < Max(Y Component Of(
			Position Of(Event Player)) + 1 - Y Component Of(Current Array Element), 8));
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
			Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
			Event Player), Current Array Element) / 2), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 2) + Vector(0, -99, 0), Null,
			All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 2)) < Max(Y Component Of(
			Position Of(Event Player)) + 1 - Y Component Of(Current Array Element), 8));
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
			Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
			Event Player), Current Array Element) / 4), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 4) + Vector(0, -99, 0), Null,
			All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 4)) < Max(Y Component Of(
			Position Of(Event Player)) + 1 - Y Component Of(Current Array Element), 8));
		If(Event Player.Using_Stairs);
			If(Array Contains(Global.Staircase_Bottom, Event Player.Current_Node));
				Event Player.Stairs_Index = Index Of Array Value(Global.Staircase_Bottom, Event Player.Current_Node);
			Else If(Array Contains(Filtered Array(Global.Staircase_Middle, Current Array Element != Null), Event Player.Current_Node));
				Event Player.Stairs_Index = Index Of Array Value(Global.Staircase_Middle, Event Player.Current_Node);
			Else If(Array Contains(Filtered Array(Global.Staircase_Top, Current Array Element != Null), Event Player.Current_Node));
				Event Player.Stairs_Index = Index Of Array Value(Global.Staircase_Top, Event Player.Current_Node);
			End;
			If(Event Player.Last_Stair_Type == Custom String("Bottom"));
				If(Global.Staircase_Middle[Event Player.Stairs_Index] == Null);
					Modify Player Variable(Event Player, Node_Options, Append To Array, Global.Staircase_Top[Event Player.Stairs_Index]);
				Else;
					Modify Player Variable(Event Player, Node_Options, Append To Array, Global.Staircase_Middle[Event Player.Stairs_Index]);
				End;
			Else If(Event Player.Last_Stair_Type == Custom String("Middle"));
				Modify Player Variable(Event Player, Node_Options, Append To Array, Global.Staircase_Top[Event Player.Stairs_Index]);
			End;
		End;
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Is In Line of Sight(Eye Position(Event Player),
			Current Array Element, Barriers Do Not Block LOS) == True);
		Event Player.Node_Options = Sorted Array(Event Player.Node_Options, Distance Between(Event Player, Current Array Element) * (
			Y Component Of(Position Of(Event Player)) + 1 <= Y Component Of(Current Array Element)
			|| !Event Player.Ignore_Lower_Nodes ? 1 : (Distance Between(Event Player, Event Player.Walk_To_Position) < Distance Between(
			Current Array Element, Event Player.Walk_To_Position) ? 5 : 2.500)) + Distance Between(Event Player.Walk_To_Position,
			Current Array Element) + Event Player.Node_DePrioritze[Index Of Array Value(Event Player.Known_Nodes, Current Array Element)]);
		Skip If(Distance Between(Vector(X Component Of(Position Of(Event Player)), Y Component Of(Event Player.Walk_To_Position),
			Z Component Of(Position Of(Event Player))), Event Player.Walk_To_Position) > 15, 1);
		Event Player.Node_Options = Sorted Array(Event Player.Node_Options, Current Array Index * (
			Event Player.Ignore_Lower_Nodes != 0 && Y Component Of(Position Of(Event Player)) + (Array Contains(Global.Staircase_Middle,
			Current Array Element) ? 1.500 : 2.750) <= Y Component Of(Current Array Element) && Array Contains(Append To Array(
			Append To Array(Global.Staircase_Middle, Global.Staircase_Bottom), Global.Staircase_Top), Current Array Element) ? 1 : 5));
		Event Player.Current_Node = First Of(Event Player.Node_Options) < 0 ? First Of(Sorted Array(Filtered Array(
			Event Player.Node_Options, Current Array Index < 0), Absolute Value(Current Array Index))) : First Of(
			Event Player.Node_Options);
		If(Count Of(Event Player.Node_Options) == 0);
			Event Player.Node_DePrioritze = Empty Array;
			Event Player.Vist_Count = Empty Array;
			Event Player.Known_Nodes = Empty Array;
		End;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop;
	}
}

rule("Walk To Target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.Requested_Hero == Null;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Number Of Players On Objective(Team Of(Event Player)) >= Number Of Players On Objective(Opposite Team Of(Team Of(Event Player)))
			+ (Is Team On Defense(Team Of(Event Player)) || (Is Team On Defense(Team Of(Event Player)) && Match Time <= 45) ? 2 : 1);
		(Normalized Health(Event Player) >= (Entity Exists(First Of(Event Player.Target_Order)) ? 0.500 : 0.750) || Count Of(
			Append To Array(Global.Healthkits_Small, Global.Healthkits_Large)) == 0) == True;
	}

	actions
	{
		Event Player.Walk_To_Position = Position Of(First Of(Event Player.Target_Order)) + Vector(0, 1.550, 0);
		If(Team Of(First Of(Event Player.Target_Order)) != Team Of(Event Player));
			Event Player.Walk_Max = Min(Event Player.Primary_Max - Event Player.Primary_Max / 2,
				Event Player.Secondary_Max - Event Player.Secondary_Max / 2);
			Event Player.Walk_Min = Min(Event Player.Primary_Min - Event Player.Primary_Min / 2,
				Event Player.Secondary_Min - Event Player.Secondary_Min / 2);
		Else;
			Event Player.Walk_Max = 8;
			Event Player.Walk_Min = 4;
		End;
		Event Player.Node_DePrioritze = Empty Array;
		Event Player.Vist_Count = Empty Array;
		Event Player.Known_Nodes = Empty Array;
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Walk To Objective")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) != True;
		(Array Contains(Filtered Array(Append To Array(Global.ObjectiveA_Nodes, Payload Position + Vector(0, 2.500, 0)), Distance Between(
			Current Array Element, Payload Position) <= 6), Event Player.Walk_To_Position) != True || Distance Between(Event Player,
			Event Player.Walk_To_Position) <= 2.500) == True;
		(Normalized Health(Event Player) >= (Entity Exists(First Of(Event Player.Target_Order)) ? 0.500 : 0.750) || Count Of(
			Append To Array(Global.Healthkits_Small, Global.Healthkits_Large)) == 0) == True;
		(Event Player.Requested_Hero == Null || (Distance Between(Event Player, Spawn Points(Team Of(Event Player))) >= Distance Between(
			Event Player, Objective Position(Objective Index)) && Distance Between(Event Player, Spawn Points(Team Of(Event Player)))
			>= 40)) == True;
	}

	actions
	{
		Event Player.Walk_To_Position = Random Value In Array(Filtered Array(Append To Array(Global.ObjectiveA_Nodes,
			Payload Position + Vector(0, 2.500, 0)), Distance Between(Current Array Element, Payload Position) <= 6));
		Event Player.Walk_Max = 1.800;
		Event Player.Walk_Min = 0;
		Wait(Max(Server Load / 1000, Random Real(1, 3)), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Walk To Healthkit")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.Requested_Hero == Null;
		Event Player.Walk_To_Position != First Of(Sorted Array(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large),
			Distance Between(Event Player, Current Array Element) - (Health(Event Player) <= Max Health(Event Player)
			- 200 && Array Contains(Global.Healthkits_Large, Current Array Element) ? 0 : 10)));
		Number Of Players On Objective(Team Of(Event Player)) >= Number Of Players On Objective(Opposite Team Of(Team Of(Event Player)))
			+ (Is Team On Offense(Team Of(Event Player)) ? (Match Time < 30 ? 2 : 1) : 1);
		(Normalized Health(Event Player) < (Entity Exists(First Of(Event Player.Target_Order)) ? 0.500 : 0.750) && Count Of(
			Append To Array(Global.Healthkits_Small, Global.Healthkits_Large)) > 0) == True;
	}

	actions
	{
		Event Player.Walk_To_Position = First Of(Sorted Array(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large),
			Distance Between(Event Player, Current Array Element) - (Health(Event Player) <= Max Health(Event Player)
			- 200 && Array Contains(Global.Healthkits_Large, Current Array Element) ? 0 : 10)));
		Event Player.Walk_Max = 1;
		Event Player.Walk_Min = 0;
		Event Player.Node_DePrioritze = Empty Array;
		Event Player.Vist_Count = Empty Array;
		Event Player.Known_Nodes = Empty Array;
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Walk To Spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.Requested_Hero != Null;
		(Distance Between(Event Player, Spawn Points(Team Of(Event Player))) < Distance Between(Event Player, Objective Position(
			Objective Index)) || Distance Between(Event Player, Spawn Points(Team Of(Event Player))) < 40) == True;
		Is True For All(Filtered Array(All Players(Team Of(Event Player)), !Is Dummy Bot(Current Array Element)), Hero Of(
			Current Array Element) != Event Player.Requested_Hero) == True;
	}

	actions
	{
		Event Player.Node_DePrioritze = Empty Array;
		Event Player.Vist_Count = Empty Array;
		Event Player.Known_Nodes = Empty Array;
		Event Player.Walk_To_Position = Spawn Points(Team Of(Event Player));
		Event Player.Walk_Max = 1;
		Event Player.Walk_Min = 0;
		Wait(Max(Server Load / 1000, 1), Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("----------------------------------- Pathfinder ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- AI ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Setup Bot")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		If(Global.AI_Gamertags == True);
			Event Player.AI_Username = Random Value In Array(Global.Gamertags);
			Start Forcing Dummy Bot Name(Event Player, Event Player.AI_Username);
		Else;
			Event Player.AI_Username = Custom String("Temp Name");
			Start Forcing Dummy Bot Name(Event Player, Custom String("AI - Team {0} - Slot {1}", Team Of(Event Player), Slot Of(
				Event Player)));
		End;
		Call Subroutine(Heros);
		Wait(Random Real(0, 2), Ignore Condition);
		Event Player.Hero = Random Value In Array(Filtered Array(Is Team On Offense(Team Of(Event Player))
			? Global.T2_Available_Heros : Global.T1_Available_Heros, Array Contains(Event Player.Hero_Pool, Current Array Element)));
		If(Team Of(Event Player) == Team 1);
			Modify Global Variable(T1_Available_Heros, Remove From Array By Value, Event Player.Hero);
		Else;
			Modify Global Variable(T2_Available_Heros, Remove From Array By Value, Event Player.Hero);
		End;
		Set Player Allowed Heroes(Filtered Array(All Players(Team Of(Event Player)), !Is Dummy Bot(Current Array Element)), Team Of(
			Event Player) == Team 1 ? Global.T1_Available_Heros : Global.T2_Available_Heros);
		Call Subroutine(AI_Start_Facing);
		Event Player.Can_Change_Arc = True;
		Wait Until(Has Spawned(Event Player) && (Is Team On Offense(Team Of(Event Player)) ? Is Game In Progress : !Is Assembling Heroes),
			99999);
		Start Throttle In Direction(Event Player, Is In Line of Sight(Eye Position(Event Player), Event Player.Walk_To_Position,
			Barriers Do Not Block LOS) ? (Distance Between(Event Player, Event Player.Walk_To_Position)
			< Event Player.Walk_Min ? Direction Towards(Event Player.Walk_To_Position, Event Player) : Direction Towards(Event Player,
			Event Player.Walk_To_Position)) : Direction Towards(Position Of(Event Player), Event Player.Current_Node), (Distance Between(
			Event Player, Event Player.Walk_To_Position) < Event Player.Walk_Min || Distance Between(Event Player,
			Event Player.Walk_To_Position) > Event Player.Walk_Max) && Is In Line of Sight(Eye Position(Event Player),
			Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 1 : (Is In Line of Sight(Eye Position(Event Player),
			Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 0 : 1), To World, Replace existing throttle,
			Direction and Magnitude);
		Event Player.Node_DePrioritze = Empty Array;
		Event Player.Vist_Count = Empty Array;
		Event Player.Known_Nodes = Empty Array;
	}
}

rule("Bot Target List")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Skip If(Global.Targeting_Type == (0 || 2), 3);
		If(Is Hero Being Played(Hero(Widowmaker), Team Of(Event Player)) && Is True For Any(Players On Hero(Hero(Widowmaker), Team Of(
			Event Player)), Is Using Ultimate(Current Array Element)));
			Event Player.Targets = All Living Players(Opposite Team Of(Team Of(Event Player)));
		Else;
			Skip If(Global.Targeting_Type == (0 || 2), 1);
			Event Player.Targets = Append To Array(Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))),
				Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS)),
				Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), Event Player.Seen_By_Memory > 0));
			Skip If(Global.Targeting_Type == (0 || 1), 8);
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Opposite Team Of(Team Of(
				Event Player))), Has Status(Current Array Element, Hacked)));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Opposite Team Of(Team Of(
				Event Player))), Distance Between(Event Player, Current Array Element) <= Global.Primary_Sound_Max[Index Of Array Value(
				Global.All_Heros, Hero Of(Current Array Element))] && ((Is Duplicating(Current Array Element) ? Hero Being Duplicated(
				Current Array Element) : Hero Of(Current Array Element)) == Hero(D.Va) || (Is Duplicating(Current Array Element)
				? Hero Being Duplicated(Current Array Element) : Hero Of(Current Array Element)) == Hero(Illari) ? Is Button Held(
				Current Array Element, Button(Primary Fire)) : Is Firing Primary(Current Array Element))));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Opposite Team Of(Team Of(
				Event Player))), Distance Between(Event Player, Current Array Element) <= Global.Secondary_Sound_Max[Index Of Array Value(
				Global.All_Heros, Hero Of(Current Array Element))] && Is Firing Secondary(Current Array Element)));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Opposite Team Of(Team Of(
				Event Player))), Distance Between(Event Player, Current Array Element) <= Global.Ability1_Sound_Max[Index Of Array Value(
				Global.All_Heros, Hero Of(Current Array Element))] && Is Using Ability 1(Current Array Element)));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Opposite Team Of(Team Of(
				Event Player))), Distance Between(Event Player, Current Array Element) <= Global.Ability2_Sound_Max[Index Of Array Value(
				Global.All_Heros, Hero Of(Current Array Element))] && Is Using Ability 2(Current Array Element)));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Opposite Team Of(Team Of(
				Event Player))), Distance Between(Event Player, Current Array Element) <= Global.Ultimate_Sound_Max[Index Of Array Value(
				Global.All_Heros, Hero Of(Current Array Element))] && Is Using Ultimate(Current Array Element)));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Opposite Team Of(Team Of(
				Event Player))), Distance Between(Event Player, Current Array Element) <= Global.Walking_Sound_Max[Index Of Array Value(
				Global.All_Heros, Hero Of(Current Array Element))] && !Is Crouching(Current Array Element) && Is Moving(
				Current Array Element)));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Opposite Team Of(Team Of(
				Event Player))), Distance Between(Event Player, Current Array Element) <= Global.Crouch_Walk_Sound_Max[Index Of Array Value(
				Global.All_Heros, Hero Of(Current Array Element))] && Is Crouching(Current Array Element) && Is Moving(
				Current Array Element)));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Opposite Team Of(Team Of(
				Event Player))), Distance Between(Event Player, Current Array Element) <= Global.Melee_Sound_Max[Index Of Array Value(
				Global.All_Heros, Hero Of(Current Array Element))] && Is Meleeing(Current Array Element)));
			If(Global.Invisible_Targeting == 0);
				Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Players On Hero(Hero(Sombra), Opposite Team Of(
					Team Of(Event Player))),
					Current Array Element.Invisible_Cooldown == 0 && Current Array Element.Is_Visible_Array == Empty Array && !Is Firing Secondary(
					Current Array Element) && Distance Between(Eye Position(Event Player), Position Of(Current Array Element))
					> 4 && Distance Between(Position Of(Event Player), Position Of(Current Array Element)) > 4));
				Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Players On Hero(Hero(Echo), Opposite Team Of(Team Of(
					Event Player))), Hero Being Duplicated(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element)
					&& !Is Firing Secondary(Current Array Element) && Distance Between(Eye Position(Event Player), Position Of(
					Current Array Element)) > 4 && Distance Between(Position Of(Event Player), Position Of(Current Array Element)) > 4));
			Else If(Global.Invisible_Targeting == 3);
				Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Players On Hero(Hero(Sombra), Opposite Team Of(
					Team Of(Event Player))),
					Current Array Element.Invisible_Cooldown == 0 && Current Array Element.Is_Visible_Array == Empty Array));
				Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Players On Hero(Hero(Echo), Opposite Team Of(Team Of(
					Event Player))), Hero Being Duplicated(Current Array Element) == Hero(Sombra)
					&& Current Array Element.Invisible_Cooldown == 0 && Current Array Element.Is_Visible_Array == Empty Array));
			Else If(Global.Invisible_Targeting == 1);
				Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Players On Hero(Hero(Sombra), Opposite Team Of(
					Team Of(Event Player))),
					Current Array Element.Invisible_Cooldown == 0 && Current Array Element.Is_Visible_Array == Empty Array && !Is Firing Secondary(
					Current Array Element)));
				Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Players On Hero(Hero(Echo), Opposite Team Of(Team Of(
					Event Player))),
					Current Array Element.Invisible_Cooldown == 0 && Current Array Element.Is_Visible_Array == Empty Array && !Is Firing Secondary(
					Current Array Element) && Hero Being Duplicated(Current Array Element) == Hero(Sombra)));
			Else;
				Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Players On Hero(Hero(Sombra), Opposite Team Of(
					Team Of(Event Player))), Is Using Ability 1(Current Array Element) && Distance Between(Eye Position(Event Player), Position Of(
					Current Array Element)) > 4 && Distance Between(Position Of(Event Player), Position Of(Current Array Element)) > 4));
				Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Players On Hero(Hero(Echo), Opposite Team Of(Team Of(
					Event Player))), Is Using Ability 1(Current Array Element) && Hero Being Duplicated(Current Array Element) == Hero(Sombra)
					&& Distance Between(Eye Position(Event Player), Position Of(Current Array Element)) > 4 && Distance Between(Position Of(
					Event Player), Position Of(Current Array Element)) > 4));
			End;
		End;
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(All Players(All Teams), Has Status(
			Current Array Element, Asleep) || Is In Spawn Room(Current Array Element) || Has Status(Current Array Element, Phased Out)
			|| !Has Spawned(Current Array Element)));
		Skip If(Global.Ignore_Abilitys == True, 5);
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(D.Va),
			All Teams), Hero Being Duplicated(Event Player) == Hero(D.Va)), Is Firing Secondary(Current Array Element) && Is In View Angle(
			Current Array Element, Eye Position(Event Player), 70)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Zarya),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Zarya)), Is Using Ability 1(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Reaper),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Reaper)), Is Using Ability 1(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Genji),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Genji)), Is Using Ability 2(Current Array Element) && Is In View Angle(
			Current Array Element, Eye Position(Event Player), 70)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Sigma),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Sigma)), Is Using Ability 1(Current Array Element) && Is In View Angle(
			Current Array Element, Eye Position(Event Player), 70)));
		Skip If(Global.Team_Based_Targeting == False, 25);
		If((Hero Being Duplicated(Event Player) == Hero(Zarya) || Hero Of(Event Player) == Hero(Zarya)) && Ability Cooldown(Event Player,
			Button(Ability 2)) == Null);
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < 0.400));
		Else If((Hero Being Duplicated(Event Player) == Hero(Moira) || Hero Of(Event Player) == Hero(Moira)) && Ability Resource(
				Event Player, Button(Primary Fire)) > 0);
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < (Count Of(Event Player.Targets) > 0 ? 0.800 : 1)));
		Else If(Hero Being Duplicated(Event Player) == Hero(Mercy) || Hero Of(Event Player) == Hero(Mercy));
			Modify Player Variable(Event Player, Targets, Append To Array, Append To Array(Filtered Array(All Living Players(Team Of(
				Event Player)), Normalized Health(Current Array Element) < 1), Filtered Array(All Players(Team Of(Event Player)), Is Dead(
				Current Array Element))));
		Else If((Hero Being Duplicated(Event Player) == Hero(Brigitte) || Hero Of(Event Player) == Hero(Brigitte)) && Ability Charge(
				Event Player, Button(Ability 2)) > 0);
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < 1));
		Else If(Hero Being Duplicated(Event Player) == Hero(Baptiste) || Hero Of(Event Player) == Hero(Baptiste));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < (Count Of(Event Player.Targets) > 0 ? 0.800 : 1)));
		Else If(Hero Being Duplicated(Event Player) == Hero(Ana) || Hero Of(Event Player) == Hero(Ana));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < (Count Of(Event Player.Targets) > 0 ? 0.800 : 1)));
		Else If((Hero Being Duplicated(Event Player) == Hero(Lúcio) || Hero Of(Event Player) == Hero(Lúcio)) && !Is In Alternate Form(
				Event Player));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < 1));
		Else If(Hero Being Duplicated(Event Player) == Hero(Kiriko) || Hero Of(Event Player) == Hero(Kiriko));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < (Count Of(Event Player.Targets) > 0 ? 0.800 : 1)));
		Else If((Hero Being Duplicated(Event Player) == Hero(Zenyatta) || Hero Of(Event Player) == Hero(Zenyatta))
				&& !Is In Alternate Form(Event Player));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(Remove From Array(All Living Players(Team Of(
				Event Player)), Event Player), Normalized Health(Current Array Element) < 1));
			Skip If(!Entity Exists(First Of(Filtered Array(Event Player.Targets, Team Of(Current Array Element) == Team Of(Event Player)))),
				1);
			Event Player.Targets = First Of(Filtered Array(Sorted Array(Event Player.Targets, Distance Between(Event Player,
				Current Array Element) * Health(Current Array Element)), Team Of(Current Array Element) == Team Of(Event Player)))
				== Event Player.Zen_Orb_Target ? Filtered Array(Event Player.Targets, Team Of(Current Array Element) != Team Of(Event Player))
				: Event Player.Targets;
		Else If(Hero Being Duplicated(Event Player) == Hero(Lifeweaver) || Hero Of(Event Player) == Hero(Lifeweaver));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < (Count Of(Event Player.Targets) > 0 ? 0.800 : 1)));
		Else If(Hero Being Duplicated(Event Player) == Hero(Illari) || Hero Of(Event Player) == Hero(Illari));
			Modify Player Variable(Event Player, Targets, Append To Array, Filtered Array(All Living Players(Team Of(Event Player)),
				Normalized Health(Current Array Element) < (Count Of(Event Player.Targets) > 0 ? 0.800 : 1)));
		End;
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Append To Array(Event Player, Filtered Array(All Players(
			All Teams), !Has Spawned(Current Array Element))));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Doomfist),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Doomfist)), Is Using Ultimate(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Moira),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Moira)), Is Using Ability 1(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Mei),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Mei)), Is Using Ability 1(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Zenyatta),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Zenyatta)), Is Using Ultimate(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(Append To Array(Players On Hero(Hero(Tracer),
			All Teams), Hero Being Duplicated(Event Player) == Hero(Tracer)), Is Using Ability 2(Current Array Element)));
		Event Player.Targets = Remove From Array(Event Player.Targets, Filtered Array(All Living Players(Opposite Team Of(Team Of(
			Event Player))), !Is On Objective(Current Array Element) && Is Communicating Any Emote(Current Array Element)));
		Event Player.Target_Order = Sorted Array(Event Player.Targets, Distance Between(Event Player, Current Array Element) * Health(
			Current Array Element) - (Team Of(Current Array Element) == Team Of(Event Player) ? (Is In Line of Sight(Eye Position(
			Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS) ? 1000 : 0) : 0));
		If(!Entity Exists(First Of(Event Player.Target_Order)));
			Press Button(Event Player, Button(Reload));
		End;
		Wait(Max(Server Load / 1000, 1.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Heal Target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Heal_Friendlys != Empty Array;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Team Of(Event Player) == Team Of(First Of(Event Player.Target_Order));
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Is True For Any(Event Player.Heal_Friendlys, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Heal_Friendlys, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Heal_Friendlys, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(
			Event Player.Heal_Friendlys, Current Array Element))) == True;
		Hero Of(Event Player) != Hero(Zenyatta);
		Hero Being Duplicated(Event Player) != Hero(Zenyatta);
	}

	actions
	{
		Event Player.Current_Heal_Friendlys = Random Value In Array(Event Player.Heal_Friendlys);
		If(Event Player.Current_Heal_Friendlys == Button(Ability 1));
			Skip If(Distance Between(Event Player, First Of(Event Player.Target_Order)) > Event Player.Ability1_Max || Distance Between(
				Event Player, First Of(Event Player.Target_Order)) < Event Player.Ability1_Min, 22);
		Else If(Event Player.Current_Heal_Friendlys == Button(Ability 2));
			Skip If(Distance Between(Event Player, First Of(Event Player.Target_Order)) > Event Player.Ability2_Max || Distance Between(
				Event Player, First Of(Event Player.Target_Order)) < Event Player.Ability2_Min, 20);
		Else If(Event Player.Current_Heal_Friendlys == Button(Primary Fire));
			Skip If(Distance Between(Event Player, First Of(Event Player.Target_Order)) > Event Player.Primary_Max || Distance Between(
				Event Player, First Of(Event Player.Target_Order)) < Event Player.Primary_Min, 18);
		Else If(Event Player.Current_Heal_Friendlys == Button(Secondary Fire));
			Skip If(Distance Between(Event Player, First Of(Event Player.Target_Order)) > Event Player.Secondary_Max || Distance Between(
				Event Player, First Of(Event Player.Target_Order)) < Event Player.Secondary_Min, 16);
		End;
		If(Array Contains(Event Player.Hold, Event Player.Current_Heal_Friendlys) == True);
			Start Holding Button(Event Player, Event Player.Current_Heal_Friendlys);
			Wait Until(Ability Cooldown(Event Player, Event Player.Current_Heal_Friendlys) > 0 || !Entity Exists(First Of(
				Event Player.Target_Order)) || Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
				Event Player.Target_Order)), Barriers Do Not Block LOS), Event Player.Charging_Time == 0 ? 3 : Event Player.Charging_Time);
			Stop Holding Button(Event Player, Event Player.Current_Heal_Friendlys);
		Else If(Array Contains(Event Player.Confirm, Event Player.Current_Heal_Friendlys) == True);
			Press Button(Event Player, Event Player.Current_Heal_Friendlys);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Event Player.Current_Heal_Friendlys) == True);
			Press Button(Event Player, Event Player.Current_Heal_Friendlys);
			Wait Until(Ability Cooldown(Event Player, Event Player.Current_Heal_Friendlys) > 0 || !Entity Exists(First Of(
				Event Player.Target_Order)) || Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
				Event Player.Target_Order)), Barriers Do Not Block LOS), 2.500);
			Press Button(Event Player, Event Player.Current_Heal_Friendlys);
		Else;
			Press Button(Event Player, Event Player.Current_Heal_Friendlys);
		End;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Stop Primary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		((Team Of(First Of(Event Player.Target_Order)) == Team Of(Event Player) && !Array Contains(Event Player.Heal_Friendlys, Button(
			Primary Fire))) || !Entity Exists(First Of(Event Player.Target_Order)) || Distance Between(Position Of(Event Player), First Of(
			Event Player.Target_Order)) <= Event Player.Primary_Min || !Is In Line of Sight(Eye Position(Event Player), Eye Position(
			First Of(Event Player.Target_Order)), Barriers Do Not Block LOS) || Distance Between(Position Of(Event Player), First Of(
			Event Player.Target_Order)) > Event Player.Primary_Max) == True;
		(Event Player.Current_Hero == Hero(Lifeweaver) ? !Is Firing Primary(Event Player) && !Is In Alternate Form(Event Player) : (
			Is True For Any(Array(Hero(D.Va), Hero(Illari)), Event Player.Current_Hero == Current Array Element) ? Is Button Held(
			Event Player, Button(Primary Fire)) : Is Firing Primary(Event Player))) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Fire Primary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array Contains(Event Player.Heal_Friendlys, Button(Primary Fire)) == False;
		Event Player.Primary_Max > 0;
		Is Alive(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Team Of(Event Player) != Team Of(First Of(Event Player.Target_Order));
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Distance Between(Position Of(Event Player), First Of(Event Player.Target_Order)) > Event Player.Primary_Min;
		Distance Between(Position Of(Event Player), First Of(Event Player.Target_Order)) <= Event Player.Primary_Max;
		Is Dummy Bot(Event Player) == True;
		(Is True For Any(Array(Hero(D.Va), Hero(Illari)), (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(
			Event Player)) == Current Array Element) ? Is Button Held(Event Player, Button(Primary Fire)) : Is Firing Primary(
			Event Player)) != True;
		(Array Contains(Event Player.Confirm, Button(Ultimate)) ? !Is Using Ultimate(Event Player) : Is Alive(Event Player)) == True;
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 1);
		Event Player.Aim_Arc = Global.Primary_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))];
		Wait(Max(Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))), Null,
			All Players(All Teams), False), Eye Position(First Of(Event Player.Target_Order))) / 320, 0.250), Abort When False);
		If(Array Contains(Event Player.Charging, Button(Primary Fire)) == True);
			While(Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
				&& Entity Exists(First Of(Event Player.Target_Order)) && Is Alive(Event Player) && Distance Between(Position Of(Event Player),
				First Of(Event Player.Target_Order)) > Event Player.Primary_Min && Distance Between(Position Of(Event Player), First Of(
				Event Player.Target_Order)) <= Event Player.Primary_Max);
				If(Array Contains(Event Player.Hold, Button(Primary Fire)) == True);
					Start Holding Button(Event Player, Button(Primary Fire));
					Wait(Event Player.Charging_Time, Ignore Condition);
					Stop Holding Button(Event Player, Button(Primary Fire));
				Else;
					Wait(Event Player.Charging_Time, Ignore Condition);
					Press Button(Event Player, Button(Primary Fire));
				End;
			End;
		Else;
			Start Holding Button(Event Player, Button(Primary Fire));
		End;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Stop Secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Lifeweaver) || Hero Of(Event Player) == Hero(Lifeweaver) ? Is Firing Primary(
			Event Player) && Is In Alternate Form(Event Player) : Is Firing Secondary(Event Player)) == True;
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		(Team Of(First Of(Event Player.Target_Order)) != (Array Contains(Event Player.Heal_Friendlys, Button(Secondary Fire)) ? Team Of(
			Event Player) : Opposite Team Of(Team Of(Event Player))) || !Entity Exists(First Of(Event Player.Target_Order))
			|| Distance Between(Position Of(Event Player), First Of(Event Player.Target_Order))
			< Event Player.Secondary_Min || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
			Event Player.Target_Order)), Barriers Do Not Block LOS) || Distance Between(Position Of(Event Player), First Of(
			Event Player.Target_Order)) > Event Player.Secondary_Max) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Fire Secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Lifeweaver) || Hero Of(Event Player) == Hero(Lifeweaver) ? !Is Firing Primary(
			Event Player) : !Is Firing Secondary(Event Player)) == True;
		Event Player.Secondary_Max > 0;
		Is Alive(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		(Array Contains(Event Player.Heal_Friendlys, Button(Secondary Fire)) ? Team Of(Event Player) : Opposite Team Of(Team Of(
			Event Player))) == Team Of(First Of(Event Player.Target_Order));
		Distance Between(Position Of(Event Player), First Of(Event Player.Target_Order)) > Event Player.Secondary_Min;
		Distance Between(Position Of(Event Player), First Of(Event Player.Target_Order)) < Event Player.Secondary_Max;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is Dummy Bot(Event Player) == True;
		(Array Contains(Event Player.Confirm, Button(Ultimate)) ? !Is Using Ultimate(Event Player) : Is Alive(Event Player)) == True;
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 1);
		Event Player.Aim_Arc = Global.Secondary_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))];
		Wait(Max(Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))), Null,
			All Players(All Teams), False), Eye Position(First Of(Event Player.Target_Order))) / 320, 0.250), Abort When False);
		If(Array Contains(Event Player.Charging, Button(Secondary Fire)) == True);
			While(Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
				&& Entity Exists(First Of(Event Player.Target_Order)) && Is Alive(Event Player) && Distance Between(Position Of(Event Player),
				First Of(Event Player.Target_Order)) > Event Player.Secondary_Min && Distance Between(Position Of(Event Player), First Of(
				Event Player.Target_Order)) <= Event Player.Secondary_Max);
				If(Array Contains(Event Player.Hold, Button(Secondary Fire)) == True);
					Start Holding Button(Event Player, Button(Secondary Fire));
					Wait(Event Player.Charging_Time, Ignore Condition);
					Stop Holding Button(Event Player, Button(Secondary Fire));
				Else;
					Wait(Event Player.Charging_Time, Ignore Condition);
					Press Button(Event Player, Button(Secondary Fire));
				End;
			End;
		Else;
			Start Holding Button(Event Player, Button(Secondary Fire));
		End;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Offensive Ability")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Offensive != Empty Array;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Team Of(Event Player) != Team Of(First Of(Event Player.Target_Order));
		Is Alive(Event Player) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is In View Angle(Event Player, Eye Position(First Of(Event Player.Target_Order)), 15) == True;
		Is Dummy Bot(Event Player) == True;
		Is True For Any(Event Player.Offensive, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Offensive, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Offensive, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(Event Player.Offensive,
			Current Array Element))) == True;
	}

	actions
	{
		Event Player.Current_Offensive = Random Value In Array(Event Player.Offensive);
		Skip If(!Array Contains(Event Player.Use_If_Shield, Event Player.Current_Offensive) && !Is In Line of Sight(Eye Position(
			Event Player), Eye Position(First Of(Event Player.Target_Order)), Enemy Barriers Block LOS), 38);
		If(Event Player.Current_Offensive == Button(Ability 1));
			Skip If(Distance Between(Event Player, First Of(Event Player.Target_Order)) > Event Player.Ability1_Max || Distance Between(
				Event Player, First Of(Event Player.Target_Order)) < Event Player.Ability1_Min, 36);
		Else;
			Skip If(Distance Between(Event Player, First Of(Event Player.Target_Order)) > Event Player.Ability2_Max || Distance Between(
				Event Player, First Of(Event Player.Target_Order)) < Event Player.Ability2_Min, 34);
		End;
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = (Event Player.Current_Mobility == Button(Ability 1) ? Global.Ability1_Arc : Global.Ability2_Arc)
			[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(
			Event Player))];
		Wait(Max(Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))), Null,
			All Players(All Teams), False), Eye Position(First Of(Event Player.Target_Order))) / 320, 0.250), Abort When False);
		If(Hero Being Duplicated(Event Player) == Hero(Orisa) || Hero Of(Event Player) == Hero(Orisa));
			Stop Facing(Event Player);
			Start Facing(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 20), Has Status(Event Player,
				Knocked Down) || Has Status(Event Player, Asleep) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)
				? 0 : 320, To World, Direction and Turn Rate);
			Wait(0.100, Ignore Condition);
		End;
		If(Array Contains(Event Player.Hold, Event Player.Current_Offensive) == True);
			Start Holding Button(Event Player, Event Player.Current_Offensive);
			Wait Until(Ability Cooldown(Event Player, Event Player.Current_Offensive) > 0 || !Entity Exists(First Of(
				Event Player.Target_Order)) || Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
				Event Player.Target_Order)), Barriers Do Not Block LOS),
				Event Player.Charging_Time != Null ? Event Player.Charging_Time : 999999);
			Stop Holding Button(Event Player, Event Player.Current_Offensive);
		Else If(Array Contains(Event Player.Confirm, Event Player.Current_Offensive) == True);
			Press Button(Event Player, Event Player.Current_Offensive);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Event Player.Current_Offensive) == True);
			Skip If(Array Contains(Event Player.Alternative_Form, Event Player.Current_Offensive) ? Is In Alternate Form(Event Player) : (
				Event Player.Current_Offensive == Button(Ability 1) ? Is Using Ability 1(Event Player) : Is Using Ability 2(Event Player)), 2);
			Press Button(Event Player, Event Player.Current_Offensive);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Wait Until((Array Contains(Event Player.Alternative_Form, Event Player.Current_Offensive) ? !Is In Alternate Form(Event Player)
				: !(Event Player.Current_Offensive == Button(Ability 1) ? Is Using Ability 1(Event Player) : Is Using Ability 2(Event Player)))
				|| !Entity Exists(First Of(Event Player.Target_Order)) || Is Dead(Event Player) || !Is In Line of Sight(Eye Position(
				Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS), 9999);
			Skip If(Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? !Is In Alternate Form(Event Player) : (
				Event Player.Current_Mobility == Button(Ability 1) ? !Is Using Ability 1(Event Player) : !Is Using Ability 2(Event Player)),
				1);
			Press Button(Event Player, Event Player.Current_Offensive);
		Else;
			Press Button(Event Player, Event Player.Current_Offensive);
		End;
		Event Player.Can_Change_Arc = True;
		Call Subroutine(AI_Start_Facing);
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Defence Ability")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Defensive != Empty Array;
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Is True For Any(Event Player.Defensive, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Defensive, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Defensive, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(Event Player.Defensive,
			Current Array Element))) == True;
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = (Event Player.Current_Mobility == Button(Ability 1) ? Global.Ability1_Arc : Global.Ability2_Arc)
			[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(
			Event Player))];
		Event Player.Current_Defensive = Random Value In Array(Event Player.Defensive);
		If(Hero Being Duplicated(Event Player) == Hero(Baptiste) || Hero Of(Event Player) == Hero(Baptiste));
			Stop Facing(Event Player);
			Start Facing(Event Player, Down, Is True For Any(Array(Has Status(Event Player, Knocked Down), Has Status(Event Player, Asleep),
				Has Status(Event Player, Frozen), Has Status(Event Player, Stunned)), Current Array Element == True)
				? 0 : Global.AI_Turn_Speed, To World, Direction and Turn Rate);
			Wait(0.100, Ignore Condition);
		Else If(Hero Being Duplicated(Event Player) == Hero(Mei) || Hero Of(Event Player) == Hero(Mei));
			Stop Facing(Event Player);
			Start Facing(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 10), Is True For Any(Array(Has Status(
				Event Player, Knocked Down), Has Status(Event Player, Asleep), Has Status(Event Player, Frozen), Has Status(Event Player,
				Stunned)), Current Array Element == True) ? 0 : Global.AI_Turn_Speed, To World, Direction and Turn Rate);
			Wait(0.100, Ignore Condition);
		End;
		If(Array Contains(Event Player.Hold, Event Player.Current_Defensive) == True);
			Start Holding Button(Event Player, Event Player.Current_Defensive);
			Wait Until(Ability Cooldown(Event Player, Event Player.Current_Defensive) > 0 || !Entity Exists(First Of(
				Event Player.Target_Order)) || Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
				Event Player.Target_Order)), Barriers Do Not Block LOS), 2.500);
			Stop Holding Button(Event Player, Event Player.Current_Defensive);
		Else If(Array Contains(Event Player.Confirm, Event Player.Current_Defensive) == True);
			Press Button(Event Player, Event Player.Current_Defensive);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Event Player.Current_Defensive) == True);
			Press Button(Event Player, Event Player.Current_Defensive);
			Wait Until(Ability Cooldown(Event Player, Event Player.Current_Defensive) > 0 || !Entity Exists(First Of(
				Event Player.Target_Order)) || Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
				Event Player.Target_Order)), Barriers Do Not Block LOS), 2.500);
			Press Button(Event Player, Event Player.Current_Defensive);
		Else;
			Press Button(Event Player, Event Player.Current_Defensive);
		End;
		If(Hero Being Duplicated(Event Player) == Hero(Mei) || Hero Of(Event Player) == Hero(Mei) || Hero Being Duplicated(Event Player)
			== Hero(Baptiste) || Hero Of(Event Player) == Hero(Baptiste));
			Wait(0.100, Ignore Condition);
			Stop Facing(Event Player);
			Call Subroutine(AI_Start_Facing);
		End;
		Event Player.Can_Change_Arc = True;
	}
}

rule("Use Mobility")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Magnitude Of(Throttle Of(Event Player)) != 0;
		Event Player.Mobility != Empty Array;
		(!Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			|| !Entity Exists(First Of(Event Player.Target_Order))) == True;
		Distance Between(Position Of(Event Player), Is In Line of Sight(Eye Position(Event Player), Event Player.Walk_To_Position,
			Barriers Do Not Block LOS) ? Event Player.Walk_To_Position : Event Player.Current_Node) > Max(Event Player.Mobility_Distance,
			Is In Line of Sight(Eye Position(Event Player), Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 2 : 0);
		Is True For Any(Event Player.Mobility, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Mobility, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Mobility, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(Event Player.Mobility,
			Current Array Element))) == True;
	}

	actions
	{
		Skip If(Ray Cast Hit Position(Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 0)
			* Event Player.Mobility_Distance, Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player),
			0) * Event Player.Mobility_Distance - Vector(0, 5, 0), Null, All Players(All Teams), False) == Eye Position(Event Player)
			+ Direction From Angles(Horizontal Facing Angle Of(Event Player), 0) * Event Player.Mobility_Distance - Vector(0, 5, 0), 24);
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = (Event Player.Current_Mobility == Button(Ability 1) ? Global.Ability1_Arc : Global.Ability2_Arc)
			[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(
			Event Player))];
		Event Player.Current_Mobility = Random Value In Array(Event Player.Mobility);
		If(Array Contains(Event Player.Hold, Event Player.Current_Mobility) == True);
			Start Holding Button(Event Player, Event Player.Current_Mobility);
			Wait Until(Is Dead(Event Player) || Entity Exists(First Of(Event Player.Target_Order)) || Distance Between(Position Of(
				Event Player), Event Player.Walk_To_Position) < Event Player.Mobility_Distance, 9999);
			Stop Holding Button(Event Player, Event Player.Current_Mobility);
		Else If(Array Contains(Event Player.Confirm, Event Player.Current_Mobility) == True);
			Press Button(Event Player, Event Player.Current_Mobility);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Event Player.Current_Mobility) == True);
			Wait Until(!Entity Exists(First Of(Event Player.Target_Order)), 99999);
			Skip If(Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? Is In Alternate Form(Event Player) : (
				Event Player.Current_Mobility == Button(Ability 1) ? Is Using Ability 1(Event Player) : Is Using Ability 2(Event Player)), 2);
			Press Button(Event Player, Event Player.Current_Mobility);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Wait Until((Entity Exists(First Of(Event Player.Target_Order)) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
				Event Player.Target_Order), Barriers Do Not Block LOS)) || (Distance Between(Event Player, Event Player.Walk_To_Position) < 2)
				|| (Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? !Is In Alternate Form(Event Player) : !(
				Event Player.Current_Mobility == Button(Ability 1) ? Is Using Ability 1(Event Player) : Is Using Ability 2(Event Player))),
				9999);
			Skip If(Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? !Is In Alternate Form(Event Player) : (
				Event Player.Current_Mobility == Button(Ability 1) ? !Is Using Ability 1(Event Player) : !Is Using Ability 2(Event Player)),
				1);
			Press Button(Event Player, Event Player.Current_Mobility);
		Else;
			Press Button(Event Player, Event Player.Current_Mobility);
		End;
		Event Player.Can_Change_Arc = True;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Heal Ability")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Healing != Empty Array;
		Normalized Health(Event Player) < (Entity Exists(First Of(Event Player.Target_Order)) ? 0.500 : 1);
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Is True For Any(Event Player.Healing, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Healing, Current Array Element)) && (Array Contains(
			Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element) > 0 : Array Contains(
			Event Player.Healing, Current Array Element)) && (Array Contains(Event Player.Resource, Current Array Element)
			? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(Event Player.Healing, Current Array Element)))
			== True;
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = (Event Player.Current_Mobility == Button(Ability 1) ? Global.Ability1_Arc : Global.Ability2_Arc)
			[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(
			Event Player))];
		Event Player.Current_Healing = Random Value In Array(Event Player.Healing);
		If(Hero Being Duplicated(Event Player) == Hero(Ana) || Hero Of(Event Player) == Hero(Ana));
			Stop Facing(Event Player);
			Start Facing(Event Player, Down, Has Status(Event Player, Knocked Down) || Has Status(Event Player, Asleep) || Has Status(
				Event Player, Frozen) || Has Status(Event Player, Stunned) ? 0 : 320, To World, Direction and Turn Rate);
			Wait(0.100, Ignore Condition);
		End;
		If(Array Contains(Event Player.Hold, Event Player.Current_Healing) == True);
			Start Holding Button(Event Player, Event Player.Current_Healing);
			Wait Until(Ability Cooldown(Event Player, Event Player.Current_Healing) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 3);
			Stop Holding Button(Event Player, Event Player.Current_Healing);
		Else If(Array Contains(Event Player.Confirm, Event Player.Current_Healing) == True);
			Press Button(Event Player, Event Player.Current_Healing);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Event Player.Current_Healing) == True);
			Skip If(Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? Is In Alternate Form(Event Player) : (
				Event Player.Current_Mobility == Button(Ability 1) ? Is Using Ability 1(Event Player) : Is Using Ability 2(Event Player)), 2);
			Press Button(Event Player, Event Player.Current_Healing);
			Wait(Event Player.Charging_Time, Ignore Condition);
			Wait Until((Entity Exists(First Of(Event Player.Target_Order)) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
				Event Player.Target_Order), Barriers Do Not Block LOS)) || (Health(Event Player) == Max Health(Event Player)) || (
				Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? !Is In Alternate Form(Event Player) : !(
				Event Player.Current_Mobility == Button(Ability 1) ? Is Using Ability 1(Event Player) : Is Using Ability 2(Event Player))),
				9999);
			Skip If(Array Contains(Event Player.Alternative_Form, Event Player.Current_Mobility) ? !Is In Alternate Form(Event Player) : (
				Event Player.Current_Mobility == Button(Ability 1) ? !Is Using Ability 1(Event Player) : !Is Using Ability 2(Event Player)),
				1);
			Press Button(Event Player, Event Player.Current_Healing);
		Else;
			Press Button(Event Player, Event Player.Current_Healing);
		End;
		Event Player.Can_Change_Arc = True;
		Call Subroutine(AI_Start_Facing);
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) == 100;
		Normalized Health(Event Player) <= Event Player.Ultimate_Health;
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Count Of(Filtered Array(Event Player.Target_Order, Team Of(First Of(Event Player.Target_Order))
			== Event Player.Ultimate_Target_Team && Distance Between(Event Player, First Of(Event Player.Target_Order))
			< Event Player.Use_Ultimate_Max && Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element),
			Barriers Do Not Block LOS))) >= Min(Event Player.Ultimate_Targets, Number Of Players(Opposite Team Of(Team Of(Event Player))));
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = Global.Ultimate_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))];
		Wait(Max(Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))), Null,
			All Players(All Teams), False), Eye Position(First Of(Event Player.Target_Order))) / 320, 0.250), Abort When False);
		Skip If(Hero Being Duplicated(Event Player) == Hero(D.Va) || Hero Of(Event Player) == Hero(D.Va) || (Hero Of(Event Player) == Hero(
			Echo) && !Is Duplicating(Event Player)), 2);
		Event Player.Primary_Max = Event Player.Ultimate_Max;
		Event Player.Primary_Min = Event Player.Ultimate_Min;
		If(Hero Being Duplicated(Event Player) == Hero(Baptiste) || Hero Of(Event Player) == Hero(Baptiste));
			Stop Facing(Event Player);
			Start Facing(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), 10), Has Status(Event Player,
				Knocked Down) || Has Status(Event Player, Asleep) || Has Status(Event Player, Frozen) || Has Status(Event Player, Stunned)
				? 0 : 320, To World, Direction and Turn Rate);
			Wait(0.100, Ignore Condition);
		End;
		If(Array Contains(Event Player.Hold, Button(Ultimate)) == True);
			Start Holding Button(Event Player, Button(Ultimate));
			Wait Until(!Is Using Ultimate(Event Player) || !Entity Exists(First Of(Event Player.Target_Order)) || Is Dead(Event Player)
				|| !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Stop Holding Button(Event Player, Button(Ultimate));
		Else If(Array Contains(Event Player.Confirm, Button(Ultimate)) == True);
			Press Button(Event Player, Button(Ultimate));
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Button(Ultimate)) == True);
			Press Button(Event Player, Button(Ultimate));
			Wait Until(!Is Using Ultimate(Event Player) || !Entity Exists(First Of(Event Player.Target_Order)) || Is Dead(Event Player)
				|| !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Press Button(Event Player, Button(Ultimate));
		Else;
			Press Button(Event Player, Button(Ultimate));
		End;
		Wait Until(Is Dead(Event Player), Max(Event Player.Ultimate_Duration, 1));
		Event Player.Primary_Max = Global.Primary_Max[Index Of Array Value(Global.All_Heros, Hero Of(Event Player))];
		Event Player.Primary_Min = Global.Primary_Min[Index Of Array Value(Global.All_Heros, Hero Of(Event Player))];
		Event Player.Can_Change_Arc = True;
		Call Subroutine(AI_Start_Facing);
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Offensive Secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Secondary_Offensive != Empty Array;
		Team Of(Event Player) != Team Of(First Of(Event Player.Target_Order));
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is In View Angle(Event Player, Eye Position(First Of(Event Player.Target_Order)), 15) == True;
		Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))) <= Event Player.Secondary_Max;
		Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))) >= Event Player.Secondary_Min;
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Is True For Any(Event Player.Secondary_Offensive, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Secondary_Offensive, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Secondary_Offensive, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(
			Event Player.Secondary_Offensive, Current Array Element))) == True;
	}

	actions
	{
		Skip If(!Array Contains(Event Player.Use_If_Shield, Button(Secondary Fire)) && !Is In Line of Sight(Eye Position(Event Player),
			Eye Position(First Of(Event Player.Target_Order)), Enemy Barriers Block LOS), 20);
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = Global.Secondary_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))];
		Wait(Max(Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * Distance Between(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))), Null,
			All Players(All Teams), False), Eye Position(First Of(Event Player.Target_Order))) / 320, 0.250), Abort When False);
		If(Array Contains(Event Player.Hold, Button(Secondary Fire)) == True);
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), Event Player.Charging_Time != Null ? Event Player.Charging_Time : 999999);
			Stop Holding Button(Event Player, Button(Secondary Fire));
		Else If(Array Contains(Event Player.Confirm, Button(Secondary Fire)) == True);
			Press Button(Event Player, Button(Secondary Fire));
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Button(Secondary Fire)) == True);
			Press Button(Event Player, Button(Secondary Fire));
			Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Press Button(Event Player, Button(Secondary Fire));
		Else;
			Press Button(Event Player, Button(Secondary Fire));
		End;
		Event Player.Can_Change_Arc = True;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Defence Secondary")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.Secondary_Defensive != Empty Array;
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Is True For Any(Event Player.Secondary_Defensive, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Secondary_Defensive, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Secondary_Defensive, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(
			Event Player.Secondary_Defensive, Current Array Element))) == True;
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = Global.Secondary_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))];
		If(Array Contains(Event Player.Hold, Button(Secondary Fire)) == True);
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Stop Holding Button(Event Player, Button(Secondary Fire));
		Else If(Array Contains(Event Player.Confirm, Button(Secondary Fire)) == True);
			Press Button(Event Player, Button(Secondary Fire));
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Button(Secondary Fire)) == True);
			Press Button(Event Player, Button(Secondary Fire));
			Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Press Button(Event Player, Button(Secondary Fire));
		Else;
			Press Button(Event Player, Button(Secondary Fire));
		End;
		Event Player.Can_Change_Arc = True;
	}
}

rule("Use Heal Secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Secondary_Healing != Empty Array;
		Normalized Health(Event Player) < (Entity Exists(First Of(Event Player.Target_Order)) ? 0.500 : 1);
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Is True For Any(Event Player.Secondary_Healing, (Array Contains(Event Player.Cooldown, Current Array Element) ? Ability Cooldown(
			Event Player, Current Array Element) == Null : Array Contains(Event Player.Secondary_Healing, Current Array Element)) && (
			Array Contains(Event Player.Charge, Current Array Element) ? Ability Charge(Event Player, Current Array Element)
			> 0 : Array Contains(Event Player.Secondary_Healing, Current Array Element)) && (Array Contains(Event Player.Resource,
			Current Array Element) ? Ability Resource(Event Player, Current Array Element) > 25 : Array Contains(
			Event Player.Secondary_Healing, Current Array Element))) == True;
	}

	actions
	{
		Skip If(!Event Player.Can_Change_Arc, 2);
		Event Player.Can_Change_Arc = False;
		Event Player.Aim_Arc = Global.Secondary_Arc[Index Of Array Value(Global.All_Heros, Is Duplicating(Event Player)
			? Hero Being Duplicated(Event Player) : Hero Of(Event Player))];
		If(Array Contains(Event Player.Hold, Button(Secondary Fire)) == True);
			Wait Until(!Entity Exists(First Of(Event Player.Target_Order)), 99999);
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Stop Holding Button(Event Player, Button(Secondary Fire));
		Else If(Array Contains(Event Player.Confirm, Button(Secondary Fire)) == True);
			Press Button(Event Player, Button(Secondary Fire));
			Wait(Event Player.Charging_Time, Ignore Condition);
			Press Button(Event Player, Button(Primary Fire));
		Else If(Array Contains(Event Player.Toggle, Button(Secondary Fire)) == True);
			Press Button(Event Player, Button(Secondary Fire));
			Wait Until(Ability Cooldown(Event Player, Button(Secondary Fire)) > 0 || !Entity Exists(First Of(Event Player.Target_Order))
				|| Is Dead(Event Player) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)),
				Barriers Do Not Block LOS), 2.500);
			Press Button(Event Player, Button(Secondary Fire));
		Else;
			Press Button(Event Player, Button(Secondary Fire));
		End;
		Event Player.Can_Change_Arc = True;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bot Hero Restrictions")
{
	event
	{
		Subroutine;
		Heros;
	}

	actions
	{
		If(Slot Of(Event Player) <= 5);
			Event Player.Role_Lock = Slot Of(Event Player) == 0 ? Global.Slot1_Role_Lock : (Slot Of(Event Player)
				== 1 ? Global.Slot2_Role_Lock : (Slot Of(Event Player) == 2 ? Global.Slot3_Role_Lock : (Slot Of(Event Player)
				== 3 ? Global.Slot4_Role_Lock : (Slot Of(Event Player) == 4 ? Global.Slot5_Role_Lock : (Slot Of(Event Player)
				== 5 ? Global.Slot6_Role_Lock : 0)))));
			If(Event Player.Role_Lock == 0);
				Event Player.Hero_Pool = Global.Vaild_Heros;
			Else If(Event Player.Role_Lock == 1);
				Event Player.Hero_Pool = Filtered Array(Global.Vaild_Heros, Array Contains(All Tank Heroes, Current Array Element));
			Else If(Event Player.Role_Lock == 2);
				Event Player.Hero_Pool = Filtered Array(Global.Vaild_Heros, Array Contains(All Damage Heroes, Current Array Element));
			Else If(Event Player.Role_Lock == 3);
				Event Player.Hero_Pool = Filtered Array(Global.Vaild_Heros, Array Contains(All Support Heroes, Current Array Element));
			Else If(Event Player.Role_Lock == 4);
				Event Player.Hero_Pool = Array(Hero(Reinhardt), Hero(Sigma), Hero(Orisa));
			Else If(Event Player.Role_Lock == 5);
				Event Player.Hero_Pool = Array(Hero(Ramattra), Hero(D.Va), Hero(Roadhog), Hero(Winston), Hero(Wrecking Ball), Hero(Zarya), Hero(
					Doomfist));
			Else If(Event Player.Role_Lock == 6);
				Event Player.Hero_Pool = Array(Hero(Mercy), Hero(Moira), Hero(Ana), Hero(Baptiste), Hero(Kiriko), Hero(Lifeweaver));
			Else If(Event Player.Role_Lock == 7);
				Event Player.Hero_Pool = Array(Hero(Brigitte), Hero(Lúcio), Hero(Zenyatta), Hero(Illari));
			End;
		Else;
			Event Player.Hero_Pool = Global.Vaild_Heros;
		End;
		Wait(1, Ignore Condition);
		Skip If(Global.AI_Gamertags, 2);
		Event Player.AI_Username = Custom String("{0} {1}", Array(Custom String("Flex"), Custom String("Tank"), Custom String("Damage"),
			Custom String("Support"), Custom String("Main Tank"), Custom String("Off Tank"), Custom String("Main Support"), Custom String(
			"Off Support"))[Event Player.Role_Lock], Index Of Array Value(Filtered Array(Remove From Array(All Players(All Teams),
			Filtered Array(All Players(All Teams), !Is Dummy Bot(Current Array Element))),
			Current Array Element.Role_Lock == Event Player.Role_Lock), Event Player) + 1);
		Start Forcing Dummy Bot Name(Event Player, Event Player.AI_Username);
	}
}

rule("Bot Died")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Event Player.Stored_Ultimate_Charge = Ultimate Charge Percent(Event Player);
		Wait Until(Is Alive(Event Player), 9999);
		Wait(0.100, Ignore Condition);
		Wait Until(Hero Of(Event Player) == Event Player.Hero, 9999);
		Wait(0.100, Ignore Condition);
		Set Ultimate Charge(Event Player, Event Player.Stored_Ultimate_Charge);
	}
}

rule("Swap Hero If Duplicate Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Event Player.Hero;
		Number Of Heroes(Hero Of(Event Player), Team Of(Event Player)) > Workshop Setting Integer(Custom String("AI"), Custom String(
			"Max Dupicate Heros"), 1, 1, 6, 13);
		(Is In Spawn Room(Event Player) || !Has Spawned(Event Player)) == True;
	}

	actions
	{
		Wait(Random Real(0, 3), Abort When False);
		Event Player.Hero = Random Value In Array(Filtered Array(Is Team On Offense(Team Of(Event Player))
			? Global.T2_Available_Heros : Global.T1_Available_Heros, Array Contains(Event Player.Hero_Pool, Current Array Element)));
		Start Forcing Player To Be Hero(Event Player, Event Player.Hero);
		Call Subroutine(Hero_Variables);
		Event Player.Ultimates_Used = Player Stat(Event Player, Ultimates Used);
	}
}

rule("Swap Hero If Not Correct Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) != Event Player.Hero;
		(Is In Spawn Room(Event Player) || !Has Spawned(Event Player)) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Start Forcing Player To Be Hero(Event Player, Event Player.Hero);
		Call Subroutine(Hero_Variables);
		Event Player.Ultimates_Used = Player Stat(Event Player, Ultimates Used);
		Wait(3, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Passive Ability")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Passive != Custom String("None");
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Team Of(First Of(Event Player.Target_Order)) != Team Of(Event Player);
		(Event Player.Passive == Custom String("Eject") ? Is In Alternate Form(Event Player) : (Event Player.Passive == Custom String(
			"Exo Boots") || Event Player.Passive == Custom String("Hover Jets") || Event Player.Passive == Custom String("Glide")
			? Entity Exists(First Of(Event Player.Target_Order)) : Is Dead(Event Player))) == True;
	}

	actions
	{
		If(Event Player.Passive == Custom String("Eject"));
			Event Player.Primary_Max = 25;
			Event Player.Primary_Min = 20;
			Event Player.Ultimate_Health = 1;
			Event Player.Ultimate_Targets = 0;
			Event Player.Offensive = Empty Array;
			Event Player.Defensive = Empty Array;
			Event Player.Mobility = Empty Array;
			Event Player.Healing = Empty Array;
			Event Player.Secondary_Fire = Empty Array;
			Event Player.Secondary_Offensive = Empty Array;
			Event Player.Secondary_Defensive = Empty Array;
			Event Player.Secondary_Healing = Empty Array;
			Event Player.Hold = Empty Array;
			Event Player.Confirm = Empty Array;
			Event Player.Toggle = Empty Array;
			Event Player.Cooldown = Empty Array;
			Event Player.Charge = Empty Array;
			Event Player.Resource = Empty Array;
			Event Player.Charging = Empty Array;
			Event Player.Heal_Friendlys = Empty Array;
			Wait Until(!Is In Alternate Form(Event Player), 99999);
			Call Subroutine(Hero_Variables);
		Else If(Event Player.Passive == Custom String("Exo Boots"));
			Wait Until(Is On Ground(Event Player), 99999);
			Start Holding Button(Event Player, Button(Crouch));
			Wait Until(!Entity Exists(First Of(Event Player.Target_Order)), Event Player.Charging_Time);
			Stop Holding Button(Event Player, Button(Crouch));
			Skip If(!Entity Exists(First Of(Event Player.Target_Order)), 1);
			Press Button(Event Player, Button(Jump));
		Else If(Event Player.Passive == Custom String("Hover Jets"));
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait Until(!Entity Exists(First Of(Event Player.Target_Order)), 99999);
			Stop Holding Button(Event Player, Button(Secondary Fire));
		Else If(Event Player.Passive == Custom String("Glide"));
			Start Holding Button(Event Player, Button(Jump));
			Wait Until(!Entity Exists(First Of(Event Player.Target_Order)), 99999);
			Stop Holding Button(Event Player, Button(Jump));
		End;
	}
}

rule("Reload")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		!Is Reloading(Event Player) == True;
		((Max Ammo(Event Player, 0) > 0 && Ammo(Event Player, 0) == 0) || (Max Ammo(Event Player, 1) > 0 && Ammo(Event Player, 1) == 0))
			== True;
	}

	actions
	{
		Press Button(Event Player, Button(Reload));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("----------------------------------- AI ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- Miscellaneous ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Request Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Array Contains(Global.Vaild_Heros, Hero Of(Event Player)) == True;
		Is Alive(Event Player) == True;
		Entity Exists(Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 99,
			All Players(Team Of(Event Player)), Filtered Array(All Players(Team Of(Event Player)), !Array Contains(
			Current Array Element.Hero_Pool, Hero Of(Event Player))), False)) == True;
	}

	actions
	{
		Event Player.Request = Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 99, All Players(Team Of(Event Player)), Filtered Array(All Players(Team Of(Event Player)), !Array Contains(
			Current Array Element.Hero_Pool, Hero Of(Event Player))), False);
		Event Player.Request.Requested_Hero = Hero Of(Event Player);
		Small Message(Event Player, Custom String("Requested {1} To Play {0}", Hero Icon String(Hero Of(Event Player)),
			Event Player.Request.AI_Username));
		If(Is In Spawn Room(Event Player));
			Wait(2, Ignore Condition);
			Set Player Allowed Heroes(Event Player, Remove From Array(All Heroes, Hero Of(Event Player)));
			Wait(0.100, Ignore Condition);
			Reset Player Hero Availability(Event Player);
		Else;
			Small Message(Event Player, Custom String("(AI Will Only Swap After You've Swapped Off)"));
		End;
		Wait(3, Ignore Condition);
	}
}

rule("Swap Hero Once Requested")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.Requested_Hero != Null;
		Hero Of(Event Player) != Event Player.Requested_Hero;
	}

	actions
	{
		Wait(2.100, Ignore Condition);
		Wait Until(Is In Spawn Room(Event Player) && Is True For All(Filtered Array(All Players(Team Of(Event Player)), !Is Dummy Bot(
			Current Array Element)), Hero Of(Current Array Element) != Event Player.Requested_Hero), 99999);
		Small Message(All Players(Team Of(Event Player)), Custom String("{0} Completed Hero Swap To {1}", Event Player.AI_Username,
			Event Player.Requested_Hero));
		If(Team Of(Event Player) == Team 1);
			Modify Global Variable(T1_Available_Heros, Append To Array, Event Player.Hero);
		Else;
			Modify Global Variable(T2_Available_Heros, Append To Array, Event Player.Hero);
		End;
		Event Player.Hero = Event Player.Requested_Hero;
		If(Team Of(Event Player) == Team 1);
			Modify Global Variable(T1_Available_Heros, Remove From Array By Value, Event Player.Hero);
		Else;
			Modify Global Variable(T2_Available_Heros, Remove From Array By Value, Event Player.Hero);
		End;
		Event Player.Requested_Hero = Null;
		Set Player Allowed Heroes(Filtered Array(All Players(Team Of(Event Player)), !Is Dummy Bot(Current Array Element)), Team Of(
			Event Player) == Team 1 ? Global.T1_Available_Heros : Global.T2_Available_Heros);
	}
}

rule("Duplicate Set Variables")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Duplicating(Event Player) == True;
	}

	actions
	{
		Call Subroutine(Hero_Variables);
		Wait Until(!Is Duplicating(Event Player), 99999);
		Call Subroutine(Hero_Variables);
	}
}

rule("Widowmaker Primary Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Widowmaker) || Hero Of(Event Player) == Hero(Widowmaker)) == True;
		Is Firing Secondary(Event Player) == True;
		(Array Contains(Event Player.Hold, Button(Primary Fire)) || !Array Contains(Event Player.Charging, Button(Primary Fire))) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, Hold, Remove From Array By Value, Button(Primary Fire));
		Modify Player Variable(Event Player, Charging, Append To Array, Button(Primary Fire));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Widowmaker Primary Hold")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Widowmaker) || Hero Of(Event Player) == Hero(Widowmaker)) == True;
		Is Firing Secondary(Event Player) != True;
		(Array Contains(Event Player.Charging, Button(Primary Fire)) || !Array Contains(Event Player.Hold, Button(Primary Fire))) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, Charging, Remove From Array By Value, Button(Primary Fire));
		Modify Player Variable(Event Player, Hold, Append To Array, Button(Primary Fire));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Lúcio Use Speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Lúcio) || Hero Of(Event Player) == Hero(Lúcio)) == True;
		Is In Alternate Form(Event Player) != True;
		Normalized Health(Event Player) > (Entity Exists(First Of(Event Player.Target_Order)) ? 0.500 : 1);
		Magnitude Of(Throttle Of(Event Player)) != 0;
		Distance Between(Position Of(Event Player), Is In Line of Sight(Eye Position(Event Player), Event Player.Walk_To_Position,
			Barriers Do Not Block LOS) ? Event Player.Walk_To_Position : Event Player.Current_Node) > Max(Event Player.Mobility_Distance,
			Is In Line of Sight(Eye Position(Event Player), Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 2 : 0);
		Global.Use_Complex_Abilitys == True;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(Event Player.Charging_Time, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Lúcio Use Heal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Lúcio) || Hero Of(Event Player) == Hero(Lúcio)) == True;
		Is In Alternate Form(Event Player) == True;
		((Entity Exists(First Of(Event Player.Target_Order)) && Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
			Event Player.Target_Order)), Barriers Do Not Block LOS) && Team Of(First Of(Event Player.Target_Order)) == Team Of(
			Event Player)) || (Normalized Health(Event Player) < 1) || Distance Between(Event Player, Event Player.Walk_To_Position) <= 2)
			== True;
		Global.Use_Complex_Abilitys == True;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(Event Player.Charging_Time, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Mercy Resurrection")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Mercy) || Hero Of(Event Player) == Hero(Mercy)) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == Null;
		(Number Of Dead Players(Team Of(Event Player)) > 0 && Distance Between(Event Player, First Of(Sorted Array(All Dead Players(
			Team Of(Event Player)), Distance Between(Event Player, Current Array Element)))) < 2.500) == True;
		Is Alive(Event Player) == True;
		Global.Use_Complex_Abilitys == True;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Ana / Mercy Weapon Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		(Event Player.Current_Hero == Hero(Ana) || Event Player.Current_Hero == Hero(Mercy)) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Array Contains(Event Player.Heal_Friendlys, Button(Primary Fire)) == True;
		Team Of(Event Player) != Team Of(First Of(Event Player.Target_Order));
		Global.Use_Complex_Abilitys == True;
	}

	actions
	{
		Set Weapon(Event Player, 2);
		Modify Player Variable(Event Player, Heal_Friendlys, Remove From Array By Value, Button(Primary Fire));
	}
}

rule("Ana / Mercy Weapon Heal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		(Event Player.Current_Hero == Hero(Ana) || Event Player.Current_Hero == Hero(Mercy)) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Array Contains(Event Player.Heal_Friendlys, Button(Primary Fire)) != True;
		Team Of(Event Player) == Team Of(First Of(Event Player.Target_Order));
		Global.Use_Complex_Abilitys == True;
	}

	actions
	{
		Set Weapon(Event Player, 1);
		Modify Player Variable(Event Player, Heal_Friendlys, Append To Array, Button(Primary Fire));
	}
}

rule("Mercy Enforce Currrent Weapon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.Current_Hero == Hero(Mercy);
		Weapon(Event Player) != (Array Contains(Event Player.Heal_Friendlys, Button(Primary Fire)) ? 1 : 2);
		Global.Use_Complex_Abilitys == True;
	}

	actions
	{
		Set Weapon(Event Player, Array Contains(Event Player.Heal_Friendlys, Button(Primary Fire)) ? 1 : 2);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Zenyata Use Healing Orb")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Zenyatta) || Hero Of(Event Player) == Hero(Zenyatta)) == True;
		Is Alive(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Team Of(First Of(Event Player.Target_Order)) == Team Of(Event Player);
		First Of(Event Player.Target_Order) != Event Player.Zen_Orb_Target;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is Using Ultimate(Event Player) != True;
		Global.Use_Complex_Abilitys == True;
	}

	actions
	{
		Event Player.Zen_Orb_Target = First Of(Filtered Array(Sorted Array(Remove From Array(All Living Players(Team Of(Event Player)),
			Event Player), Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 30, All Living Players(Team Of(Event Player)), Event Player, False),
			Current Array Element)), Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element),
			Barriers Do Not Block LOS) && Is In View Angle(Event Player, Eye Position(Current Array Element), 25)));
		Event Player.Zen_Orb_Hero = Hero Of(Event Player.Zen_Orb_Target);
		Press Button(Event Player, Button(Ability 1));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Zenyata Lose Healing Orb (Sight)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Zenyatta) || Hero Of(Event Player) == Hero(Zenyatta)) == True;
		Entity Exists(Event Player.Zen_Orb_Target) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player.Zen_Orb_Target), Barriers Do Not Block LOS) != True;
		Global.Use_Complex_Abilitys == True;
	}

	actions
	{
		Wait(4, Abort When False);
		Event Player.Zen_Orb_Target = Null;
	}
}

rule("Zenyata Lose Healing Orb (Dead)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Zenyatta) || Hero Of(Event Player) == Hero(Zenyatta)) == True;
		Entity Exists(Event Player.Zen_Orb_Target) == True;
		(Is Dead(Event Player) || Is Dead(Event Player.Zen_Orb_Target)) == True;
		Global.Use_Complex_Abilitys == True;
	}

	actions
	{
		Event Player.Zen_Orb_Target = Null;
	}
}

rule("Zenyata Lose Healing Orb (Hero Swap)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Hero Being Duplicated(Event Player) == Hero(Zenyatta) || Hero Of(Event Player) == Hero(Zenyatta)) == True;
		Entity Exists(Event Player.Zen_Orb_Target) == True;
		(Hero Of(Event Player) != Hero(Zenyatta) || Hero Of(Event Player.Zen_Orb_Target) != Event Player.Zen_Orb_Hero) == True;
		Global.Use_Complex_Abilitys == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Event Player.Zen_Orb_Target = Null;
	}
}

rule("Seen By Memory")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Workshop Setting Toggle(Custom String("AI"), Custom String("Memory"), True, 9) == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Event Player.Seen_By_Memory = Is True For Any(All Living Players(Opposite Team Of(Team Of(Event Player))), Is In Line of Sight(
			Eye Position(Current Array Element), Eye Position(Event Player), Barriers Do Not Block LOS)) ? Workshop Setting Integer(
			Custom String("AI"), Custom String("Memory Duration"), 5, 0, 10, 10) : Max(Event Player.Seen_By_Memory - 1, 0);
		Event Player.Seen_By_Memory = Is Dead(Event Player) ? 0 : Event Player.Seen_By_Memory;
		Loop If Condition Is True;
	}
}

rule("Create Bot")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Number Of Players(Team 1) < Global.Number_Of_Bots_T1 || Number Of Players(Team 2) < Global.Number_Of_Bots_T2) == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Skip If(Number Of Players(Team 1) >= Global.Number_Of_Bots_T1, 1);
		Create Dummy Bot(Random Value In Array(All Heroes), Team 1, -1, Random Value In Array(Spawn Points(Team 1)), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 2) >= Global.Number_Of_Bots_T2, 1);
		Create Dummy Bot(Random Value In Array(All Heroes), Team 2, -1, Random Value In Array(Spawn Points(Team 2)), Vector(0, 0, 0));
		Loop If Condition Is True;
	}
}

rule("Remove Bot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		(Number Of Players(Team 1) > Max(Global.Number_Of_Bots_T1, Count Of(Filtered Array(All Players(Team 1), !Is Dummy Bot(
			Current Array Element)))) || Number Of Players(Team 2) > Max(Global.Number_Of_Bots_T2, Count Of(Filtered Array(All Players(
			Team 2), !Is Dummy Bot(Current Array Element))))) == True;
	}

	actions
	{
		Wait(Random Real(1, 3), Abort When False);
		Skip If(Team Of(Event Player) == Team 2, 2);
		Skip If(Number Of Players(Team 1) <= Global.Number_Of_Bots_T1, 1);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
		Skip If(Team Of(Event Player) == Team 1, 2);
		Skip If(Number Of Players(Team 2) <= Global.Number_Of_Bots_T2, 1);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
		Loop If Condition Is True;
	}
}

disabled rule("----------------------------------- Miscellaneous ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- Subroutine ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Global Setup")
{
	event
	{
		Subroutine;
		Global_Setup;
	}

	actions
	{
		Global.Vaild_Heros = Array(Hero(Reinhardt), Hero(Winston), Hero(Roadhog), Hero(Zarya), Hero(D.Va), Hero(Orisa), Hero(
			Wrecking Ball), Hero(Sigma), Hero(Mercy), Hero(Zenyatta), Hero(Lúcio), Hero(Ana), Hero(Brigitte), Hero(Moira), Hero(Baptiste),
			Hero(Reaper), Hero(Tracer), Hero(Hanzo), Hero(Torbjörn), Hero(Pharah), Hero(Widowmaker), Hero(Bastion), Hero(Symmetra), Hero(
			Genji), Hero(Cassidy), Hero(Junkrat), Hero(Soldier: 76), Hero(Mei), Hero(Sombra), Hero(Doomfist), Hero(Ashe), Hero(Echo), Hero(
			Junker Queen), Hero(Kiriko), Hero(Ramattra), Hero(Lifeweaver), Hero(Sojourn), Hero(Illari));
		Global.T1_Available_Heros = Global.Vaild_Heros;
		Global.T2_Available_Heros = Global.Vaild_Heros;
		Global.Hero_Prioritize_Order = Array(Hero(Mercy), Hero(Brigitte), Hero(Lúcio), Hero(Ana), Hero(Illari), Hero(Moira), Hero(
			Zenyatta), Hero(Baptiste), Hero(Wrecking Ball), Hero(Winston), Hero(Reinhardt), Hero(Sigma), Hero(Orisa), Hero(Zarya), Hero(
			D.Va), Hero(Roadhog), Hero(Sombra), Hero(Widowmaker), Hero(Doomfist), Hero(Tracer), Hero(Reaper), Hero(Genji), Hero(Symmetra),
			Hero(Hanzo), Hero(Mei), Hero(Torbjörn), Hero(Junkrat), Hero(Cassidy), Hero(Soldier: 76), Hero(Ashe), Hero(Echo), Hero(Bastion),
			Hero(Pharah));
		Global.Hero_Prioritize_Order = Sorted Array(Global.Hero_Prioritize_Order, Index Of Array Value(Global.Hero_Prioritize_Order,
			Current Array Element) * -1);
		Global.Swap_After_Ult = Workshop Setting Toggle(Custom String("AI"), Custom String("Only Swap Hero After Using Ultimate"), True,
			6);
		Global.Slot1_Role_Lock = Workshop Setting Combo(Custom String("Role Lock"), Custom String("Player 1"), 0, Array(Custom String(
			"Any"), Custom String("Tank"), Custom String("DPS"), Custom String("Support"), Custom String("Main Tank"), Custom String(
			"Off Tank"), Custom String("Main Support"), Custom String("Off Support")), 0);
		Global.Slot2_Role_Lock = Workshop Setting Combo(Custom String("Role Lock"), Custom String("Player 2"), 0, Array(Custom String(
			"Any"), Custom String("Tank"), Custom String("DPS"), Custom String("Support"), Custom String("Main Tank"), Custom String(
			"Off Tank"), Custom String("Main Support"), Custom String("Off Support")), 0);
		Global.Slot3_Role_Lock = Workshop Setting Combo(Custom String("Role Lock"), Custom String("Player 3"), 0, Array(Custom String(
			"Any"), Custom String("Tank"), Custom String("DPS"), Custom String("Support"), Custom String("Main Tank"), Custom String(
			"Off Tank"), Custom String("Main Support"), Custom String("Off Support")), 0);
		Global.Slot4_Role_Lock = Workshop Setting Combo(Custom String("Role Lock"), Custom String("Player 4"), 0, Array(Custom String(
			"Any"), Custom String("Tank"), Custom String("DPS"), Custom String("Support"), Custom String("Main Tank"), Custom String(
			"Off Tank"), Custom String("Main Support"), Custom String("Off Support")), 0);
		Global.Slot5_Role_Lock = Workshop Setting Combo(Custom String("Role Lock"), Custom String("Player 5"), 0, Array(Custom String(
			"Any"), Custom String("Tank"), Custom String("DPS"), Custom String("Support"), Custom String("Main Tank"), Custom String(
			"Off Tank"), Custom String("Main Support"), Custom String("Off Support")), 0);
		Global.Slot6_Role_Lock = Workshop Setting Combo(Custom String("Role Lock"), Custom String("Player 6"), 0, Array(Custom String(
			"Any"), Custom String("Tank"), Custom String("DPS"), Custom String("Support"), Custom String("Main Tank"), Custom String(
			"Off Tank"), Custom String("Main Support"), Custom String("Off Support")), 0);
	}
}

rule("Hero Values")
{
	event
	{
		Subroutine;
		Hero_Values;
	}

	actions
	{
		Global.All_Heros = Array(Hero(Reinhardt), Hero(Winston), Hero(Roadhog), Hero(Zarya), Hero(D.Va), Hero(Orisa), Hero(Wrecking Ball),
			Hero(Sigma), Hero(Mercy), Hero(Zenyatta), Hero(Lúcio), Hero(Ana), Hero(Brigitte), Hero(Moira), Hero(Baptiste), Hero(Reaper),
			Hero(Tracer), Hero(Hanzo), Hero(Torbjörn), Hero(Pharah), Hero(Widowmaker), Hero(Bastion), Hero(Symmetra), Hero(Genji), Hero(
			Cassidy), Hero(Junkrat), Hero(Soldier: 76), Hero(Mei), Hero(Sombra), Hero(Doomfist), Hero(Ashe), Hero(Echo), Hero(
			Junker Queen), Hero(Kiriko), Hero(Ramattra), Hero(Lifeweaver), Hero(Sojourn), Hero(Illari));
		Global.Passive = Array(Custom String("Steadfast"), Custom String("None"), Custom String("None"), Custom String("Energy"),
			Custom String("Eject"), Custom String("None"), Custom String("None"), Custom String("None"), Custom String("Regeneration"),
			Custom String("None"), Custom String("Wall Ride"), Custom String("None"), Custom String("Inspire"), Custom String("None"),
			Custom String("Exo Boots"), Custom String("The Reaping"), Custom String("None"), Custom String("Wall Climb"), Custom String(
			"None"), Custom String("Hover Jets"), Custom String("None"), Custom String("Ironclad"), Custom String("None"), Custom String(
			"Cyber-Agility"), Custom String("None"), Custom String("Total Mayhem"), Custom String("None"), Custom String("None"),
			Custom String("Opportunist"), Custom String("The Best Defence"), Custom String("None"), Custom String("Glide"), Custom String(
			"Adrenaline Rush"), Custom String("Wall Climb"), Custom String("None"), Custom String("Parting Gift"), Custom String("None"));
		Global.Primary_Max = Array(4, 8, 6, 14, 5, 40, 18, 18, 25, 20, 20, 35, 5, 15, 30, 8, 18, 30, 30, 30, 50, 40, 12, 20, 30, 30, 40,
			14, 25, 8, 40, 30, 25, 40, 50, 30, 40, 40);
		Global.Primary_Min = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0);
		Global.Secondary_Max = Array(40, 30, 18, 30, 0, 35, 0, 0, 0, 50, 5, 35, 40, 20, 40, 0, 0, 0, 6, 0, 50, 35, 30, 6, 5, 8, 30, 40, 12,
			18, 40, 20, 15, 30, 20, 30, 50, 20);
		Global.Secondary_Min = Array(5, 8, 6, 14, 0, 5, 0, 0, 0, 20, 0, 15, 7, 0, 0, 0, 0, 0, 0, 0, 10, 0, 12, 0, 0, 0, 4, 14, 6, 0, 10, 0,
			0, 0, 0, 0, 0, 0);
		Global.Ability1_Max = Array(25, 20, 20, 0, 20, 0, 0, 0, 20, 30, 0, 15, 15, 0, 0, 0, 0, 30, 0, 0, 0, 25, 0, 12, 0, 8, 0, 0, 12, 20,
			0, 0, 0, 25, 10, 0, 0, 0);
		Global.Ability1_Min = Array(0, 14, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0);
		Global.Ability2_Max = Array(30, 0, 0, 25, 30, 0, 0, 25, 6, 30, 0, 35, 15, 20, 30, 0, 0, 25, 20, 12, 10, 0, 0, 0, 6, 20, 0, 0, 0, 0,
			30, 12, 6, 20, 20, 25, 25, 0);
		Global.Ability2_Min = Array(0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 6, 0, 0, 0, 0,
			0, 0, 0, 0);
		Global.Mobility_Distance = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 5, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 20, 0, 0, 5,
			0, 0, 0, 0, 12, 8);
		Global.Charge_Time = Array(0, 1.500, 0, 0, 0, 4, 1, 1.200, 0, 4, 1, 0, 0, 0, 1, 0, 0, 1.200, 0, 0, 1.400, 2.500, 1.200, 0, 4, 0, 0,
			0, 0, 1.400, 0.100, 0, 0, 0, 0, 1, 0, 1);
		Global.Use_Ultimate_Max = Array(20, 30, 15, 30, 25, 10, 15, 25, 25, 25, 25, 30, 25, 25, 30, 10, 6, 30, 30, 15, 100, 28, 30, 12, 40,
			15, 30, 25, 18, 8, 30, 30, 20, 30, 20, 30, 50, 30);
		Global.Ultimate_Health = Array(1, 0.350, 1, 1, 1, 1, 1, 1, 1, 0.500, 0.600, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 0.350, 1, 1, 1, 1, 1, 1);
		Global.Ultimate_Targets = Array(3, 1, 2, 3, 3, 3, 1, 3, 3, 3, 3, 1, 0, 2, 3, 2, 1, 2, 1, 2, 0, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2,
			3, 2, 3, 2, 2);
		Global.Ultimate_Target_Team = Array(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 1, 0, 0);
		Global.Ultimate_Max = Array(4, 4, 0, 14, 25, 25, 18, 24, 25, 20, 20, 35, 5, 20, 30, 0, 18, 30, 30, 0, 50, 25, 12, 6, 0, 0, 40, 14,
			25, 3, 40, 30, 25, 40, 50, 30, 30, 40);
		Global.Ultimate_Min = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0);
		Global.Primary_Arc = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.500, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0);
		Global.Secondary_Arc = Array(0, 0, 0, 0.250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.400, 0, 0, 0, 0, 0, 0, 0.500, 0, 0, 0, 0.500, 0, 0, 0,
			0, 0, 0, 0.400, 0, 0, 0, 0, 0);
		Global.Ability1_Arc = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.500, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0);
		Global.Ability2_Arc = Array(0, 0, 0, 0, 0, 0, 0, 0.200, 0, 0, 0, 0.350, 0, 0, 0.400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.500, 0, 0, 0,
			0, 0.400, 0, 0, 0.600, 0.600, 0, 0, 0);
		Global.Ultimate_Arc = Array(0, 0, 0, 0.250, 0, 0, 0, -0.100, 0, 0, 0, 0, 0, 0, 0, 0, 0.050, 0, 0.500, 0, 0, 0, 0, 0, 0, 0.500, 0,
			0.200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		Global.Ultimate_Duration = Array(0, 10, 6, 0, 0, 12, 0, 0, 0, 6, 0, 0, 10, 8, 0, 4, 0, 0, 6, 4, 0, 6, 0, 6, 6, 0, 0, 0, 0, 4, 0,
			10, 3, 12, 15, 10, 0, 4);
		Global.Aim_Predict_Scale = Array(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10);
		Abort If(Global.Can_Hear == False);
		Global.Melee_Sound_Max = Array(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10);
		Global.Primary_Sound_Max = Array(20, 20, 20, 20, 20, 30, 30, 30, 15, 20, 20, 15, 15, 25, 30, 20, 20, 0, 25, 30, 25, 30, 20, 20, 30,
			30, 30, 20, 20, 15, 25, 25, 25, 15, 20, 0, 25, 30);
		Global.Secondary_Sound_Max = Array(0, 0, 30, 30, 15, 0, 0, 0, 15, 15, 15, 0, 0, 20, 30, 0, 0, 0, 20, 25, 0, 20, 12, 20, 30, 0, 30,
			15, 10, 15, 0, 25, 0, 15, 0, 20, 25, 18);
		Global.Ability1_Sound_Max = Array(15, 25, 20, 0, 15, 0, 0, 15, 10, 0, 0, 15, 25, 15, 15, 15, 20, 0, 0, 25, 25, 0, 0, 25, 20, 0, 30,
			25, 0, 15, 20, 25, 25, 15, 30, 10, 20, 20);
		Global.Ability2_Sound_Max = Array(30, 15, 15, 0, 20, 0, 0, 20, 10, 0, 15, 0, 15, 0, 0, 10, 10, 20, 20, 0, 0, 0, 0, 15, 15, 0, 0, 0,
			0, 20, 0, 20, 25, 25, 25, 20, 20, 0);
		Global.Ultimate_Sound_Max = Array(0, 20, 30, 0, 0, 0, 0, 20, 20, 30, 0, 0, 25, 30, 0, 20, 0, 0, 20, 25, 0, 30, 0, 20, 15, 0, 25, 0,
			0, 0, 0, 0, 30, 30, 30, 30, 30, 40);
		Global.Walking_Sound_Max = Array(30, 25, 30, 30, 30, 30, 30, 0, 20, 0, 25, 25, 30, 25, 25, 25, 20, 25, 30, 30, 25, 30, 25, 20, 25,
			25, 25, 25, 20, 30, 25, 0, 25, 20, 25, 25, 25, 25);
		Global.Crouch_Walk_Sound_Max = Array(5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
			0, 5, 5, 5, 5, 5, 5);
	}
}

rule("Gamertags")
{
	event
	{
		Subroutine;
		Gamertags;
	}

	actions
	{
		Global.Gamertags = Array(Custom String("Spiderman318"), Custom String("Spiderman423"), Custom String("Hollywoof423"),
			Custom String("Hollywoof318"), Custom String("Sunpatches"), Custom String("Sunpatches77"), Custom String("Sk366in"),
			Custom String("Breggers537"), Custom String("GenjiMain2019"), Custom String("BastionMain2021"), Custom String("MercyUWU794"),
			Custom String("WorkshopGamer2022"), Custom String("Spiderman31807"), Custom String("Hollywoof31807"), Custom String(
			"MineralMiner2681"), Custom String("CallMeDave2291"), Custom String("GenericDude4378"), Custom String("GirlyGamerXOXO91876"),
			Custom String("ImBatman"), Custom String("Deadpool"), Custom String("Not_Ur_Friend6719"), Custom String("Comp4Life"),
			Custom String("Overwatch2_When5456"), Custom String("Jakey_Bakey"), Custom String("The_BarStool45219"), Custom String(
			"TeamFortressWatch"), Custom String("AI"), Custom String("Robot"), Custom String("Bot"), Custom String(
			"Artificial Intelligence"), Custom String("Dummy2"), Custom String("Sussy_Baka"), Custom String("Patchie"), Custom String(
			"OhhhWhoLivesUnderMyBed"), Custom String("Terminater"), Custom String("Prototype C"), Custom String("OilyWater"),
			Custom String("BlueBlood"), Custom String("FallDude546"), Custom String("KillerMain2022"), Custom String(
			"Toxic_Friendship_GoBye"), Custom String("Toxic_Waste_Disposal"), Custom String("Toxic_DumpSite"), Custom String(
			"Xx_Mercy_xX"), Custom String("CallMeDaddy"), Custom String("CallMeMommy"), Custom String("CallMeSus"), Custom String(
			"CallMe01100010"), Custom String("CallMeAt_18006745210"), Custom String("Stranger_Fans_4"), Custom String(
			"Idk Im Writing 100 of these?!?!"), Custom String("Send Help Plz"), Custom String("ProNoob69"), Custom String("YuffyDuffy329"),
			Custom String("Aimbot4You"), Custom String("HackerMan-801"), Custom String("Slenderdude"), Custom String("Iron_Catto"),
			Custom String("AEG_Rain"), Custom String("Name.EXE"), Custom String("Error 404"), Custom String("Kill.EXE"), Custom String(
			"EXE-Failed"), Custom String("WasteOfSpace"), Custom String("Tangey_Blue3191"), Custom String("DragonDogma"), Custom String(
			"PlayStation5Boii"), Custom String("PS4_4_Life"), Custom String("Clash-Royal4319"), Custom String("Ark.Survival.Dino"),
			Custom String("UnrealEngine5Pog"), Custom String("OW2_Beta_2026"), Custom String("LamarDavis6969"), Custom String(
			"GamerTag.EXE"), Custom String("FunkeyMonk"), Custom String("CoCo"), Custom String("GabeRed"), Custom String("HelenPeg630"),
			Custom String("Friendo3464"), Custom String("DoiKnowYou"), Custom String("SurvivorMain2018"), Custom String("Virgo-Cutie2964"),
			Custom String("Minecrafter-54791"), Custom String("LetsHateThisGame"), Custom String("Humon Disguise"), Custom String(
			"Disguised AI"), Custom String("UrMomGay666"), Custom String("DemonChild666"), Custom String("Angelic555Transcend"),
			Custom String("Super.. Hot.."), Custom String("Well Done Gregory!"), Custom String("Meme5481"), Custom String(
			"PleaseLaugh4700"), Custom String("Tini-TheCat"), Custom String("Kitto-Catto-5471"), Custom String("BoardHouse444"),
			Custom String("IHaveNoFriends"), Custom String("Rick&Morty-S6?"), Custom String("ItsAFriday6682"), Custom String(
			"Triple0-Double2-54"), Custom String("IronBaby420"), Custom String("SpiderBastion42307"), Custom String("X_Simp318"),
			Custom String("YuffBoi2020"), Custom String("BatMan318"), Custom String("FreakVessel22"), Custom String("FunBastion8910"),
			Custom String("ImFreaky2020"), Custom String("SpiderMuffy8910"), Custom String("NickBoi34768"), Custom String("TimeMan_XX"),
			Custom String("IronBlue_XX"), Custom String("NickGamer37481"), Custom String("FunFace6969"), Custom String("Its_Bastion555"),
			Custom String("TheMuffy_XX"), Custom String("TheVessel420"), Custom String("GoodMan001"), Custom String("TheDaddy37481"),
			Custom String("FreakPatch9910"), Custom String("SunTimes423"), Custom String("X_Gamer42307"), Custom String("FreakMan31423"),
			Custom String("FreakVessel005"), Custom String("TheFunny999"), Custom String("FunGamer1891"), Custom String("FunMercy0420"),
			Custom String("GoodMercy666"), Custom String("IronFace37481"), Custom String("Virgo40420"), Custom String("GoodBastion92"),
			Custom String("CallmeName9910"), Custom String("BatPatch.EXE"), Custom String("Error40442307"), Custom String(
			"SpiderDaddy31807"), Custom String("GamerMan37481"), Custom String("ErrorBoi37481"), Custom String("GoodLúcio420"),
			Custom String("AEG_Vessel423"), Custom String("GoodLuffy9910"), Custom String("GamerFreaky_XX"), Custom String("X_Mercy555"),
			Custom String("Its_Baby999"), Custom String("IronFreaky420"), Custom String("TheLúcio69"), Custom String("SunPatch.EXE"),
			Custom String("TimePlease6969"), Custom String("VirgoFreaky34768"), Custom String("CallmeMuffy31807"), Custom String(
			"FiveSimp555"), Custom String("GamerBlue31423"), Custom String("BatDaddy005"), Custom String("ErrorVessel37481"),
			Custom String("Its_Simp31423"), Custom String("CallmeBastion42307"), Custom String("GoodMercy318"), Custom String(
			"JauneMuffy.EXE"), Custom String("XX_Tuffy420"), Custom String("ImBaby_X"), Custom String("ErrorBoi31807"), Custom String(
			"X_Bastion22"), Custom String("DuffyUWU_X"), Custom String("ProUWU_XX"), Custom String("VirgoRain1891"), Custom String(
			"InsymGamer555"), Custom String("GamerPatch555"), Custom String("Its_Funny_X"), Custom String("FiveLuffy.EXE"), Custom String(
			"ImUWU2020"), Custom String("IronFunny720"), Custom String("ErrorMuffy420"), Custom String("FiveDaddy005"), Custom String(
			"TimeMan555"), Custom String("Jaune4048910"), Custom String("VirgoLúcio87431"), Custom String("JauneFunny31807"),
			Custom String("X_Man.EXE"), Custom String("X_Luffy_X"), Custom String("BuffyBoi42307"), Custom String("X_Muffy6969"),
			Custom String("XX_Face_XX"), Custom String("IronGenji37481"), Custom String("NickSimp001"), Custom String("BatVessel22"),
			Custom String("FreakName.EXE"), Custom String("NightBoi6969"), Custom String("XX_Bastion666"), Custom String("GoodLúcio42307"),
			Custom String("NightMercy_XX"), Custom String("XX_Mommy22"), Custom String("NightBoi9910"), Custom String("InsymBoi0420"),
			Custom String("GamerMuffy720"), Custom String("YuffTuffy555"), Custom String("YuffMommy92"), Custom String("SpiderSimp555"),
			Custom String("TheSimp1891"), Custom String("FiveBaby999"), Custom String("VirgoPlease_XX"), Custom String("TimeBlue37481"),
			Custom String("GoodGamer42307"), Custom String("IronMuffy420"), Custom String("GamerDaddy555"), Custom String("ImBastion720"),
			Custom String("FunPatch666"), Custom String("CallmeBaby666"), Custom String("TimeMommy420"), Custom String("TimeMan420"),
			Custom String("ProBaby1891"), Custom String("VirgoGenji22"), Custom String("X_Times1891"), Custom String("YuffSimp31423"),
			Custom String("RedFace92"), Custom String("YuffBastion31807"), Custom String("VirgoUWU31807"), Custom String("SpiderMuffy78"),
			Custom String("GamerName0420"), Custom String("IronFace92"), Custom String("GamerFreaky6969"), Custom String("NickMan999"),
			Custom String("XX_Funny92"), Custom String("Sun404005"), Custom String("DuffyDaddy720"), Custom String("FiveBastion42307"),
			Custom String("TimeBastion.EXE"), Custom String("NightBastion666"), Custom String("VirgoPlease42307"));
	}
}

rule("Hero Set Variables")
{
	event
	{
		Subroutine;
		Hero_Variables;
	}

	actions
	{
		Event Player.Can_Change_Arc = True;
		Event Player.Current_Hero = Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player);
		Event Player.Aim_Predict_Scale = Global.Aim_Predict_Scale[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Passive = Global.Passive[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Primary_Max = Global.Primary_Max[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Primary_Min = Global.Primary_Min[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Secondary_Max = Global.Secondary_Max[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Secondary_Min = Global.Secondary_Min[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Aim_Arc = Global.Primary_Arc[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ability1_Max = Global.Ability1_Max[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Mobility_Distance = Global.Mobility_Distance[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Charging_Time = Global.Charge_Time[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ultimate_Duration = Global.Ultimate_Duration[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Use_Ultimate_Max = Global.Use_Ultimate_Max[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ability1_Min = Global.Ability1_Min[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ability2_Max = Global.Ability2_Max[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ultimate_Health = Global.Ultimate_Health[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ultimate_Targets = Global.Ultimate_Targets[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ability2_Min = Global.Ability2_Min[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ultimate_Target_Team = Global.Ultimate_Target_Team[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)
			] == 0 ? Opposite Team Of(Team Of(Event Player)) : Team Of(Event Player);
		Event Player.Ultimate_Max = Global.Ultimate_Max[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Ultimate_Min = Global.Ultimate_Min[Index Of Array Value(Global.All_Heros, Event Player.Current_Hero)];
		Event Player.Alternative_Form = Empty Array;
		Event Player.Offensive = Empty Array;
		Event Player.Defensive = Empty Array;
		Event Player.Mobility = Empty Array;
		Event Player.Healing = Empty Array;
		Event Player.Secondary_Fire = Empty Array;
		Event Player.Secondary_Offensive = Empty Array;
		Event Player.Use_If_Shield = Empty Array;
		Event Player.Secondary_Defensive = Empty Array;
		Event Player.Secondary_Healing = Empty Array;
		Event Player.Hold = Empty Array;
		Event Player.Confirm = Empty Array;
		Event Player.Toggle = Empty Array;
		Event Player.Cooldown = Empty Array;
		Event Player.Charge = Empty Array;
		Event Player.Resource = Empty Array;
		Event Player.Charging = Empty Array;
		Event Player.Heal_Friendlys = Empty Array;
		If(Is True For Any(Array(Hero(Brigitte), Hero(Doomfist), Hero(Genji), Hero(Junkrat), Hero(Reinhardt), Hero(Roadhog), Hero(Bastion),
			Hero(Hanzo), Hero(Winston), Hero(Junker Queen), Hero(Ramattra), Hero(Sombra)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Offensive, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Ana), Hero(Ashe), Hero(Mercy), Hero(Moira), Hero(Orisa), Hero(Reaper), Hero(Sigma), Hero(Zarya)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Defensive, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Cassidy), Hero(Echo), Hero(Soldier: 76), Hero(Tracer), Hero(Widowmaker), Hero(Winston), Hero(
			Wrecking Ball), Hero(D.Va), Hero(Sojourn), Hero(Illari)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Mobility, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Ashe), Hero(Cassidy), Hero(D.Va), Hero(Doomfist), Hero(Echo), Hero(Junkrat), Hero(Moira), Hero(
			Reinhardt), Hero(Sigma), Hero(Widowmaker), Hero(Hanzo), Hero(Zenyatta), Hero(Ana), Hero(Orisa), Hero(Junker Queen), Hero(
			Ramattra), Hero(Sojourn)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Offensive, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Baptiste), Hero(Genji), Hero(Pharah), Hero(Winston), Hero(Wrecking Ball), Hero(Torbjörn), Hero(Mei),
			Hero(Doomfist), Hero(Orisa)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Defensive, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Reaper), Hero(Lúcio), Hero(Sombra)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Mobility, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Baptiste), Hero(Mei)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Healing, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Ana), Hero(Roadhog), Hero(Soldier: 76), Hero(Tracer), Hero(Kiriko)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Healing, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Cassidy), Hero(Genji), Hero(Mei), Hero(Roadhog), Hero(Symmetra), Hero(Torbjörn), Hero(Zarya), Hero(
			Zenyatta), Hero(Kiriko), Hero(Lifeweaver), Hero(Winston), Hero(Illari)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Secondary_Fire, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(Doomfist), Hero(Echo), Hero(Junkrat), Hero(Lúcio), Hero(Soldier: 76), Hero(Sombra), Hero(Reinhardt),
			Hero(Brigitte), Hero(Junker Queen), Hero(Bastion), Hero(Orisa), Hero(Sojourn)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Secondary_Offensive, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(D.Va), Hero(Sigma), Hero(Ramattra)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Secondary_Defensive, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Secondary_Healing, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(Lúcio)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Hold, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Confirm, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Bastion), Hero(Mei), Hero(Reaper), Hero(Wrecking Ball), Hero(Hanzo), Hero(Mercy), Hero(D.Va), Hero(
			Soldier: 76), Hero(Ramattra), Hero(Orisa)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Toggle, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Hold, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Mei), Hero(Reaper), Hero(Ashe)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Confirm, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Genji), Hero(Moira), Hero(Tracer), Hero(Widowmaker), Hero(Wrecking Ball), Hero(Hanzo), Hero(Mei),
			Hero(Orisa)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Toggle, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Brigitte), Hero(D.Va), Hero(Doomfist), Hero(Reinhardt), Hero(Sombra), Hero(Symmetra), Hero(Zenyatta),
			Hero(Lifeweaver), Hero(Winston), Hero(Illari)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Hold, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Confirm, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Toggle, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Hold, Append To Array, Button(Ultimate));
		End;
		If(Is True For Any(Array(Hero(Baptiste), Hero(Cassidy), Hero(Junkrat), Hero(Sigma), Hero(Symmetra), Hero(Lifeweaver), Hero(Orisa)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Confirm, Append To Array, Button(Ultimate));
		End;
		If(Is True For Any(Array(Hero(Ramattra)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Toggle, Append To Array, Button(Ultimate));
		End;
		If(Is True For All(Array(Hero(Bastion), Hero(Junkrat), Hero(Lúcio), Hero(Soldier: 76), Hero(Symmetra), Hero(Tracer), Hero(
			Wrecking Ball), Hero(Zenyatta)), Event Player.Current_Hero != Current Array Element));
			Modify Player Variable(Event Player, Cooldown, Append To Array, Button(Ability 1));
		End;
		If(Is True For All(Array(Hero(Bastion), Hero(Brigitte), Hero(Zenyatta)), Event Player.Current_Hero != Current Array Element));
			Modify Player Variable(Event Player, Cooldown, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Brigitte), Hero(Doomfist), Hero(Echo), Hero(Orisa), Hero(Reinhardt), Hero(Sigma), Hero(Soldier: 76),
			Hero(Sombra), Hero(Bastion), Hero(Junker Queen)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Cooldown, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(Junkrat), Hero(Symmetra), Hero(Tracer)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charge, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Brigitte)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charge, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charge, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Resource, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Resource, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(D.Va), Hero(Pharah), Hero(Illari)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Resource, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charging, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charging, Append To Array, Button(Ability 2));
		End;
		If(Is True For Any(Array(Hero(Doomfist), Hero(Sigma), Hero(Symmetra), Hero(Zenyatta), Hero(Winston)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charging, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(Cassidy), Hero(Orisa)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charging, Append To Array, Button(Ultimate));
		End;
		If(Is True For Any(Array(Hero(Ashe), Hero(Hanzo), Hero(Illari)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Charging, Append To Array, Button(Primary Fire));
		End;
		If(Is True For Any(Array(Hero(Ana), Hero(Ashe), Hero(Baptiste), Hero(Bastion), Hero(Brigitte), Hero(Cassidy), Hero(D.Va), Hero(
			Moira), Hero(Reinhardt), Hero(Soldier: 76), Hero(Sombra), Hero(Symmetra), Hero(Tracer), Hero(Widowmaker), Hero(Winston), Hero(
			Wrecking Ball), Hero(Zarya), Hero(Hanzo), Hero(Junker Queen), Hero(Illari)),
			Event Player.Current_Hero == Current Array Element));
			Event Player.Aim_Predict = 0.050;
		End;
		If(Is True For Any(Array(Hero(Doomfist), Hero(Echo), Hero(Genji), Hero(Lúcio), Hero(Mei), Hero(Orisa), Hero(Sigma), Hero(Torbjörn),
			Hero(Zenyatta), Hero(Mercy), Hero(Sojourn), Hero(Ramattra), Hero(Kiriko), Hero(Lifeweaver)),
			Event Player.Current_Hero == Current Array Element));
			Event Player.Aim_Predict = 0.225;
		End;
		If(Is True For Any(Array(Hero(Pharah), Hero(Junkrat)), Event Player.Current_Hero == Current Array Element));
			Event Player.Aim_Predict = 0.400;
		End;
		If(Is True For Any(Array(Hero(Bastion), Hero(Lúcio), Hero(Wrecking Ball), Hero(Ramattra)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Alternative_Form, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Alternative_Form, Append To Array, Button(Ability 2));
		End;
		If(Is True For All(Array(Hero(Ashe), Hero(Illari)), Event Player.Current_Hero != Current Array Element));
			Modify Player Variable(Event Player, Hold, Append To Array, Button(Primary Fire));
		End;
		If(Is True For Any(Array(Hero(D.Va)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Alternative_Form, Append To Array, Custom String("Passive"));
		End;
		If(Is True For All(Array(Hero(Ana), Hero(Brigitte), Hero(Hanzo), Hero(Junkrat), Hero(Roadhog)),
			Event Player.Current_Hero != Current Array Element));
			Modify Player Variable(Event Player, Use_If_Shield, Append To Array, Button(Ability 1));
		End;
		If(Is True For All(Array(Hero(Ana), Hero(Ashe), Hero(Cassidy), Hero(Echo), Hero(Sigma), Hero(Zenyatta)),
			Event Player.Current_Hero != Current Array Element));
			Modify Player Variable(Event Player, Use_If_Shield, Append To Array, Button(Ability 2));
		End;
		If(Is True For All(Array(Hero(Echo), Hero(Lúcio), Hero(Orisa), Hero(Soldier: 76), Hero(Sombra)),
			Event Player.Current_Hero != Current Array Element));
			Modify Player Variable(Event Player, Use_If_Shield, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(Ana), Hero(Kiriko), Hero(Lifeweaver), Hero(Mercy), Hero(Moira)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Heal_Friendlys, Append To Array, Button(Primary Fire));
		End;
		If(Is True For Any(Array(Hero(Baptiste), Hero(Illari)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Heal_Friendlys, Append To Array, Button(Secondary Fire));
		End;
		If(Is True For Any(Array(Hero(Baptiste), Hero(Kiriko)), Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Heal_Friendlys, Append To Array, Button(Ability 1));
		End;
		If(Is True For Any(Array(Hero(Ana), Hero(Baptiste), Hero(Brigitte), Hero(Kiriko), Hero(Lifeweaver), Hero(Lúcio), Hero(Moira)),
			Event Player.Current_Hero == Current Array Element));
			Modify Player Variable(Event Player, Heal_Friendlys, Append To Array, Button(Ability 2));
		End;
	}
}

rule("Start AI Facing")
{
	event
	{
		Subroutine;
		AI_Start_Facing;
	}

	actions
	{
		If(Global.AI_Aim_Type == 0);
			Start Facing(Event Player, Entity Exists(First Of(Event Player.Target_Order)) ? Direction Towards(Eye Position(Event Player),
				Eye Position(First Of(Event Player.Target_Order))) : (Is In Line of Sight(Eye Position(Event Player),
				Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? Direction Towards(Eye Position(Event Player),
				Event Player.Walk_To_Position) : Direction From Angles(Horizontal Angle From Direction(Direction Towards(Eye Position(
				Event Player), Event Player.Current_Node)), 0)), Is True For Any(Array(Has Status(Event Player, Knocked Down), Has Status(
				Event Player, Asleep), Has Status(Event Player, Frozen), Has Status(Event Player, Stunned)), Current Array Element == True)
				? 0 : (Magnitude Of(Throttle Of(Event Player)) == 0 && !Entity Exists(First Of(Event Player.Target_Order))
				? 0 : Global.AI_Turn_Speed), To World, Direction and Turn Rate);
		Else If(Global.AI_Aim_Type == 1);
			Start Facing(Event Player, Entity Exists(First Of(Event Player.Target_Order)) ? Direction From Angles(
				Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))
				+ Velocity Of(First Of(Event Player.Target_Order)) * Event Player.Aim_Predict * (Distance Between(Event Player, First Of(
				Event Player.Target_Order)) / Event Player.Aim_Predict_Scale))), Vertical Angle From Direction(Direction Towards(Eye Position(
				Event Player), Eye Position(First Of(Event Player.Target_Order))))) : (Is In Line of Sight(Eye Position(Event Player),
				Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? Direction Towards(Eye Position(Event Player),
				Event Player.Walk_To_Position) : Direction From Angles(Horizontal Angle From Direction(Direction Towards(Eye Position(
				Event Player), Event Player.Current_Node)), 0)), Is True For Any(Array(Has Status(Event Player, Knocked Down), Has Status(
				Event Player, Asleep), Has Status(Event Player, Frozen), Has Status(Event Player, Stunned)), Current Array Element == True)
				? 0 : (Magnitude Of(Throttle Of(Event Player)) == 0 && !Entity Exists(First Of(Event Player.Target_Order))
				? 0 : Global.AI_Turn_Speed), To World, Direction and Turn Rate);
		Else If(Global.AI_Aim_Type == 2);
			Start Facing(Event Player, Entity Exists(First Of(Event Player.Target_Order)) ? Direction From Angles(
				Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player), Eye Position(First Of(
				Event Player.Target_Order)))), Vertical Angle From Direction(Direction Towards(Eye Position(Event Player),
				Event Player.Aim_Arc > 0 ? First Of(Event Player.Target_Order) : Eye Position(First Of(Event Player.Target_Order))))
				+ Distance Between(Event Player, First Of(Event Player.Target_Order)) * Event Player.Aim_Arc * -1) : (Is In Line of Sight(
				Eye Position(Event Player), Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? Direction Towards(Eye Position(
				Event Player), Event Player.Walk_To_Position) : Direction From Angles(Horizontal Angle From Direction(Direction Towards(
				Eye Position(Event Player), Event Player.Current_Node)), 0)), Is True For Any(Array(Has Status(Event Player, Knocked Down),
				Has Status(Event Player, Asleep), Has Status(Event Player, Frozen), Has Status(Event Player, Stunned)),
				Current Array Element == True) ? 0 : (Magnitude Of(Throttle Of(Event Player)) == 0 && !Entity Exists(First Of(
				Event Player.Target_Order)) ? 0 : Global.AI_Turn_Speed), To World, Direction and Turn Rate);
		Else;
			Start Facing(Event Player, Entity Exists(First Of(Event Player.Target_Order)) ? Direction From Angles(
				Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order))
				+ Velocity Of(First Of(Event Player.Target_Order)) * Event Player.Aim_Predict * (Distance Between(Event Player, First Of(
				Event Player.Target_Order)) / Event Player.Aim_Predict_Scale))), Vertical Angle From Direction(Direction Towards(Eye Position(
				Event Player), Event Player.Aim_Arc > 0 ? First Of(Event Player.Target_Order) : Eye Position(First Of(
				Event Player.Target_Order)))) + Distance Between(Event Player, First Of(Event Player.Target_Order))
				* Event Player.Aim_Arc * -1) : (Is In Line of Sight(Eye Position(Event Player), Event Player.Walk_To_Position,
				Barriers Do Not Block LOS) ? Direction Towards(Eye Position(Event Player), Event Player.Walk_To_Position)
				: Direction From Angles(Horizontal Angle From Direction(Direction Towards(Eye Position(Event Player),
				Event Player.Current_Node)), 0)), Is True For Any(Array(Has Status(Event Player, Knocked Down), Has Status(Event Player,
				Asleep), Has Status(Event Player, Frozen), Has Status(Event Player, Stunned)), Current Array Element == True) ? 0 : (
				Magnitude Of(Throttle Of(Event Player)) == 0 && !Entity Exists(First Of(Event Player.Target_Order))
				? 0 : Global.AI_Turn_Speed), To World, Direction and Turn Rate);
		End;
	}
}

rule("AI Difficulty")
{
	event
	{
		Subroutine;
		AI_Difficulty;
	}

	actions
	{
		If(Global.AI_Difficulty == 1);
			Global.AI_Aim_Type = 0;
			Global.AI_Turn_Speed = 100;
			Global.Targeting_Type = 0;
			Global.Use_Complex_Abilitys = False;
			Global.Can_Hear = False;
			Global.Team_Based_Targeting = True;
			Global.Invisible_Targeting = 3;
			Global.Ignore_Abilitys = True;
		Else If(Global.AI_Difficulty == 2);
			Global.AI_Aim_Type = 2;
			Global.AI_Turn_Speed = 225;
			Global.Targeting_Type = 1;
			Global.Use_Complex_Abilitys = False;
			Global.Can_Hear = False;
			Global.Team_Based_Targeting = True;
			Global.Invisible_Targeting = 1;
			Global.Ignore_Abilitys = True;
		Else If(Global.AI_Difficulty == 2);
			Global.AI_Aim_Type = 3;
			Global.AI_Turn_Speed = 320;
			Global.Targeting_Type = 3;
			Global.Use_Complex_Abilitys = True;
			Global.Can_Hear = True;
			Global.Team_Based_Targeting = True;
			Global.Invisible_Targeting = 0;
			Global.Ignore_Abilitys = False;
		End;
	}
}

rule("Nodes Setup")
{
	event
	{
		Subroutine;
		Node_Setup;
	}

	actions
	{
		If(Current Map == Map(Junkertown));
			Call Subroutine(Junkertown);
		End;
		If(Current Map == Map(Dorado));
			Call Subroutine(Dorado);
		End;
		If(Current Map == Map(Route 66));
			Call Subroutine(Route66);
		End;
		If(Current Map == Map(Havana));
			Call Subroutine(Havava);
		End;
		For Global Variable(Jump_Index, 0, Count Of(Global.Jump_End), 1);
			Create Projectile(Orb Projectile, Null, Global.Jump_End[Global.Jump_Index], Down, To World, Damage, All Teams, 0, 1, 8,
				Bad Explosion, Explosion Sound, 0, 50, 1, 0, 0, 0);
		End;
	}
}

rule("Junkertown")
{
	event
	{
		Subroutine;
		Junkertown;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(65.355, 15.510, -79.231), Vector(54.037, 10.658, -64.396), Vector(51.267, 10.550, -85.200),
			Vector(57.519, 10.550, -88.405), Vector(59.710, 10.550, -78.316), Vector(63.226, 13.550, -64.733), Vector(45.345, 17.550,
			-70.797), Vector(44.998, 17.550, -77.319), Vector(41.930, 17.560, -80.075), Vector(20.274, 16.531, -86.297), Vector(18.925,
			16.523, -96.907), Vector(33.421, 16.558, -97.905), Vector(33.018, 16.758, -89.582), Vector(25.258, 11.664, -91.262), Vector(
			39.271, 10.360, -93.485), Vector(36.452, 10.501, -85.266), Vector(33.091, 10.408, -101.243), Vector(12.539, 8.537, -96.724),
			Vector(16.853, 8.881, -87.769), Vector(3.011, 8.423, -97.359), Vector(-3.126, 8.737, -91.768), Vector(-0.577, 8.570, -84.938),
			Vector(3.280, 8.570, -80.607), Vector(9.395, 8.570, -85.396), Vector(-5.113, 8.570, -79.192), Vector(-1.449, 8.556, -73.119),
			Vector(5.571, 8.551, -77.493), Vector(-1.073, 8.551, -68.574), Vector(-4.676, 8.755, -69.938), Vector(10.490, 12.568, -36.143),
			Vector(9.092, 12.591, -33.693), Vector(15.559, 12.500, -41.724), Vector(0.843, 12.613, -42.537), Vector(10.601, 12.500,
			-49.642), Vector(-3.027, 12.617, -63.756), Vector(3.327, 14.051, -79.635), Vector(6.754, 14.051, -83.343), Vector(1.804,
			14.051, -85.088), Vector(12.215, 14.051, -86.162), Vector(9.693, 13.787, -73.862), Vector(18.268, 14.657, -65.055), Vector(
			21.177, 14.657, -54.993), Vector(25.902, 14.657, -58.610), Vector(30.883, 14.657, -59.550), Vector(27.397, 14.657, -68.750),
			Vector(22.746, 14.550, -61.280), Vector(24.662, 10.550, -61.221), Vector(26.651, 10.314, -56.256), Vector(34.293, 10.448,
			-58.204), Vector(31.448, 10.509, -64.029), Vector(37.593, 10.480, -54.271), Vector(41.807, 11.033, -58.602), Vector(-39.257,
			5.821, -11.533), Vector(-46.272, 5.821, -12.402), Vector(-44.504, 5.816, -17.072), Vector(-38.094, 5.588, -15.976), Vector(
			-26.193, 14.309, -64.672), Vector(-28.708, 14.032, -68.334), Vector(-31.935, 14.074, -73.677), Vector(-35.784, 14.030,
			-63.390), Vector(-33.866, 14.008, -60.023), Vector(-45.655, 14.055, -65.227), Vector(-45.254, 14.041, -69.936), Vector(-39.994,
			14.527, -56.441), Vector(-16.534, 7.143, -51.295), Vector(-11.238, 7.299, -46.290), Vector(-13.720, 8.607, -62.398), Vector(
			-8.042, 8.607, -62.633), Vector(-2.704, 8.607, -55.874), Vector(14.046, 8.444, -54.995), Vector(18.829, 8.556, -50.565),
			Vector(17.264, 8.352, -45.139), Vector(11.397, 8.540, -40.293), Vector(6.098, 8.557, -45.349), Vector(21.904, 8.401, -38.567),
			Vector(15.581, 8.148, -31.449), Vector(10.143, 8.185, -29.953), Vector(4.341, 8.268, -33.595), Vector(0.057, 7.307, -30.742),
			Vector(-0.956, 7.984, -36.420), Vector(-5.572, 7.045, -34.362), Vector(-6.837, 6.434, -28.669), Vector(-11.653, 6.668,
			-30.410), Vector(-13.271, 6.600, -25.698), Vector(-16.945, 6.623, -29.813), Vector(-20.795, 6.281, -23.318), Vector(-23.017,
			6.530, -30.437), Vector(-29.200, 6.045, -26.777), Vector(-30.222, 5.758, -21.313), Vector(-29.259, 5.535, -14.136), Vector(
			-28.743, 5.624, -7.067), Vector(-36.248, 5.819, -24.854), Vector(-43.394, 6.169, -25.724), Vector(-48.962, 6.555, -26.080),
			Vector(-41.580, 6.062, -32.623), Vector(-35.073, 6.183, -33.718), Vector(-28.357, 6.399, -32.167), Vector(-30.912, 6.359,
			-38.162), Vector(-38.868, 6.150, -40.215), Vector(-45.774, 5.952, -41.195), Vector(-40.789, 6.028, -46.238), Vector(-48.923,
			5.946, -44.325), Vector(-51.811, 6.064, -49.151), Vector(-26.885, 6.263, -64.834), Vector(-29.891, 6.030, -69.106), Vector(
			-25.210, 6.030, -68.606), Vector(-18.542, 6.031, -72.291), Vector(-14.724, 8.030, -85.847), Vector(-11.371, 8.030, -93.894),
			Vector(-15.926, 8.030, -100.990), Vector(-20.739, 8.034, -97.953), Vector(-34.621, 3.030, -134.248), Vector(-42.082, 3.058,
			-133.626), Vector(-42.271, 14.077, -80.354), Vector(-47.438, 14.092, -88.366), Vector(-38.973, 15.056, -93.173), Vector(
			-30.585, 15.032, -98.784), Vector(-25.132, 15.032, -102.126), Vector(-24.336, 15.030, -107.540), Vector(-30.501, 15.030,
			-115.698), Vector(-36.608, 15.137, -119.774), Vector(-44.066, 15.068, -117.402), Vector(-46.102, 15.068, -112.625), Vector(
			-52.407, 15.118, -115.090), Vector(-59.803, 16.030, -113.457), Vector(-59.026, 16.263, -109.552), Vector(-20.002, 15.030,
			-100.059), Vector(-17.903, 15.030, -95.630), Vector(-21.639, 15.054, -90.517), Vector(-49.130, 6.064, -60.328), Vector(-50.867,
			6.064, -64.220), Vector(-52.552, 6.064, -70.005), Vector(-52.977, 6.032, -76.822), Vector(-42.294, 6.032, -83.618), Vector(
			-61.866, 14.922, -147.387), Vector(-66.724, 14.922, -144.229), Vector(-67.482, 14.922, -148.411), Vector(-76.261, 15.040,
			-144.734), Vector(-82.526, 15.040, -148.411), Vector(-86.375, 15.040, -142.380), Vector(-80.053, 15.040, -138.269), Vector(
			-94.348, 14.920, -135.576), Vector(-95.857, 14.920, -142.126), Vector(-88.359, 14.995, -156.438), Vector(-80.841, 14.995,
			-157.759), Vector(-81.965, 12.795, -132.456), Vector(-76.476, 12.959, -133.340), Vector(-78.635, 5.210, -130.831), Vector(
			-79.922, 5.050, -135.112), Vector(-101.421, 13.987, -162.213), Vector(-105.820, 13.987, -153.916), Vector(-101.038, 14.153,
			-151.296), Vector(-110.525, 13.987, -147.848), Vector(-109.954, 13.987, -142.783), Vector(-106.890, 13.987, -136.226), Vector(
			-101.113, 14.591, -137.677), Vector(-88.310, 8.987, -99.070), Vector(-77.306, 7.987, -106.053), Vector(-79.694, 7.987,
			-118.825), Vector(-106.559, 7.987, -107.931), Vector(-108.745, 7.987, -118.025), Vector(-111.829, 7.987, -126.705), Vector(
			-110.751, 8.218, -130.713), Vector(-108.959, 7.987, -135.129), Vector(-103.070, 8.218, -136.604), Vector(-113.837, 7.987,
			-106.065), Vector(-109.283, 11.987, -91.285), Vector(-100.686, 11.987, -93.113), Vector(-98.401, 11.737, -83.688), Vector(
			-93.739, 11.741, -80.996), Vector(-91.769, 11.737, -85.903), Vector(-93.213, 11.987, -95.028), Vector(-92.993, 8.987,
			-185.128), Vector(-85.313, 9.170, -182.330), Vector(-81.704, 8.987, -178.545), Vector(-79.828, 8.987, -171.896), Vector(
			-99.899, 8.987, -180.500), Vector(-97.940, 8.987, -170.056), Vector(-96.285, 8.987, -162.849), Vector(-86.760, 8.985,
			-163.207), Vector(-80.936, 8.985, -166.465), Vector(-73.539, 9.155, -165.677), Vector(-62.339, 8.970, -164.759), Vector(
			-57.396, 8.970, -156.104), Vector(-64.298, 9.213, -99.182), Vector(-68.331, 8.981, -102.686), Vector(-70.807, 8.981, -113.363),
			Vector(-67.358, 9.213, -118.304), Vector(-60.243, 8.996, -92.751), Vector(-53.302, 8.988, -93.055), Vector(-57.300, 9.223,
			-87.542), Vector(-53.462, 9.058, -86.192), Vector(-44.460, 9.277, -93.825), Vector(-43.608, 9.032, -90.304), Vector(-65.843,
			11.032, -78.883), Vector(-69.913, 11.468, -75.137), Vector(-68.299, 12.030, -70.509), Vector(-53.776, 12.030, -73.360), Vector(
			-60.897, 12.030, -71.758), Vector(-63.334, 12.032, -63.931), Vector(-47.521, 8.997, -110.364), Vector(-40.568, 8.748,
			-112.599), Vector(-49.748, 8.922, -115.642), Vector(-50.791, 8.920, -123.300), Vector(-55.319, 8.925, -128.999), Vector(
			-67.218, 14.151, -118.209), Vector(-70.914, 13.981, -114.897), Vector(-72.538, 13.981, -108.094), Vector(-70.230, 13.981,
			-101.030), Vector(-65.146, 13.833, -103.267), Vector(-55.513, 14.030, -86.161), Vector(-56.967, 13.983, -90.734), Vector(
			-53.355, 13.983, -92.871), Vector(-63.203, 13.981, -90.988), Vector(-65.137, 14.066, -94.667));
		Global.Healthkits = Array(Vector(-9.312, 8.607, -66.112), Vector(8.910, 8.583, -35.734), Vector(0.754, 8.570, -82.368), Vector(
			-25.146, 6.522, -34.392), Vector(-21.914, 8.030, -104.845), Vector(-16.253, 15.030, -94.302), Vector(-38.819, 6.030, -86.015),
			Vector(-50.753, 8.920, -133.182), Vector(-78.151, 5.100, -129.274), Vector(-109.884, 7.987, -139.071), Vector(-76.060, 8.987,
			-168.462), Vector(-73.655, 8.981, -112.986), Vector(-41.843, 9.030, -88.021));
		Global.ObjectiveA_Nodes = Array(Vector(27.814, 10.580, -78.051), Vector(31.903, 10.542, -78.693), Vector(24.619, 10.165, -77.946),
			Vector(22.238, 9.286, -77.836), Vector(19.889, 8.662, -77.685), Vector(16.878, 8.588, -77.184), Vector(13.569, 8.395, -76.192),
			Vector(10.063, 8.378, -74.920), Vector(10.352, 8.546, -70.860), Vector(9.468, 8.569, -67.688), Vector(8.711, 8.463, -63.798),
			Vector(8.439, 8.376, -59.982), Vector(8.795, 8.461, -55.958), Vector(6.954, 8.426, -52.663), Vector(4.310, 8.296, -50.369),
			Vector(1.604, 8.287, -47.927), Vector(-1.085, 8.301, -45.573), Vector(-4.642, 7.984, -44.096), Vector(-7.031, 7.322, -41.656),
			Vector(-9.834, 6.639, -39.358), Vector(-12.818, 6.422, -38.039), Vector(-16.188, 6.160, -38.403), Vector(-19.796, 6.117,
			-38.740), Vector(-22.363, 6.080, -39.653), Vector(-25.139, 6.065, -41.106), Vector(-28.344, 5.980, -43.191), Vector(-30.706,
			5.978, -45.267), Vector(-33.199, 5.990, -46.964), Vector(-35.437, 5.979, -50.103), Vector(-37.546, 5.985, -52.431), Vector(
			-39.585, 5.980, -55.867), Vector(34.828, 10.500, -80.771), Vector(34.060, 10.461, -83.920), Vector(31.100, 10.589, -85.518),
			Vector(27.921, 10.629, -84.573), Vector(24.989, 10.499, -83.924), Vector(22.811, 9.779, -83.006), Vector(19.696, 8.578,
			-82.063), Vector(16.947, 8.529, -81.315), Vector(13.999, 8.586, -80.715), Vector(12.010, 8.594, -79.186), Vector(9.626, 8.557,
			-77.487), Vector(7.707, 8.555, -75.636), Vector(5.892, 8.553, -73.749), Vector(4.524, 8.551, -71.636), Vector(3.597, 8.551,
			-68.860), Vector(2.989, 8.551, -66.280), Vector(3.641, 8.551, -63.385), Vector(4.618, 8.555, -60.451), Vector(5.355, 8.561,
			-58.941), Vector(5.688, 8.395, -55.497), Vector(2.813, 8.483, -53.565), Vector(0.854, 8.427, -51.610), Vector(-1.520, 8.351,
			-49.821), Vector(-3.848, 8.399, -47.800), Vector(-6.087, 8.231, -46.591), Vector(-8.768, 7.614, -44.868), Vector(-11.064,
			6.865, -43.044), Vector(-13.659, 6.474, -43.004), Vector(-16.878, 6.158, -43.345), Vector(-20.139, 6.026, -45.215), Vector(
			-23.306, 6.008, -47.534), Vector(-25.651, 5.999, -49.306), Vector(-27.840, 5.979, -50.981), Vector(-30.216, 5.979, -52.801),
			Vector(-32.529, 5.979, -55.364), Vector(-34.232, 5.979, -57.751), Vector(-41.430, 6.237, -59.303), Vector(-42.914, 6.237,
			-61.937), Vector(-44.160, 5.962, -64.388), Vector(-45.566, 5.894, -67.189), Vector(-47.010, 5.899, -70.073), Vector(-45.770,
			5.899, -73.622), Vector(-43.036, 5.899, -75.161), Vector(-40.192, 6.037, -76.701), Vector(-37.208, 6.566, -78.415), Vector(
			-35.494, 6.932, -79.681), Vector(-32.812, 7.465, -81.431), Vector(-30.952, 7.783, -83.163), Vector(-28.437, 7.850, -85.097),
			Vector(-28.471, 7.850, -88.379), Vector(-29.369, 7.848, -91.633), Vector(-31.363, 7.829, -94.416), Vector(-33.071, 7.786,
			-97.700), Vector(-35.310, 7.788, -100.428), Vector(-38.708, 8.029, -101.362), Vector(-42.555, 8.805, -100.647), Vector(-46.538,
			8.820, -98.773), Vector(-50.540, 8.816, -97.168), Vector(-54.208, 8.816, -96.844), Vector(-58.040, 8.820, -98.468), Vector(
			-60.459, 8.842, -101.549), Vector(-61.488, 8.860, -105.271), Vector(-62.007, 8.874, -107.854), Vector(-36.658, 6.235, -62.884),
			Vector(-37.973, 6.235, -65.227), Vector(-39.457, 5.857, -67.798), Vector(-40.502, 5.893, -70.341), Vector(-39.454, 5.900,
			-73.104), Vector(-36.112, 6.294, -74.741), Vector(-33.123, 6.863, -75.852), Vector(-30.491, 7.417, -77.198), Vector(-27.500,
			7.737, -78.634), Vector(-25.418, 7.840, -80.686), Vector(-23.397, 7.855, -84.168), Vector(-22.470, 7.851, -88.528), Vector(
			-23.333, 7.980, -92.877), Vector(-25.141, 7.981, -96.599), Vector(-27.051, 7.986, -100.173), Vector(-29.229, 7.978, -103.472),
			Vector(-32.109, 7.855, -105.905), Vector(-35.429, 7.939, -107.440), Vector(-39.158, 8.279, -107.684), Vector(-42.854, 8.707,
			-106.618), Vector(-46.342, 8.820, -105.426), Vector(-49.748, 8.830, -104.249), Vector(-53.279, 8.828, -103.789), Vector(
			-54.929, 8.993, -106.210), Vector(-55.360, 9.016, -109.415), Vector(-56.332, 9.055, -113.210), Vector(-57.070, 9.055,
			-116.036), Vector(-57.860, 9.012, -119.092), Vector(-58.548, 8.890, -121.946), Vector(-59.310, 8.860, -125.500), Vector(
			-59.900, 8.663, -128.935), Vector(-60.588, 8.089, -132.243), Vector(-61.260, 7.904, -135.412), Vector(-62.020, 7.912,
			-138.933), Vector(-62.763, 7.900, -142.375), Vector(-63.413, 7.907, -145.388), Vector(-64.082, 7.907, -148.486), Vector(
			-65.532, 7.828, -151.655), Vector(-67.462, 7.821, -154.043), Vector(-70.006, 7.807, -155.918), Vector(-72.930, 7.838,
			-157.119), Vector(-76.261, 7.738, -157.299), Vector(-79.382, 7.738, -156.764), Vector(-82.824, 7.733, -156.022), Vector(
			-86.095, 7.742, -155.354), Vector(-89.193, 7.738, -154.720), Vector(-91.933, 7.771, -154.093), Vector(-95.056, 7.733,
			-152.335), Vector(-97.273, 7.745, -150.088), Vector(-99.020, 7.738, -147.344), Vector(-99.603, 7.701, -144.055), Vector(
			-99.555, 7.685, -140.800), Vector(-98.924, 7.519, -137.360), Vector(-98.173, 6.960, -133.960), Vector(-97.457, 6.880,
			-130.558), Vector(-96.971, 6.920, -127.255), Vector(-96.482, 6.920, -123.860), Vector(-95.962, 6.981, -120.557), Vector(
			-95.469, 6.981, -117.424), Vector(-93.866, 6.920, -114.345), Vector(-62.998, 9.055, -112.165), Vector(-63.561, 9.055,
			-114.953), Vector(-64.060, 8.911, -117.588), Vector(-64.634, 8.754, -120.429), Vector(-65.356, 8.755, -123.785), Vector(
			-66.181, 8.456, -127.635), Vector(-66.920, 7.798, -131.199), Vector(-67.746, 7.696, -135.063), Vector(-68.562, 7.695,
			-138.850), Vector(-69.263, 7.695, -142.120), Vector(-70.115, 7.697, -146.078), Vector(-71.997, 7.725, -149.466), Vector(
			-75.298, 7.793, -150.798), Vector(-78.939, 7.693, -150.631), Vector(-82.669, 7.637, -149.951), Vector(-86.718, 7.675,
			-149.086), Vector(-90.529, 7.681, -148.019), Vector(-93.209, 7.723, -144.906), Vector(-93.504, 7.696, -140.979), Vector(
			-92.893, 7.182, -136.923), Vector(-92.232, 6.707, -133.072), Vector(-91.651, 6.921, -129.650), Vector(-91.020, 6.921,
			-126.187), Vector(-90.320, 6.921, -122.571), Vector(-89.915, 6.920, -115.741), Vector(-89.353, 6.983, -119.724));
		Global.ObjectiveB_Nodes = Array();
		Global.Chokepoint = Array();
		Global.Staircase_Top = Array(Vector(69.425, 13.550, -67.106), Vector(47.542, 17.550, -63.583), Vector(47.820, 11.550, -70.031),
			Vector(45.465, 11.550, -81.574), Vector(50.979, 11.550, -93.762), Vector(48.771, 11.579, -93.706), Vector(39.714, 11.550,
			-76.404), Vector(40.468, 11.550, -79.276), Vector(41.025, 11.555, -69.630), Vector(40.642, 11.550, -63.244), Vector(16.463,
			14.670, -68), Vector(-2.390, 14.053, -87.547), Vector(25.014, 11.664, -94.898), Vector(25.240, 11.664, -88.926), Vector(31.802,
			11.651, -92.593), Vector(-18.471, 8.054, -67.697), Vector(-9.719, 12.369, -70.263), Vector(-8.405, 12.326, -50.181), Vector(
			3.279, 13.796, -54.430), Vector(5.813, 13.797, -51.656), Vector(11.984, 12.459, -34.563), Vector(-3.812, 14.051, -75.120),
			Vector(19.574, 10.550, -62.632), Vector(7.565, 7.959, -28.069), Vector(10.464, 7.632, -24.472), Vector(-22.500, 5.493,
			-10.755), Vector(-24.021, 5.505, -15.745), Vector(-48.731, 11.038, -39.247), Vector(-51.400, 12.030, -49.316), Vector(-43.098,
			14.030, -59.534), Vector(-21.692, 12.561, -75.563), Vector(-27.323, 14.032, -72.099), Vector(-25.393, 14.030, -69.581), Vector(
			-25.764, 7.848, -76.499), Vector(-15.434, 8.030, -80.613), Vector(-19.099, 8.058, -109.405), Vector(-25.442, 6.030, -119.723),
			Vector(-25.432, 15.032, -110.986), Vector(-41.033, 9.057, -117.053), Vector(-28.379, 14.973, -106.248), Vector(-43.093, 14.092,
			-84.506), Vector(-39.426, 15.068, -121.749), Vector(-62.967, 16.030, -112.573), Vector(-55.781, 14.921, -148.058), Vector(
			-79.546, 8.987, -162.292), Vector(-91.053, 8.987, -159.824), Vector(-97.986, 13.987, -167.932), Vector(-58.129, 8.920,
			-147.371), Vector(-69.513, 7.880, -136.871), Vector(-68.719, 7.889, -133.710), Vector(-88.806, 6.920, -129.582), Vector(
			-89.675, 6.920, -132.496), Vector(-112.791, 14.218, -142.473), Vector(-105.086, 7.987, -126.013), Vector(-101.736, 7.987,
			-109.992), Vector(-81.571, 7.987, -114.252), Vector(-83.214, 7.988, -122.150), Vector(-89.190, 7.987, -107.789), Vector(
			-92.641, 7.987, -107.331), Vector(-85.279, 8.988, -101.578), Vector(-92.308, 8.987, -100.145), Vector(-111.320, 12.218,
			-92.471), Vector(-86.274, 11.987, -95.863), Vector(-73.720, 13.981, -113.723), Vector(-69.210, 13.981, -93.655), Vector(
			-54.659, 12.030, -76.467));
		Global.Staircase_Bottom = Array(Vector(69.013, 10.550, -74.179), Vector(57.421, 13.631, -64.327), Vector(51.481, 10.550, -70.465),
			Vector(45.521, 10.550, -84.850), Vector(55.031, 10.563, -94.206), Vector(45.247, 10.553, -93.742), Vector(36.623, 10.457,
			-76.065), Vector(39.399, 10.516, -82.354), Vector(38.187, 10.691, -69.577), Vector(38.187, 10.523, -63.043), Vector(27.337,
			10.623, -71.889), Vector(6.511, 8.631, -94.596), Vector(17.825, 8.608, -99.905), Vector(25.312, 10.584, -84.550), Vector(
			35.689, 10.483, -93.034), Vector(-23.868, 6.162, -63.586), Vector(-22.548, 6.224, -60.621), Vector(-21.744, 6.232, -56.853),
			Vector(1.111, 12.758, -56.677), Vector(8.373, 12.523, -48.890), Vector(18.606, 8.432, -40.914), Vector(-3.765, 12.043,
			-71.646), Vector(15.903, 9.358, -61.407), Vector(-5.432, 3.060, -20.441), Vector(-2.616, 3.312, -16.585), Vector(-7.317, 2.967,
			-14.501), Vector(-9.279, 3.031, -19.938), Vector(-49.461, 6.716, -29.082), Vector(-46.995, 11.038, -48.057), Vector(-49.849,
			12.030, -55.941), Vector(-18.974, 8.010, -85.610), Vector(-25.098, 12.561, -73.936), Vector(-21.739, 12.561, -72.117), Vector(
			-22.357, 6.030, -70.853), Vector(-16.714, 6.030, -76.035), Vector(-21.633, 6.030, -113.231), Vector(-29.062, 3.030, -126.157),
			Vector(-12.382, 8.032, -106.676), Vector(-48.713, 3.032, -129.043), Vector(-37.652, 8.729, -115.088), Vector(-39.293, 9.032,
			-93.905), Vector(-49.468, 9.104, -129.032), Vector(-69.067, 13.981, -111.153), Vector(-52.687, 8.922, -133.493), Vector(
			-78.621, 7.880, -158.157), Vector(-90.089, 7.906, -155.769), Vector(-85.572, 8.987, -170.522), Vector(-62.266, 7.920,
			-146.462), Vector(-75.133, 5.021, -135.506), Vector(-74.565, 4.986, -132.305), Vector(-84.941, 4.981, -130.460), Vector(
			-85.348, 4.910, -133.436), Vector(-115.016, 8.218, -129.610), Vector(-102.064, 6.920, -126.591), Vector(-98.345, 6.922,
			-110.711), Vector(-84.544, 6.922, -113.497), Vector(-86.797, 6.920, -121.127), Vector(-89.953, 6.920, -111.319), Vector(
			-93.250, 6.922, -109.938), Vector(-86.010, 7.987, -104.520), Vector(-92.896, 7.987, -103.323), Vector(-113.342, 7.987,
			-102.940), Vector(-76.583, 7.987, -98.021), Vector(-68.450, 9.213, -124.272), Vector(-60.423, 9.058, -84.248), Vector(-55.528,
			9.539, -81.899));
		Global.Healthkits_Small = Array(Vector(8.910, 8.583, -35.734), Vector(-25.146, 6.522, -34.392), Vector(-16.253, 15.030, -94.302),
			Vector(-50.753, 8.920, -133.182), Vector(-109.884, 7.987, -139.071));
		Global.Healthkits_Large = Array(Vector(-9.312, 8.607, -66.112), Vector(0.754, 8.570, -82.368), Vector(-21.914, 8.030, -104.845),
			Vector(-38.819, 6.030, -86.015), Vector(-78.151, 5.100, -129.274), Vector(-76.060, 8.987, -168.462), Vector(-73.655, 8.981,
			-112.986), Vector(-41.843, 9.030, -88.021));
		Global.Staircase_Middle = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Vector(24.791, 10.514, -100.028), 0, 0, 0, Vector(-18.598,
			7.719, -62.575), Vector(-16.497, 8.051, -59.447), 0, 0, 0, Vector(-2.627, 12.937, -73.210), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, Vector(-18.325, 12.030, -114.958), 0, 0, Vector(-36.557, 11.030, -89.116), Vector(-41.133, 11.920, -129.894), 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, Vector(-117.083, 12.987, -140.281), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Vector(-75.518, 10.981, -122.579),
			Vector(-67.439, 10.987, -84.340), 0);
		Global.Jump_Start = Array(Vector(-9.147, 12.369, -71.123));
		Global.Jump_End = Array(Vector(-7.744, 12.379, -71.287));
	}
}

rule("Dorado")
{
	event
	{
		Subroutine;
		Dorado;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(68.493, 15.562, 16.237), Vector(64.368, 15.562, 24.131), Vector(76.706, 14.601, 22.828), Vector(
			78.965, 14.550, 24.816), Vector(76.421, 14.550, 28.965), Vector(82.504, 14.550, 20.763), Vector(88.427, 14.550, 21.452),
			Vector(93.978, 14.550, 25.420), Vector(99.574, 14.550, 29.322), Vector(103.918, 14.550, 32.973), Vector(106.255, 14.850,
			30.716), Vector(96.121, 14.300, 40.276), Vector(92.739, 14.300, 34.626), Vector(89.712, 14.300, 38.748), Vector(86.038, 14.300,
			35.712), Vector(88.905, 14.300, 31.225), Vector(82.705, 14.300, 27.036), Vector(85.764, 14.300, 23.632), Vector(91.474, 14.300,
			28.275), Vector(97.143, 14.300, 32.813), Vector(67.424, 18.550, 39.493), Vector(85.783, 21.550, 15.775), Vector(83.106, 21.550,
			19.796), Vector(87.664, 21.550, 20.564), Vector(90.527, 21.601, 17.359), Vector(95.024, 21.550, 26.657), Vector(102.949,
			21.550, 31.808), Vector(117.925, 19.550, 36.962), Vector(126.041, 19.560, 40.208), Vector(139.431, 15.562, 46.792), Vector(
			129.202, 12.562, 43.670), Vector(123.992, 12.550, 43.955), Vector(117.974, 12.658, 34.196), Vector(111.802, 12.550, 32.936),
			Vector(110.076, 12.550, 38.928), Vector(117.720, 12.550, 40.425), Vector(119.932, 12.550, 47.442), Vector(116.097, 12.550,
			48.376), Vector(114.452, 12.550, 44.038), Vector(109.924, 12.550, 47.204), Vector(74.765, 9.550, 6.062), Vector(82.681, 9.013,
			5.981), Vector(87.022, 8.548, 4.622), Vector(76.238, 12.550, -18.353), Vector(79.060, 12.562, -22.152), Vector(72.851, 12.562,
			-31.258), Vector(70.391, 12.550, -29.401), Vector(69.418, 12.562, -36.048), Vector(78.840, 10.349, -49.524), Vector(93.594,
			12.562, 12.623), Vector(97.103, 13.553, 15.259), Vector(102.510, 13.553, 18.268), Vector(105.190, 12.562, 13.550), Vector(
			101.922, 12.588, 10.625), Vector(96.938, 12.562, 8.365), Vector(103.601, 12.562, 7.848), Vector(100.270, 19.562, 20.447),
			Vector(99.484, 19.845, 13.990), Vector(102.336, 19.562, 18.074), Vector(104.600, 19.562, 15.438), Vector(106.840, 19.596,
			16.983), Vector(106.987, 19.562, 12.365), Vector(109.463, 19.596, 14.020), Vector(109.580, 19.562, 9.024), Vector(111.896,
			19.596, 10.758), Vector(105.289, 19.647, 10.202), Vector(100.861, 19.835, 6.669), Vector(94.438, 19.562, 11.910), Vector(
			97.167, 19.562, 8.302), Vector(101.370, 19.562, 3.627), Vector(105.162, 19.550, -1.833), Vector(104.547, 19.795, -5.342),
			Vector(109.918, 19.795, -5.222), Vector(109.954, 19.550, -0.368), Vector(113.277, 19.550, 4.263), Vector(114.676, 19.874,
			-1.313), Vector(118.843, 19.483, 7.024), Vector(119.520, 19.807, 9.983), Vector(121.763, 19.807, 5.525), Vector(124.832,
			19.483, 9.939), Vector(127.590, 19.616, 14.143), Vector(132.922, 19.300, 11.276), Vector(135.130, 19.550, 15.785), Vector(
			140.149, 19.300, 14.922), Vector(154.970, 11.562, 5.618), Vector(148.916, 11.562, 12.520), Vector(143.805, 11.560, 11.731),
			Vector(129.567, 10.821, -0.412), Vector(134.746, 11.562, 1.714), Vector(141.751, 11.550, 3.158), Vector(144.704, 11.562,
			-8.033), Vector(144.689, 12.252, -15.705), Vector(141.857, 12.550, -18.320), Vector(132.674, 12.550, -10.336), Vector(115.524,
			12.550, -25.404), Vector(108.578, 12.562, -31.078), Vector(112.182, 12.618, -28.465), Vector(111.189, 12.550, -20.324), Vector(
			91.021, 10.550, -25.356), Vector(97.600, 10.550, -17.099), Vector(94.946, 10.550, -21.416), Vector(101.861, 11.043, -7.845),
			Vector(102.872, 11.550, -5.115), Vector(99.608, 12.113, -2.522), Vector(95.319, 12.550, 2.638), Vector(89.775, 12.550, 9.667),
			Vector(80.220, 9.550, 6.341), Vector(68.540, 9.050, 0.436), Vector(61.761, 9.067, -4.746), Vector(64.468, 8.550, -9.141),
			Vector(71.994, 8.550, -3.479), Vector(57.535, 8.919, -2.117), Vector(52.072, 8.562, -2.376), Vector(45.779, 8.562, -10.006),
			Vector(53.980, 8.358, -36.048), Vector(47.428, 8.560, -51.175), Vector(46.218, 8.560, -43.813), Vector(52.261, 8.560, -52.144),
			Vector(61.191, 8.555, -60.008), Vector(66.211, 9.130, -54.524), Vector(68.043, 10.082, -51.285), Vector(64.334, 8.550,
			-30.835), Vector(61.319, 8.550, -36.541), Vector(50.445, 8.550, -31.098), Vector(51.408, 8.311, -24.275), Vector(56.886, 8.550,
			-29.911), Vector(84.829, 8.548, -12.719), Vector(79.634, 8.548, -16.696), Vector(117.495, 8.921, -13.825), Vector(121.052,
			8.839, -11.257), Vector(122.166, 8.573, -15.676), Vector(110.770, 12.631, 18.289), Vector(113.211, 12.631, 11.299), Vector(
			109.968, 12.631, 27.967), Vector(118.483, 12.631, 30.365), Vector(131.339, 12.600, 35.671), Vector(136.354, 12.600, 20.355),
			Vector(128.963, 12.600, 18.058), Vector(82.854, 19.072, -6.639), Vector(80.238, 19.086, -8.725), Vector(77.555, 19.104,
			-5.355), Vector(80.136, 19.106, -3.113), Vector(40.212, 10.560, -12.280), Vector(40.051, 10.550, -3.941), Vector(39.346,
			10.550, 2.781), Vector(47.165, 10.550, 5.373), Vector(47.112, 10.550, 2.756), Vector(65.336, 17.992, 4.286), Vector(56.875,
			10.850, 10.671), Vector(58.004, 10.550, 4.700), Vector(34.562, 10.560, -0.386), Vector(36.501, 12.562, -18.191), Vector(39.129,
			12.626, -17.854), Vector(33.687, 12.638, -18.098), Vector(36.657, 12.550, -24.856), Vector(28.131, 12.550, -22.999), Vector(
			22.318, 12.550, -22.735), Vector(25.585, 12.035, -29.490), Vector(25.936, 12.550, -25.700), Vector(31.396, 12.550, -25.729),
			Vector(31.370, 11.550, -32.258), Vector(24.426, 11.850, -35.252), Vector(34.167, 11.550, -37.522), Vector(30.807, 11.850,
			-39.401), Vector(22.128, 5.550, -40.927), Vector(25.897, 5.550, -44.869), Vector(29.511, 5.550, -41.110), Vector(26.024, 5.550,
			-37.084), Vector(31.444, 5.562, -38.889), Vector(25.744, 5.562, -32.440), Vector(31.010, 5.562, -24.431), Vector(21.285, 5.562,
			-24.664), Vector(26.924, 5.562, -26.619), Vector(20.319, 5.562, -30.336), Vector(26.249, 1.562, -27.744), Vector(25.915, 1.102,
			-19.967), Vector(25.603, 0.562, -12.655), Vector(13.897, 1.277, -12.982), Vector(8.599, 1.140, -12.867), Vector(8.590, 1.525,
			-9.176), Vector(11.645, 2.265, -9.448), Vector(14.413, 2.562, -4.949), Vector(17.452, 2.562, -0.074), Vector(20.948, 5.659,
			-16.286), Vector(23.175, 5.396, -11.263), Vector(23.026, 5.614, -20.072), Vector(33.564, 4.421, -7.003), Vector(38.971, 3.550,
			3.253), Vector(39.244, 3.562, 10.651), Vector(45.734, 3.550, 10.423), Vector(45.646, 3.550, 3.175), Vector(46.176, 3.550,
			19.318), Vector(37.243, 2.981, 19.342), Vector(29.559, 2.571, 15.220), Vector(30.046, 2.571, 8.989), Vector(20.558, 2.571,
			13.688), Vector(19.709, 3.760, 17.753), Vector(19.634, 3.760, 23.908), Vector(21.922, 3.851, 23.766), Vector(9.298, 3.732,
			23.713), Vector(16.994, 3.732, 23.479), Vector(25.233, -0.430, 23.567), Vector(19.780, -0.430, 23.194), Vector(13.397, -0.430,
			23.557), Vector(13.288, -0.399, 18.938), Vector(6.951, -0.430, 24.070), Vector(-1.902, -0.430, 23.067), Vector(-5.507, -0.438,
			23.314), Vector(22.396, 11.410, -6.737), Vector(21.996, 11.410, 1.211), Vector(17.825, 11.550, 13.302), Vector(18.128, 11.550,
			19.310), Vector(27.014, 12.238, 20.287), Vector(26.627, 12.246, 28.446), Vector(40.524, 12.236, 20.750), Vector(40.465, 12.236,
			29.292), Vector(34.760, 12.238, 20.580), Vector(32.206, 12.234, 29.310), Vector(33.974, 11.987, 24.358), Vector(1.918, 1.162,
			-11.805), Vector(-3, 1.562, -14.938), Vector(4.689, 1.270, -5.058), Vector(0.646, 1.282, -1.716), Vector(-2.743, 1.162, 4.509),
			Vector(-6.403, 1.634, 0.463), Vector(-4.553, 1.562, -5.706), Vector(-9.428, 1.562, -9.917), Vector(-14.555, 1.562, -5.666),
			Vector(-15.753, 1.562, 0.923), Vector(-11.979, 1.562, 3.599), Vector(-25.454, 5.562, 10.088), Vector(-18.417, 9.750, -3.421),
			Vector(-15.915, 9.748, -6.604), Vector(-13.458, 9.748, -9.831), Vector(-12.576, 9.562, -1.330), Vector(-9.075, 9.562, -0.922),
			Vector(-4.411, 9.760, 2.541), Vector(-1.641, 9.760, -0.817), Vector(-7.149, 9.748, 5.803), Vector(-6.751, 9.562, 0.462),
			Vector(-5.305, 1.334, 9.529), Vector(-2.112, 1.562, 14.954), Vector(7.266, 1.560, 15.890), Vector(-0.013, 1.493, 10.412),
			Vector(7.706, 1.560, 11.493), Vector(2.421, 1.251, 1.478), Vector(5.583, 1.283, -0.875), Vector(-13.429, 1.562, 7.267), Vector(
			-18.777, 1.562, 14.455), Vector(-18.113, 1.150, -8.376), Vector(-8.764, 1.550, -20.534), Vector(-5.893, 1.562, -24.169),
			Vector(-1.048, 1.562, -19.852), Vector(-18.599, 1.550, -27.660), Vector(-27.829, 1.550, -34.888), Vector(-33.563, 1.550,
			-38.994), Vector(-51.360, 1.550, -14.813), Vector(-46.178, 1.550, -11.020), Vector(-41.874, 1.550, -7.902), Vector(-37.139,
			1.550, -4.177), Vector(-32.333, 1.550, 0.099), Vector(-27.959, 1.550, 3.876), Vector(-26.863, 1.648, 7.612), Vector(-24.783,
			1.150, -19.813), Vector(-31.813, 1.163, -18.864), Vector(-31.097, 1.150, -11.800), Vector(-23.882, 1.150, -12.906), Vector(
			-36.590, 1.550, -34.754), Vector(-40.509, 1.550, -30.027), Vector(-44.137, 1.550, -24.874), Vector(-47.999, 1.550, -20.364),
			Vector(186.398, 8.590, 41.434), Vector(183.617, 8.563, 51.236), Vector(187.777, 8.562, 35.685), Vector(172.674, 12.562,
			22.537), Vector(161.303, 12.550, 19.307), Vector(166.435, 12.550, 27.805), Vector(174.581, 12.560, 29.731), Vector(179.904,
			16.541, 25.872), Vector(159.417, 12.550, 25.413), Vector(150.964, 12.550, 24.025), Vector(143.141, 12.550, 21.426), Vector(
			139.273, 12.550, 35.485), Vector(147.461, 12.550, 37.690), Vector(148.281, 15.560, 57.792), Vector(147.049, 15.560, 54.326),
			Vector(146.003, 15.560, 49.333), Vector(155.200, 15.560, 43.209), Vector(151.583, 15.560, 49.430), Vector(152.125, 19.562,
			58.893), Vector(162.747, 19.562, 61.640), Vector(163.224, 19.489, 59.667), Vector(168.434, 19.562, 63.021), Vector(170.562,
			19.562, 56.012), Vector(172.729, 20.550, 48.502), Vector(169.835, 20.650, 46.607), Vector(176.136, 20.650, 48.112), Vector(
			175.141, 19.562, 65.681), Vector(175.376, 19.527, 63.151), Vector(184.539, 19.561, 68.251), Vector(187.857, 19.561, 73.447),
			Vector(162.514, 13.560, 61.652), Vector(180.400, 13.560, 66.469), Vector(171.124, 13.560, 64.063), Vector(173.059, 12.550,
			36.205), Vector(170.937, 12.550, 42.311), Vector(157.054, 12.550, 40.384), Vector(186.867, 13.709, 56.137), Vector(185.412,
			13.709, 62.088), Vector(189.291, 13.560, 59.601), Vector(191.492, 13.560, 65.244), Vector(183.030, 16.050, 30.601), Vector(
			186.933, 15.883, 31.171), Vector(190.320, 16.050, 32.521), Vector(188.523, 16.560, 25.010), Vector(192.016, 16.560, 21.961),
			Vector(200.604, 16.560, 25.597), Vector(198.268, 16.560, 31.274), Vector(192.604, 16.550, 29.694), Vector(204.774, 16.560,
			29.721), Vector(202.508, 16.562, 34.258), Vector(207.755, 16.562, 32.782), Vector(212.290, 16.562, 32.039), Vector(205.548,
			16.562, 38.361), Vector(219.483, 16.562, 34.218), Vector(217.657, 16.562, 41.708), Vector(214.747, 16.562, 49.036), Vector(
			207.830, 16.560, 47.162), Vector(203.287, 16.550, 53.947), Vector(200.388, 16.550, 49.202), Vector(202.910, 16.550, 41.750),
			Vector(197.097, 16.550, 44.388), Vector(192.075, 15.894, 43.047), Vector(59.070, 8.313, -23.036), Vector(71.136, 8.354,
			-19.785), Vector(65.347, 8.357, -26.356));
		Global.Healthkits = Array(Vector(13.199, -0.438, 16.234), Vector(61.337, 10.550, 7.369), Vector(32.845, 5.562, -38.872), Vector(
			51.782, 8.562, -9.554), Vector(82.299, 10.305, -52.066), Vector(90.697, 10.550, -26.218), Vector(87.148, 14.300, 38.499),
			Vector(101.586, 13.553, 18.231), Vector(130.559, 10.566, -26.563), Vector(109.475, 12.562, -35.769), Vector(151.569, 11.562,
			15.157), Vector(133.919, 12.562, 48.870), Vector(144.813, 17.562, 70.285), Vector(170.989, 13.562, 64.669), Vector(190.848,
			13.550, 68.803), Vector(194.477, 16.562, 25.644), Vector(166.683, 19.562, 70.111), Vector(173.662, 12.562, 18.539), Vector(
			37.578, 3.562, 11.477));
		Global.ObjectiveA_Nodes = Array(Vector(2.730, 1.334, 8.449), Vector(1.228, 1.165, 6.194), Vector(5.603, 1.364, 8.245), Vector(
			9.660, 1.358, 8.460), Vector(13.912, 1.869, 8.179), Vector(18.370, 2.363, 8.180), Vector(22.676, 2.351, 8.226), Vector(26.391,
			2.311, 7.678), Vector(27.994, 2.321, 4.036), Vector(28.436, 2.647, -0.082), Vector(28.821, 3.685, -4.163), Vector(29.647,
			4.716, -8.361), Vector(30.739, 5.433, -12.539), Vector(32.877, 5.450, -15.613), Vector(36.698, 5.563, -16.172), Vector(40.640,
			6.356, -16.502), Vector(45.389, 7.601, -16.236), Vector(48.918, 8.346, -15.747), Vector(52.259, 8.350, -16.023), Vector(56.018,
			8.357, -15.485), Vector(58.810, 8.352, -12.561), Vector(63.035, 8.344, -11.142), Vector(66.899, 8.357, -11.371), Vector(70.330,
			8.389, -10.897), Vector(73.391, 8.505, -8.665), Vector(76.027, 8.343, -6.585), Vector(78.170, 8.339, -4.896), Vector(2.612,
			1.143, 4.085), Vector(4.637, 1.282, 4.063), Vector(7.906, 1.362, 4.199), Vector(10.897, 1.400, 4.441), Vector(14.361, 1.993,
			4.369), Vector(18.185, 2.339, 3.949), Vector(22.276, 2.365, 3.364), Vector(24.142, 2.629, -0.059), Vector(24.985, 3.576,
			-3.620), Vector(25.539, 4.489, -7.072), Vector(25.974, 5.152, -10.315), Vector(26.397, 5.372, -13.975), Vector(26.750, 5.368,
			-17.044), Vector(29.914, 5.365, -19.065), Vector(33.774, 5.455, -19.542), Vector(37.897, 5.744, -19.735), Vector(42.083, 6.748,
			-19.994), Vector(45.798, 7.815, -20.188), Vector(49.533, 8.337, -20.291), Vector(52.876, 8.333, -20.310), Vector(56.449, 8.301,
			-19.508), Vector(58.907, 8.243, -17.147), Vector(61.362, 8.480, -14.646), Vector(64.304, 8.262, -13.991), Vector(67.699, 8.212,
			-14.763), Vector(70.924, 8.266, -15.099), Vector(73.881, 8.505, -14.052), Vector(76.666, 8.389, -12.204), Vector(79.114, 8.356,
			-10.485), Vector(81.292, 8.358, -8.910), Vector(81.077, 8.346, -2.634), Vector(83.848, 8.375, -7.012), Vector(84.130, 8.358,
			-0.626), Vector(87.109, 8.356, 1.434), Vector(90.383, 8.322, 1.056), Vector(92.715, 8.339, -1.225), Vector(95.481, 8.915,
			-4.412), Vector(97.742, 10.249, -7.494), Vector(99.991, 10.340, -10.640), Vector(102.498, 10.357, -12.939), Vector(105.521,
			10.175, -11.873), Vector(108.455, 9.345, -9.630), Vector(111.468, 9.345, -7.191), Vector(114.243, 9.345, -4.880), Vector(
			116.925, 9.353, -2.613), Vector(119.284, 10.438, -0.412), Vector(120.038, 10.438, 2.657), Vector(118.686, 11.246, 5.786),
			Vector(117.725, 12.238, 9.482), Vector(116.706, 12.433, 13.473), Vector(115.808, 12.433, 16.875), Vector(115.021, 12.433,
			19.852), Vector(114.223, 12.430, 23.274), Vector(115.795, 12.434, 26.077), Vector(119.665, 12.430, 26.977), Vector(123.442,
			12.600, 27.863), Vector(127.142, 12.600, 28.645), Vector(130.764, 12.600, 29.350), Vector(135.021, 12.600, 30.030), Vector(
			138.895, 12.550, 30.816), Vector(142.580, 12.550, 31.675), Vector(146.661, 12.550, 32.754), Vector(149.978, 12.550, 33.631),
			Vector(85.731, 8.416, -5.710), Vector(88.687, 8.410, -4.895), Vector(91.216, 8.501, -6.465), Vector(93.745, 9.543, -8.931),
			Vector(96.368, 10.319, -11.488), Vector(98.772, 10.303, -13.829), Vector(100.930, 10.328, -16.020), Vector(103.787, 10.330,
			-17.210), Vector(107.322, 10.309, -15.585), Vector(110.214, 9.499, -13.430), Vector(112.781, 9.328, -11.460), Vector(115.730,
			9.328, -9.276), Vector(118.606, 9.332, -7.187), Vector(121.640, 10.215, -4.771), Vector(124.532, 10.419, -3.003), Vector(
			125.984, 10.408, 0.246), Vector(125.300, 10.417, 3.728), Vector(124.309, 11.298, 7.269), Vector(123.223, 12.222, 11.144),
			Vector(122.376, 12.416, 14.871), Vector(121.991, 12.363, 18.705), Vector(125.088, 12.600, 20.821), Vector(128.563, 12.600,
			21.813), Vector(132.130, 12.600, 22.820), Vector(135.785, 12.600, 24.098), Vector(139.480, 12.550, 25.507), Vector(143.176,
			12.550, 26.957), Vector(146.654, 12.550, 28.194), Vector(150.140, 12.550, 29.166), Vector(154.006, 12.489, 30.140), Vector(
			152.884, 12.489, 34.198), Vector(155.535, 12.400, 35.588), Vector(159.331, 12.400, 36.714), Vector(162.068, 12.400, 38.576),
			Vector(162.350, 12.400, 42.180), Vector(161.415, 12.400, 45.657), Vector(160.412, 13.036, 49.217), Vector(159.417, 13.400,
			52.639), Vector(160.086, 13.400, 55.971), Vector(163.016, 13.400, 57.358), Vector(166.631, 13.400, 58.488), Vector(170.447,
			13.400, 59.707), Vector(174.547, 13.400, 60.932), Vector(178.373, 13.400, 61.967), Vector(181.131, 13.400, 60.980), Vector(
			182.188, 13.400, 57.894), Vector(183.136, 14.162, 54.646), Vector(184.135, 15.387, 51.211), Vector(185.186, 15.400, 47.558),
			Vector(186.139, 15.350, 44.360), Vector(187.210, 15.350, 40.998), Vector(187.221, 15.349, 37.299), Vector(156.188, 12.400,
			30.905), Vector(159.122, 12.400, 31.578), Vector(163.119, 12.400, 32.588), Vector(166.932, 12.400, 33.587), Vector(168.697,
			12.400, 36.242), Vector(167.891, 12.400, 39.565), Vector(166.693, 12.400, 43.765), Vector(165.591, 12.400, 47.871), Vector(
			164.597, 13.374, 51.758), Vector(167.134, 13.400, 54.396), Vector(171.060, 13.400, 55.679), Vector(175.003, 13.400, 56.614),
			Vector(177.563, 13.600, 54.707), Vector(178.783, 14.890, 51.368), Vector(179.715, 15.400, 47.777), Vector(180.475, 15.400,
			44.594), Vector(181.273, 15.350, 41.271), Vector(181.994, 15.350, 38.465), Vector(185.001, 15.350, 36.708));
		Global.ObjectiveB_Nodes = Array();
		Global.Chokepoint = Array();
		Global.Staircase_Top = Array(Vector(72.541, 18.550, 38.979), Vector(75.433, 21.550, 30.119), Vector(64.819, 18.562, 36.795),
			Vector(67.995, 15.562, 26.351), Vector(68.070, 15.560, 22.177), Vector(73.907, 15.561, 14.539), Vector(84.486, 14.550, 17.858),
			Vector(100.751, 14.550, 27.954), Vector(101.695, 14.550, 41.779), Vector(93.080, 21.562, 19.003), Vector(107.836, 21.500,
			33.787), Vector(135.439, 15.562, 53.206), Vector(129.538, 19.562, 41.164), Vector(93.392, 10.550, -13.850), Vector(102.743,
			12.562, -23.346), Vector(36.592, 12.550, -27.702), Vector(78, 12.550, -41.821), Vector(87.252, 10.550, -22.066), Vector(81.389,
			12.550, -21.425), Vector(71.953, 12.562, -30.280), Vector(96.731, 14.562, 21.913), Vector(109.290, 11.550, -2.017), Vector(
			111.464, 11.550, -0.221), Vector(106.414, 12.608, 4.342), Vector(144.145, 19.562, 16.095), Vector(163.476, 12.562, 7.016),
			Vector(138.112, 12.560, 15.451), Vector(136.556, 12.550, -15.691), Vector(118.541, 12.550, -29.680), Vector(46.315, 8.669,
			-13.979), Vector(74.555, 10.302, -48.188), Vector(55.022, 10.550, 4.867), Vector(36.430, 12.562, -9.613), Vector(32.761,
			11.550, -42.545), Vector(17.417, 5.562, -30.851), Vector(12.677, 3.563, -27.069), Vector(21.841, 5.123, -8.445), Vector(36.342,
			4.550, -6.088), Vector(39.052, 4.550, -6.309), Vector(28.596, 2.573, 19.039), Vector(2.956, 1.560, 17.772), Vector(-12.967,
			1.562, 18.762), Vector(-24.334, 5.562, 7.835), Vector(-17.043, 9.562, 4.430), Vector(179.513, 12.562, 24.913), Vector(169.214,
			12.550, 47.042), Vector(147.232, 15.562, 46.629), Vector(144.556, 17.562, 63.634), Vector(149.707, 19.562, 59.877), Vector(
			151.839, 15.560, 58.703), Vector(194.038, 19.560, 70.669), Vector(201.053, 16.563, 58.144));
		Global.Staircase_Bottom = Array(Vector(78.291, 14.300, 31.949), Vector(71.196, 18.550, 35.530), Vector(72.587, 14.562, 26.375),
			Vector(69.664, 14.562, 24.799), Vector(70.575, 14.562, 23.944), Vector(76.077, 14.562, 16.271), Vector(80.510, 9.550, 9.157),
			Vector(104.040, 12.631, 24.212), Vector(105.715, 12.588, 43.029), Vector(97.013, 19.562, 21.860), Vector(112.100, 19.550,
			35.423), Vector(130.569, 12.562, 47.030), Vector(138.310, 15.560, 43.724), Vector(89.083, 8.584, -10.902), Vector(99.718,
			10.550, -19.502), Vector(45.257, 8.216, -31.896), Vector(82.142, 10.550, -45.044), Vector(83.260, 8.550, -19.151), Vector(
			85.865, 10.550, -24.064), Vector(71.182, 8.550, -24.616), Vector(91.743, 12.562, 17.782), Vector(112.382, 9.347, -6.179),
			Vector(114.603, 9.348, -4.146), Vector(108.725, 11.550, 1.571), Vector(156.284, 11.562, 8.544), Vector(159.294, 11.562, 6.010),
			Vector(139.120, 11.562, 10.959), Vector(126.058, 8.573, -15.692), Vector(120.930, 8.573, -19.368), Vector(41.320, 6.713,
			-14.092), Vector(62.718, 8.303, -41.140), Vector(49.821, 3.550, 19.144), Vector(36.465, 10.550, -4.521), Vector(22.986, 5.587,
			-48.307), Vector(11.871, 3.562, -30.460), Vector(17.735, 1.562, -27.019), Vector(14.528, 2.550, -8.987), Vector(36.353, 3.550,
			-3.019), Vector(39.351, 3.550, -2.914), Vector(21.282, -0.375, 19.065), Vector(3.095, -0.430, 22.354), Vector(-9.118, -0.438,
			21.688), Vector(-19.801, 1.562, 1.973), Vector(-22.681, 5.562, 11.675), Vector(188.876, 8.562, 27.565), Vector(178.034, 8.567,
			49.164), Vector(149.039, 12.550, 39.823), Vector(145.826, 15.560, 58.823), Vector(148.322, 17.562, 64.738), Vector(156.892,
			13.562, 60.095), Vector(200.020, 16.562, 65.433), Vector(194.103, 13.642, 56.360));
		Global.Healthkits_Small = Array(Vector(13.199, -0.438, 16.234), Vector(51.782, 8.562, -9.554), Vector(90.697, 10.550, -26.218),
			Vector(101.586, 13.553, 18.231), Vector(109.475, 12.562, -35.769), Vector(133.919, 12.562, 48.870), Vector(170.989, 13.562,
			64.669), Vector(190.848, 13.550, 68.803), Vector(194.477, 16.562, 25.644), Vector(166.683, 19.562, 70.111), Vector(37.578,
			3.562, 11.477));
		Global.Healthkits_Large = Array(Vector(61.337, 10.550, 7.369), Vector(32.845, 5.562, -38.872), Vector(82.299, 10.305, -52.066),
			Vector(87.148, 14.300, 38.499), Vector(130.559, 10.566, -26.563), Vector(151.569, 11.562, 15.157), Vector(144.813, 17.562,
			70.285), Vector(173.662, 12.562, 18.539));
		Global.Staircase_Middle = Array(0, 0, Vector(70.496, 15.562, 29.354), 0, 0, 0, Vector(87.428, 12.550, 14.057), 0, 0, 0, 0, Vector(
			129.671, 13.562, 51.438), 0, 0, 0, Vector(36.473, 11.550, -31.607), 0, 0, 0, Vector(70.199, 10.927, -28.376), 0, 0, 0, 0,
			Vector(153.256, 15.562, 18.124), 0, 0, Vector(130.184, 10.566, -20.320), Vector(124.718, 10.564, -24.416), 0, Vector(71.407,
			9.976, -46.516), Vector(55.059, 6.550, 13.700), 0, Vector(31.688, 9.550, -48.088), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, Vector(198.421, 18.562, 71.158), 0);
		Global.Jump_Start = Array(Vector(19.443, 2.541, 15.253));
		Global.Jump_End = Array(Vector(19.424, 2.535, 16.135));
	}
}

rule("Route66")
{
	event
	{
		Subroutine;
		Route66;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(39.438, 3.902, 75.883), Vector(29.912, 3.902, 72.409), Vector(40.729, 3.902, 71.965), Vector(
			36.998, 3.902, 66.867), Vector(47.009, 3.902, 70.396), Vector(43.560, 3.902, 65.123), Vector(43.135, 3.934, 60.884), Vector(
			46.649, 3.934, 62.324), Vector(39.082, 3.951, 56.104), Vector(41.979, 3.947, 55.114), Vector(53.416, 3.934, 57.018), Vector(
			55.300, 3.904, 64.775), Vector(49.016, 3.904, 79.002), Vector(42.981, 7.968, 46.394), Vector(37.609, 1.830, 51.727), Vector(
			53.714, 9.068, 16.233), Vector(62.208, 10.766, 12.461), Vector(49.159, 9.659, 13.743), Vector(44.647, 8.856, 18.703), Vector(
			38.121, 8.550, 23.276), Vector(34.354, 8.558, 20.059), Vector(38.023, 1.776, 42.513), Vector(46.654, 1.776, 40.357), Vector(
			53.211, 1.781, 40.636), Vector(55.081, 1.756, 51.566), Vector(63.133, 1.607, 47.445), Vector(69.557, 1.996, 39.449), Vector(
			68.545, 2.779, 29.905), Vector(61.712, 2.534, 30.675), Vector(69.448, 2.422, 22.523), Vector(65.784, 3.404, 21.516), Vector(
			63.539, 3.892, 17.680), Vector(61.415, 3.223, 23.375), Vector(72.180, 1.861, 17.166), Vector(71.081, 1.797, 9.521), Vector(
			68.780, 2.053, 2.950), Vector(65.643, 2.866, 0.444), Vector(62.878, 3.793, -1.616), Vector(58.100, 4.153, -1.916), Vector(
			61.765, 4.141, 3.964), Vector(53.156, 4.033, -7.089), Vector(46.341, 3.811, -5.667), Vector(45.511, 4.619, -11.967), Vector(
			19.802, 7.505, -3.390), Vector(30.024, 9.748, 5.287), Vector(32.935, 9.067, 5.376), Vector(40.666, 9.111, -0.815), Vector(
			39.052, 9.872, -3.718), Vector(33.771, 9.462, -0.610), Vector(30.672, 9.635, -7.051), Vector(36.135, 8.439, -11.020), Vector(
			26.098, 8.787, 22.875), Vector(21.742, 8.430, 18.173), Vector(19.405, 9.142, 22.632), Vector(16.544, 8.339, 17.854), Vector(
			19.807, 3.735, 17.921), Vector(19.659, 3.621, 13.182), Vector(24.897, 3.629, 18.580), Vector(37.130, 3.655, 15.475), Vector(
			42.588, 3.437, 21.991), Vector(48.696, 3.445, 17.070), Vector(52.988, 3.474, 19.238), Vector(27.760, 3.529, 5.988), Vector(
			32.527, 3.486, 3.524), Vector(39.002, 3.558, -1.191), Vector(35.373, 3.693, -5.554), Vector(29.028, 3.693, -0.676), Vector(
			24.285, 3.693, -0.705), Vector(40.249, 3.552, -11.223), Vector(27.292, 9.563, -11.746), Vector(23.221, 9.523, -17.106), Vector(
			21.355, 9.535, -21.601), Vector(13.712, 10.296, -23.972), Vector(11.696, 10.870, -30.618), Vector(8.325, 10.021, -23.210),
			Vector(10.250, 10.650, -38.241), Vector(7.293, 10.514, -41.647), Vector(11.745, 10.544, -43.181), Vector(7.151, 10.423,
			-45.012), Vector(-0.410, 10.102, -43.158), Vector(-5.042, 10.053, -41.838), Vector(-9.660, 10.085, -42.912), Vector(-8.542,
			10.085, -38.539), Vector(-17.061, 10.085, -36.058), Vector(-17.849, 10.085, -40.498), Vector(-19.790, 10.085, -46.278), Vector(
			-11.287, 10.085, -49.466), Vector(-25.313, 9.764, -48.085), Vector(-30.111, 9.711, -46.409), Vector(-36.145, 10.308, -44.757),
			Vector(-39.677, 11.090, -43.725), Vector(-42.991, 11.465, -41.275), Vector(-45.818, 11.267, -35.805), Vector(-48.351, 10.909,
			-30.419), Vector(-46.944, 10.408, -23.504), Vector(-48.545, 10.410, -16.895), Vector(-54.578, 10.309, -18.632), Vector(-60.169,
			10.055, -19.700), Vector(-38.267, 14.312, -22.049), Vector(-32.963, 14.302, -9.507), Vector(-28.606, 14.312, -26.796), Vector(
			-25.854, 13.679, -27.542), Vector(-20.715, 13.673, -15.925), Vector(23.963, 3.556, -14.910), Vector(23.200, 3.672, -8.449),
			Vector(18.013, 3.642, -12.084), Vector(17.533, 3.593, -17.428), Vector(13.626, 3.586, -23.183), Vector(9.306, 3.586, -22.734),
			Vector(6.589, 3.613, -18.166), Vector(3.303, 3.670, -5.485), Vector(5.784, 3.575, 2.979), Vector(11.565, 3.605, 1.366), Vector(
			36.211, 9.154, -8.140), Vector(33.062, 8.542, 8.189), Vector(47.140, 9.336, -0.483), Vector(51.977, 9.321, -0.598), Vector(
			-5.488, 4.545, -8.491), Vector(-11.682, 4.568, -6.077), Vector(-6.316, 4.568, -2.636), Vector(-10.665, 4.568, -1.155), Vector(
			-9.874, 5.567, 10.499), Vector(-14.439, 5.567, 8.965), Vector(-18.218, 5.567, 13.340), Vector(-22.115, 5.628, 11.495), Vector(
			-13.147, 5.567, 3.530), Vector(-17.488, 5.616, 1.100), Vector(-15.842, 4.634, -9.698), Vector(-14.690, 4.837, -15.428), Vector(
			-20.034, 5.034, -12.219), Vector(-20.147, 4.681, -5.281), Vector(-26.078, 4.858, -0.251), Vector(-27.906, 4.971, 4.513),
			Vector(-33.622, 4.899, 7.040), Vector(-39.688, 4.897, 2.103), Vector(-43.623, 5.061, 6.416), Vector(-42.609, 4.891, -2.464),
			Vector(-36.610, 4.863, -6.395), Vector(-30.030, 4.859, -3.553), Vector(-40.137, 4.857, -13.235), Vector(-44.107, 4.857,
			-7.864), Vector(-34.166, 4.976, -16.053), Vector(-32.237, 4.976, -20.707), Vector(-30.252, 4.976, -15.040), Vector(-26.902,
			4.976, -19.265), Vector(-30.668, 4.976, -28.259), Vector(-24.811, 5.029, -22.762), Vector(-22.240, 4.976, -16.549), Vector(
			-33.709, 9.994, -6.896), Vector(-35.872, 9.986, -12.370), Vector(-33.487, 10.270, -1.956), Vector(-36.133, 12.148, 3.935),
			Vector(-31.033, 12.123, 8.294), Vector(-30.518, 9.976, -14.546), Vector(-28.934, 9.976, -23.970), Vector(-27.181, 9.981,
			-28.902), Vector(-23.243, 9.955, -21.833), Vector(-19.716, 10.205, -14.447), Vector(-14.422, 10.042, -11.368), Vector(-8.644,
			9.684, -9.216), Vector(-13.580, 4.857, -53.502), Vector(-23.161, 4.848, -52.421), Vector(-29.688, 4.858, -49.547), Vector(
			-35.284, 4.858, -45.810), Vector(-35.871, 4.858, -40.576), Vector(-28.108, 4.860, -41.915), Vector(-27.852, 4.860, -46.944),
			Vector(-22.455, 5.038, -41.744), Vector(-19.183, 5.038, -44.295), Vector(-9.700, 4.875, -50.965), Vector(-7.377, 4.906,
			-45.823), Vector(-11.628, 5.038, -44.675), Vector(-15.813, 5.038, -43.460), Vector(-12.396, 5.038, -37.793), Vector(-13.403,
			4.906, -31.186), Vector(-7.079, 4.928, -35.833), Vector(-5.560, 4.914, -40.548), Vector(-1.181, 8.408, -19.891), Vector(
			-43.348, 4.858, -37.486), Vector(-47.979, 4.858, -29.589), Vector(-52.337, 4.845, -32.025), Vector(-47.072, 4.845, -40.012),
			Vector(-51.385, 4.845, -36.391), Vector(-56.860, 4.847, -39.206), Vector(-56.590, 4.861, -13.290), Vector(-60.539, 4.982,
			-9.735), Vector(-53.062, 4.870, -10.674), Vector(-53.343, 4.851, -18.163), Vector(-49.837, 4.856, -17.809), Vector(-68.070,
			14.081, 23.462), Vector(-71.174, 14.109, 17.376), Vector(-78.301, 14.911, 15.721), Vector(-85.847, 14.969, 11.895), Vector(
			-84.182, 14.969, 8.985), Vector(-76.562, 14.969, 13.030), Vector(-98.275, 14.501, -12.264), Vector(-101.619, 14.501, -10.846),
			Vector(-97.042, 14.178, 0.295), Vector(-93.455, 14.188, -0.997), Vector(-107.436, 14.050, -29.230), Vector(-109.450, 14.050,
			-24.307), Vector(-107.455, 14.048, -21.012), Vector(-102.537, 14.050, -25.244), Vector(-104.860, 12.050, -2.027), Vector(
			-101.043, 10.050, 11.573), Vector(-87.962, 8.077, 16.973), Vector(-85.378, 8.050, 13.223), Vector(-78.363, 8.050, 19.378),
			Vector(-71.411, 8.050, 18.769), Vector(-65.109, 10.050, 30.479), Vector(-68.651, 10.050, 26.910), Vector(-63.241, 12.417,
			7.680), Vector(-71.018, 12.417, 4.196), Vector(-65.686, 12.364, 2.873), Vector(-66.288, 12.050, -0.197), Vector(-75.615,
			12.050, -5.777), Vector(-71.393, 12.050, -16.342), Vector(-71.948, 12.050, -9.611), Vector(-75.553, 12.050, -17.737), Vector(
			-81.989, 8.050, -15.138), Vector(-77.022, 8.050, -2.773), Vector(-72.438, 8.050, -10.095), Vector(-67.977, 8.077, 5.633),
			Vector(-51.721, 8.050, 19.861), Vector(-58.726, 8.050, 18.408), Vector(-58.035, 4.892, -2.896), Vector(-49.858, 5.077, 7.334),
			Vector(-113.301, 8.050, -39.886), Vector(-111.314, 8.051, -33.097), Vector(-110.174, 6.050, -55.646), Vector(-104.130, 6.050,
			-50.965), Vector(-89.225, 8.050, -47.151), Vector(-84.744, 8.050, -41.401), Vector(-83.423, 8.064, -36.607), Vector(-82.936,
			8.050, -25.159), Vector(-79.149, 8.050, -21.634), Vector(-87.836, 8.050, -18.441), Vector(-86.934, 8.050, -25.958), Vector(
			-91.476, 8.121, -33.362), Vector(-96.350, 8.050, -30.755), Vector(-104.767, 8.050, -30.804), Vector(-106.327, 8.050, -24.484),
			Vector(-99.950, 8.050, -20.799), Vector(-110.510, 8.050, -29.655), Vector(-86.259, 13.897, -26.930), Vector(-78.244, 14.451,
			-28.724), Vector(-80.287, 14.066, -1.183), Vector(49.724, 5.058, -17.604), Vector(52.553, 3.907, -24.247), Vector(59.379,
			3.539, -21.592), Vector(57.856, 3.559, -17.012), Vector(60.131, 3.754, -10.406), Vector(55.665, 3.941, -8.798));
		Global.Healthkits = Array(Vector(48.353, 3.246, 45.718), Vector(73.014, 1.729, 7.429), Vector(52.700, 3.991, -4.646), Vector(
			23.680, 3.694, -2.984), Vector(43.939, 3.437, 22.616), Vector(-8.898, 4.567, 0.674), Vector(-12.734, 5.038, -47.267), Vector(
			-56.973, 10.193, 33.394), Vector(-72.974, 8.050, 21.299), Vector(-104.934, 12.050, -3.130), Vector(-67.943, 8.050, -13.191),
			Vector(-78.254, 8.050, -22.998));
		Global.ObjectiveA_Nodes = Array(Vector(50.073, 1.787, 33.738), Vector(51.598, 1.873, 31.263), Vector(55.419, 1.925, 33.530),
			Vector(54.204, 1.801, 36.047), Vector(51.096, 1.776, 36.914), Vector(56.846, 2.172, 30.272), Vector(58.555, 2.622, 26.696),
			Vector(60.043, 3.178, 22.870), Vector(61.398, 3.667, 18.936), Vector(62.166, 3.992, 15.157), Vector(62.096, 4.121, 11.028),
			Vector(60.803, 4.083, 7.026), Vector(58.253, 4.017, 3.617), Vector(54.417, 3.938, 1.293), Vector(50.036, 3.805, 0.891), Vector(
			45.139, 3.686, 1.890), Vector(40.663, 3.645, 4.055), Vector(37.160, 3.645, 6.418), Vector(33.793, 3.645, 8.999), Vector(30.170,
			3.645, 11.061), Vector(26.409, 3.645, 9.555), Vector(23.775, 3.645, 6.034), Vector(21.589, 3.645, 2.643), Vector(19.425, 3.645,
			-0.820), Vector(18.123, 3.645, -4.468), Vector(16.874, 3.645, -8.051), Vector(14.495, 3.645, -10.925), Vector(11.634, 3.645,
			-12.240), Vector(53.620, 2.072, 28.709), Vector(54.753, 2.389, 25.669), Vector(56.183, 2.899, 21.815), Vector(57.300, 3.353,
			17.826), Vector(58.021, 3.714, 13.549), Vector(57.580, 3.861, 9.896), Vector(55.496, 3.868, 6.992), Vector(51.730, 3.775,
			5.045), Vector(47.618, 3.687, 5.250), Vector(44.308, 3.650, 6.675), Vector(40.980, 3.645, 8.656), Vector(37.771, 3.645,
			11.127), Vector(34.397, 3.645, 13.685), Vector(30.950, 3.645, 15.323), Vector(26.714, 3.645, 14.807), Vector(23.189, 3.645,
			13.024), Vector(21.136, 3.645, 10.430), Vector(19.098, 3.645, 7.565), Vector(16.683, 3.645, 3.895), Vector(15.235, 3.645,
			0.017), Vector(13.968, 3.645, -3.916), Vector(12.488, 3.645, -7.189), Vector(10.671, 3.648, -8.220), Vector(7.961, 3.645,
			-9.003), Vector(8.833, 3.645, -13.406), Vector(4.882, 3.686, -14.021), Vector(1.011, 3.927, -14.654), Vector(-3.297, 4.444,
			-16.288), Vector(-7.161, 4.797, -18.353), Vector(-10.566, 4.860, -21.519), Vector(-13.475, 4.860, -25.387), Vector(-16.204,
			4.860, -29.821), Vector(-18.831, 4.860, -33.997), Vector(-22.369, 4.860, -37.635), Vector(-27.225, 4.860, -39.363), Vector(
			-32.469, 4.860, -39.244), Vector(-37.794, 4.860, -37.237), Vector(-42.389, 4.860, -33.878), Vector(-45.646, 4.860, -29.378),
			Vector(-46.735, 4.860, -24.493), Vector(-47.660, 4.860, -18.840), Vector(-48.665, 4.860, -13.845), Vector(-50.532, 4.860,
			-9.289), Vector(-52.378, 4.860, -5.983), Vector(4.082, 3.671, -9.521), Vector(0.100, 3.927, -10.397), Vector(-4.576, 4.436,
			-11.889), Vector(-8.858, 4.764, -13.898), Vector(-12.330, 4.859, -17.031), Vector(-15.516, 4.859, -20.543), Vector(-18.294,
			4.859, -24.415), Vector(-20.547, 4.859, -28.086), Vector(-23.326, 4.859, -32.353), Vector(-27.708, 4.859, -34.716), Vector(
			-32.686, 4.859, -34.429), Vector(-37.352, 4.859, -32.047), Vector(-41.289, 4.859, -28.025), Vector(-42.847, 4.859, -22.904),
			Vector(-43.354, 4.859, -17.411), Vector(-44.449, 4.859, -11.985), Vector(-46.131, 4.859, -7.263), Vector(-48.026, 4.859,
			-3.584), Vector(-50.673, 4.821, 0.157), Vector(-54.687, 4.821, -2.726), Vector(-56.610, 4.821, 0.291), Vector(-58.863, 5.709,
			3.676), Vector(-60.852, 7.139, 7.088), Vector(-62.925, 8.050, 10.526), Vector(-64.910, 8.050, 12.750), Vector(-68.628, 8.050,
			10.610), Vector(-72.525, 8.050, 8.226), Vector(-76.126, 8.050, 5.698), Vector(-79.673, 8.050, 2.281), Vector(-82.296, 8.050,
			-0.915), Vector(-84.501, 8.050, -4.714), Vector(-85.693, 8.050, -8.396), Vector(-86.938, 8.050, -12.515), Vector(-88.233,
			8.050, -16.802), Vector(-89.451, 8.050, -20.837), Vector(-90.593, 8.080, -24.620), Vector(-93.874, 8.050, -27.077), Vector(
			-52.513, 4.821, 3.011), Vector(-54.430, 5.768, 6.387), Vector(-56.572, 7.261, 10.027), Vector(-58.405, 8.050, 13.095), Vector(
			-61.236, 8.050, 15.903), Vector(-64.976, 8.050, 15.856), Vector(-69.396, 8.050, 14.343), Vector(-73.248, 8.050, 12.454),
			Vector(-76.938, 8.050, 10.372), Vector(-80.667, 8.050, 7.522), Vector(-83.646, 8.050, 4.457), Vector(-86.523, 8.050, 0.496),
			Vector(-89.076, 8.050, -4.046), Vector(-90.610, 8.050, -8.729), Vector(-92.046, 8.050, -13.538), Vector(-93.360, 8.050,
			-18.298), Vector(-94.590, 8.080, -22.753), Vector(-95.426, 8.050, -25.778));
		Global.ObjectiveB_Nodes = Array();
		Global.Chokepoint = Array();
		Global.Staircase_Top = Array(Vector(45.908, 3.936, 56.616), Vector(57.937, 3.936, 58.352), Vector(32.919, 3.902, 64.707), Vector(
			63.630, 3.522, 37.688), Vector(62.012, 3.821, 37.192), Vector(49.704, 8.740, 46.064), Vector(50.310, 8.909, 46.097), Vector(
			45.787, 3.523, 47.805), Vector(43.005, 3.830, 46.182), Vector(50.434, 3.019, 45.702), Vector(51.382, 8.519, 20.542), Vector(
			55.201, 10.824, 12.484), Vector(36.988, 8.264, 16.852), Vector(27.467, 9.038, -22.629), Vector(38.370, 6.023, -18.361), Vector(
			31.854, 5.473, -9.800), Vector(25.519, 7.505, -5.414), Vector(28.522, 9.561, 0.544), Vector(31.179, 5.473, -9.927), Vector(
			12.412, 7.739, 17.014), Vector(-24.384, 11.392, -38.066), Vector(-25.296, 11.397, -34.827), Vector(-22.147, 9.420, -48.313),
			Vector(-68.303, 12.050, -18.988), Vector(-16.131, 5.654, -0.689), Vector(-19.908, 5.645, 2.117), Vector(-22.209, 5.628, 8.836),
			Vector(-31.643, 10.006, -8.052), Vector(-31.368, 12.113, 5.557), Vector(-30.860, 9.981, -27.486), Vector(3.763, 9.523,
			-21.962), Vector(-64.551, 8.050, 3.487), Vector(-49.394, 8.050, 17.446), Vector(-58.224, 10.193, 29.132), Vector(-63.919,
			12.050, 38.301), Vector(-70.435, 12.050, 35.211), Vector(-71.015, 14.081, 28.609), Vector(-97.212, 14.501, -5.441), Vector(
			-102.922, 12.050, 1.232), Vector(-108.392, 12.050, -5.797), Vector(-98.342, 10.050, 18.778), Vector(-93.527, 10.049, 8.094),
			Vector(-72.274, 10.050, 26.961), Vector(-65.449, 10.050, 25.313), Vector(-66.799, 10.050, 20.372), Vector(-64.653, 12.417,
			5.188), Vector(-80.294, 12.417, -9.631), Vector(-73.165, 12.050, -25.396), Vector(-99.442, 14.501, -11.201), Vector(-95.827,
			8.050, -46.759), Vector(-110.515, 8.050, -44.138));
		Global.Staircase_Bottom = Array(Vector(47.558, 1.810, 52.548), Vector(59.735, 1.661, 53.351), Vector(34.942, 1.907, 59.893),
			Vector(66.671, 2.676, 35.213), Vector(59.013, 2.180, 32.394), Vector(61.699, 4.208, 39.147), Vector(46.201, 7.617, 47.112),
			Vector(45.668, 1.926, 51.584), Vector(38.033, 1.831, 46.037), Vector(54.980, 1.795, 45.078), Vector(35.602, 2.226, 38.686),
			Vector(52.459, 9.454, 12.448), Vector(49.341, 3.668, 7.704), Vector(43.811, 5.433, -18.173), Vector(31.505, 3.699, -16.670),
			Vector(35.095, 3.510, -12.054), Vector(28.847, 5.473, -7.834), Vector(26.065, 7.505, -2.790), Vector(29.035, 3.571, -12.891),
			Vector(11.931, 3.612, 4.488), Vector(-23.274, 9.528, -41.750), Vector(-26.545, 10.129, -30.057), Vector(-13.010, 4.819,
			-50.806), Vector(-65.642, 8.050, -10.250), Vector(-14.658, 4.568, -3.614), Vector(-22.045, 4.858, 0.770), Vector(-24.470,
			4.858, 7.404), Vector(-21.660, 5.030, -12.505), Vector(-28.865, 10.243, 1.554), Vector(-41.711, 4.858, -22.621), Vector(-8.010,
			5.163, -32.623), Vector(-61.314, 4.925, -3.028), Vector(-44.262, 4.950, 9.263), Vector(-55.533, 8.050, 24.264), Vector(-61.643,
			10.193, 34.016), Vector(-67.974, 10.050, 30.354), Vector(-73.634, 12.099, 33.228), Vector(-101.328, 12.050, -1.778), Vector(
			-100.929, 10.050, 5.430), Vector(-101.514, 8.050, -15.912), Vector(-93.647, 8.050, 20.852), Vector(-89.900, 8.050, 10.485),
			Vector(-76.870, 8.050, 24.671), Vector(-63.139, 8.050, 20.948), Vector(-65.294, 8.050, 16.512), Vector(-62.968, 8.050, 9.996),
			Vector(-85.259, 8.050, -6.285), Vector(-80.910, 8.083, -29.143), Vector(-93.860, 8.050, -5.160), Vector(-100.879, 6.050,
			-45.616), Vector(-111.988, 6.050, -48.802));
		Global.Healthkits_Small = Array(Vector(48.353, 3.246, 45.718), Vector(73.014, 1.729, 7.429), Vector(52.700, 3.991, -4.646), Vector(
			-72.974, 8.050, 21.299), Vector(-78.254, 8.050, -22.998));
		Global.Healthkits_Large = Array(Vector(23.680, 3.694, -2.984), Vector(43.939, 3.437, 22.616), Vector(-8.898, 4.567, 0.674), Vector(
			-12.734, 5.038, -47.267), Vector(-56.973, 10.193, 33.394), Vector(-104.934, 12.050, -3.130), Vector(-67.943, 8.050, -13.191));
		Global.Staircase_Middle = Array(0, 0, 0, 0, 0, Vector(55.176, 6.745, 43.185), 0, 0, 0, 0, Vector(44.076, 4.450, 30.990), 0, Vector(
			42.768, 6.020, 11.808), Vector(35.208, 7.579, -23.311), 0, 0, 0, 0, 0, Vector(12.280, 5.559, 11.140), 0, 0, 0, Vector(-63.198,
			10.050, -16.155), 0, 0, 0, 0, 0, 0, Vector(-2.480, 8.168, -23.321), 0, 0, 0, 0, 0, 0, Vector(-100.186, 13.552, -4.143), 0,
			Vector(-107.067, 10.050, -12.525), 0, 0, 0, 0, 0, Vector(-65.732, 11.113, 7.862), Vector(-82.492, 9.689, -5.347), 0, Vector(
			-96.628, 12.614, -12.559), 0, 0);
		Global.Jump_Start = Array(Vector(42.735, 8.471, -0.041), Vector(-39.636, 9.986, -20.662), Vector(-47.487, 10.457, -22.715), Vector(
			-77.067, 14.081, 19.905));
		Global.Jump_End = Array(Vector(43.869, 8.353, -0.169), Vector(-41.615, 10.206, -21.102), Vector(-46.125, 10.467, -22.364), Vector(
			-77.545, 14.109, 18.512));
	}
}

rule("Havana")
{
	event
	{
		Subroutine;
		Havava;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(-89.020, 11.550, -66.866), Vector(-96.843, 5.549, -76.739), Vector(-94.056, 5.550, -79.703),
			Vector(-83.976, 5.550, -79.498), Vector(-74.515, 5.550, -68.503), Vector(-80.147, 5.550, -62.976), Vector(-82.954, 5.550,
			-65.773), Vector(-93.206, 5.675, -63.525), Vector(-93.217, 5.550, -57.960), Vector(-101.223, 5.400, -49.286), Vector(-96.719,
			5.400, -45.068), Vector(-90.119, 5.400, -51.201), Vector(-91.813, 5.400, -39.841), Vector(-87.359, 5.400, -44.178), Vector(
			-74.074, 5.550, -41.870), Vector(-70.087, 5.498, -39.361), Vector(-69.960, 5.569, -42.460), Vector(-66.068, 5.577, -42.229),
			Vector(-61.461, 5.571, -42.072), Vector(-57.679, 5.572, -42.134), Vector(-54.096, 5.578, -42.298), Vector(-56.950, 5.498,
			-39.029), Vector(-54.140, 5.496, -28.329), Vector(-43.140, 7.574, -38.752), Vector(-49.207, 11.533, -43.403), Vector(-44.965,
			11.533, -43.262), Vector(-48.088, 11.550, -38.373), Vector(-38.634, 7.550, -38.687), Vector(-30.082, 7.550, -43.126), Vector(
			-32.168, 7.393, -48.165), Vector(-38.585, 7.399, -46.625), Vector(-27.528, 7.624, -50.875), Vector(-23.504, 7.577, -43.024),
			Vector(-24.152, 7.577, -58.586), Vector(-23.605, 7.577, -66.235), Vector(-13.222, 9.550, -32.862), Vector(-18.003, 7.550,
			-43.418), Vector(-65.348, 7.550, -76.764), Vector(-54.896, 7.550, -76.789), Vector(-54.234, 7.550, -71.648), Vector(-45.238,
			7.550, -63.596), Vector(-47.634, 7.550, -68.544), Vector(-60.863, 7.550, -67.396), Vector(-60.283, 7.550, -61.300), Vector(
			-61.274, 7.540, -55.250), Vector(-56.988, 7.540, -55.395), Vector(-53.423, 7.726, -55.014), Vector(-49.603, 7.721, -54.697),
			Vector(-45.931, 7.730, -54.658), Vector(-53.365, 7.550, -60.775), Vector(-57.218, 7.550, -60.863), Vector(-49.325, 7.550,
			-61.039), Vector(-40.191, 7.550, -62.355), Vector(-40.651, 7.550, -56.822), Vector(-40.573, 7.550, -67.463), Vector(-39.848,
			7.550, -77.051), Vector(-36.295, 7.550, -83.249), Vector(-30.152, 7.550, -84.787), Vector(-24.314, 7.550, -84.637), Vector(
			-24.479, 7.550, -90.087), Vector(-15.786, 7.550, -90.162), Vector(-15.946, 7.550, -85.805), Vector(-10.685, 7.550, -90.869),
			Vector(-30.200, 11.602, -98.202), Vector(-33.094, 11.550, -91.126), Vector(-41.534, 11.550, -98.073), Vector(-52.603, 11.594,
			-90.051), Vector(-53.078, 11.550, -93.864), Vector(-52.789, 11.550, -98.185), Vector(-56.697, 11.550, -94.408), Vector(-46.673,
			11.550, -96.004), Vector(-44.841, 11.584, -91.686), Vector(-12.028, 12.613, -44.138), Vector(-9.528, 12.550, -49.816), Vector(
			-15.891, 12.622, -47.107), Vector(-29.193, 13.550, -51.284), Vector(-29.130, 13.550, -43.272), Vector(-29.044, 13.550,
			-59.319), Vector(-23.903, 13.550, -64.308), Vector(-23.604, 13.550, -58.917), Vector(-24.051, 13.550, -42.977), Vector(-24.144,
			13.550, -51.416), Vector(-19.289, 15.993, -83.984), Vector(-29.708, 15.993, -83.935), Vector(-0.315, 7.550, -89.494), Vector(
			-5.322, 7.550, -87.995), Vector(1.173, 7.550, -96.270), Vector(-18.486, 7.550, -71.522), Vector(-7.666, 7.577, -66.348),
			Vector(0.117, 7.550, -66.852), Vector(-4.407, 7.550, -71.312), Vector(0.192, 7.550, -59.225), Vector(-6.596, 7.577, -60.539),
			Vector(2.330, 7.550, -55.394), Vector(15.719, 7.550, -48.217), Vector(15.669, 7.550, -53.913), Vector(8.058, 7.550, -56.192),
			Vector(7.270, 7.550, -49.048), Vector(22.614, 7.550, -49.938), Vector(34.372, 7.550, -52.461), Vector(34.145, 7.550, -58.871),
			Vector(46.106, 7.559, -63.220), Vector(39.004, 7.550, -63.342), Vector(29.721, 7.550, -63.058), Vector(15.672, 7.550, -61.810),
			Vector(21.838, 7.550, -61.355), Vector(5.689, 13.550, -75.700), Vector(1.398, 13.550, -76.143), Vector(0.554, 13.550, -80.106),
			Vector(-3.030, 13.985, -79.815), Vector(13.919, 13.675, -79.228), Vector(8.955, 7.550, -74.713), Vector(10.275, 7.550,
			-67.823), Vector(-0.377, 7.550, -83.539), Vector(5.592, 7.550, -83.594), Vector(4.809, 7.550, -96.267), Vector(5.310, 7.550,
			-89.304), Vector(17.563, 7.550, -88.540), Vector(17.577, 7.550, -83.065), Vector(27.265, 7.550, -82.955), Vector(26.966, 7.550,
			-71.443), Vector(63.685, 12.550, -68.542), Vector(56.110, 12.550, -69.996), Vector(55.934, 12.658, -75.808), Vector(49.447,
			12.550, -67.416), Vector(44.803, 12.618, -66.791), Vector(46.499, 12.552, -63.590), Vector(43.827, 13.212, -61.695), Vector(
			34.265, 13.550, -61.480), Vector(27.503, 13.550, -62.136), Vector(27.436, 13.550, -68.842), Vector(27.367, 11.550, -86.934),
			Vector(23.285, 11.550, -87.411), Vector(28.468, 11.550, -95.283), Vector(34.152, 11.551, -94.792), Vector(33.100, 11.551,
			-87.611), Vector(48.616, 11.550, -97.063), Vector(40.049, 11.550, -89.243), Vector(52.359, 7.550, -99.203), Vector(60.688,
			7.550, -93.073), Vector(57.197, 7.550, -89.767), Vector(48.497, 7.550, -88.916), Vector(39.126, 7.550, -87.146), Vector(53.268,
			7.550, -79.282), Vector(61.567, 7.613, -78.063), Vector(65.313, 13.550, -82.688), Vector(62.322, 13.615, -82.954), Vector(
			68.240, 7.543, -93.437), Vector(79.753, 8.550, -119.091), Vector(71.459, 8.550, -119.558), Vector(69.663, 6.541, -101.813),
			Vector(69.279, 7.048, -97.201), Vector(81.130, 6.543, -101.586), Vector(76.950, 6.543, -99.657), Vector(78.822, 6.068,
			-92.235), Vector(74.703, 7.543, -90.617), Vector(68.936, 7.543, -89.580), Vector(78.680, 5.541, -87.813), Vector(86.292, 5.468,
			-90.301), Vector(123.413, 6.354, -18.896), Vector(138.872, 6.456, -19.271), Vector(138.507, 6.988, -26.614), Vector(125.818,
			7.550, -33.120), Vector(136.629, 7.549, -38.548), Vector(127.117, 7.553, -39.617), Vector(121.713, 6.975, -29.687), Vector(
			111.333, 8.585, -34.330), Vector(114.194, 8.582, -40.820), Vector(114.239, 8.533, -52.005), Vector(111.615, 8.519, -58.524),
			Vector(116.506, 8.455, -57.608), Vector(125.091, 7.550, -57.404), Vector(125.292, 7.550, -50.091), Vector(132.092, 7.548,
			-49.951), Vector(133.187, 7.550, -62.853), Vector(125.765, 7.550, -62.529), Vector(127.447, 13.832, -64.012), Vector(129.330,
			13.600, -53.289), Vector(122.657, 14.010, -58.871), Vector(117.005, 14.702, -57.887), Vector(158.900, 12.569, -62.021), Vector(
			159.597, 12.551, -46.291), Vector(159.309, 12.557, -30.464), Vector(172.959, 12.500, -46.923), Vector(177.158, 11.550,
			-55.562), Vector(192.169, 11.550, -59.057), Vector(177.776, 11.550, -37.853), Vector(189.410, 11.550, -35.788), Vector(199.013,
			11.550, -46.388), Vector(185.295, 12.800, -46.604), Vector(147.137, 10.550, -26.944), Vector(140.201, 11.509, -27.398), Vector(
			133.222, 11.548, -27.016), Vector(124.356, 11.563, -34.139), Vector(126.836, 11.492, -29.243), Vector(98.480, 10.501, -24.317),
			Vector(99.733, 10.643, -17.769), Vector(99.869, 10.625, -31.428), Vector(95.211, 10.612, -35.788), Vector(92.498, 10.550,
			-24.861), Vector(78.016, 8.550, -29.581), Vector(77.953, 8.594, -34.570), Vector(77.922, 8.594, -41.114), Vector(82.400, 8.550,
			-45.663), Vector(81.771, 8.543, -52.889), Vector(91.187, 8.510, -44.490), Vector(85.912, 8.643, -56.852), Vector(89.602, 8.326,
			-51.879), Vector(78.882, 8.541, -59.569), Vector(81.154, 8.643, -61.737), Vector(77.187, 8.543, -66.693), Vector(74.446, 8.173,
			-77.038), Vector(70.078, 7.543, -77.050), Vector(87.488, 13.661, -48.970), Vector(78.362, 13.508, -41.933), Vector(-108.665,
			5.517, -56.816), Vector(-85.631, 9.771, -49.401), Vector(-79.524, 9.771, -56.453));
		Global.Healthkits = Array(Vector(-15.592, 7.550, -45.656), Vector(-44.710, 7.550, -36.331), Vector(-51.284, 7.550, -78.217),
			Vector(-7.861, 7.577, -59.171), Vector(41.102, 7.550, -54.976), Vector(10.151, 7.550, -89.212), Vector(28.624, 5.550, -94.943),
			Vector(28.435, 11.550, -97.503), Vector(96.874, 3.545, -72.593), Vector(86.383, 5.481, -87.425), Vector(114.287, 2.598,
			-22.897), Vector(130.728, 6.523, -19.598), Vector(131.932, 7.550, -28.440), Vector(85.884, 8.550, -47.689));
		Global.ObjectiveA_Nodes = Array(Vector(-81.445, 5.400, -46.866), Vector(-80.617, 5.400, -49.969), Vector(-77.221, 5.400, -51.839),
			Vector(-72.955, 5.400, -52.706), Vector(-68.382, 5.400, -52.767), Vector(-63.633, 5.400, -52.740), Vector(-58.532, 5.400,
			-52.667), Vector(-53.379, 5.930, -52.611), Vector(-48.247, 6.728, -52.611), Vector(-43.193, 7.401, -52.611), Vector(-38.333,
			7.401, -54.048), Vector(-36.342, 7.401, -58.281), Vector(-35.922, 7.403, -63.640), Vector(-35.580, 7.404, -68.740), Vector(
			-35.183, 7.403, -74.017), Vector(-33.500, 7.400, -78.935), Vector(-28.952, 7.400, -81.086), Vector(-23.942, 7.400, -81.377),
			Vector(-18.406, 7.400, -81.344), Vector(-13.242, 7.400, -81.174), Vector(-7.850, 7.400, -80.996), Vector(-3.892, 7.550,
			-80.866), Vector(-78.527, 5.400, -46.204), Vector(-75.693, 5.400, -47.809), Vector(-71.479, 5.400, -49.024), Vector(-66.730,
			5.400, -48.999), Vector(-61.981, 5.400, -48.893), Vector(-57.496, 5.400, -48.837), Vector(-52.789, 6.022, -48.837), Vector(
			-47.831, 6.794, -48.837), Vector(-42.913, 7.402, -48.837), Vector(-38.288, 7.402, -49.011), Vector(-34.792, 7.398, -51.519),
			Vector(-32.705, 7.398, -55.374), Vector(-31.945, 7.398, -60.303), Vector(-31.845, 7.394, -64.792), Vector(-31.729, 7.394,
			-69.102), Vector(-30.787, 7.399, -73.351), Vector(-27.477, 7.399, -75.246), Vector(-22.351, 7.399, -75.786), Vector(-18.065,
			7.401, -75.882), Vector(-13.619, 7.401, -75.980), Vector(-9.334, 7.401, -75.874), Vector(-5.444, 7.550, -75.743), Vector(
			-1.835, 7.550, -75.493), Vector(-1.832, 7.550, -81.167), Vector(1.600, 7.550, -80.647), Vector(5.903, 7.520, -80.775), Vector(
			10.740, 7.529, -80.901), Vector(15.661, 7.537, -81.017), Vector(20.054, 7.425, -79.652), Vector(21.691, 7.517, -75.258),
			Vector(21.852, 7.530, -70.689), Vector(25.914, 7.527, -68.847), Vector(30.560, 7.504, -68.513), Vector(35.042, 7.513, -68.648),
			Vector(38.490, 7.527, -71.419), Vector(38.725, 7.512, -76.194), Vector(38.863, 7.502, -80.908), Vector(41.558, 7.483, -84.290),
			Vector(46.558, 7.506, -84.567), Vector(52.186, 7.508, -84.568), Vector(57.813, 7.419, -84.730), Vector(61.859, 7.438, -84.900),
			Vector(65.868, 7.482, -84.942), Vector(1.510, 7.550, -75.653), Vector(5.550, 7.550, -75.752), Vector(10.123, 7.550, -75.955),
			Vector(14.194, 7.550, -76.194), Vector(17.888, 7.613, -75.713), Vector(18.304, 7.541, -70.985), Vector(19.029, 7.504, -66.490),
			Vector(23.396, 7.527, -65.540), Vector(28.146, 7.527, -65.540), Vector(33.158, 7.529, -65.513), Vector(38.083, 7.530, -65.458),
			Vector(41.107, 7.469, -68.713), Vector(41.335, 7.492, -73.711), Vector(41.471, 7.503, -78.460), Vector(44.660, 7.498, -81.958),
			Vector(50.542, 7.521, -81.651), Vector(55.979, 7.468, -81.286), Vector(60.908, 7.448, -81.211), Vector(65.481, 7.451, -81.211),
			Vector(69.682, 7.594, -85.622), Vector(72.845, 7.053, -85.326), Vector(77.151, 5.619, -85.014), Vector(81.692, 5.545, -83.991),
			Vector(85.965, 5.547, -82.413), Vector(89.763, 5.526, -79.024), Vector(90.866, 5.477, -74.506), Vector(91.737, 5.395, -69.725),
			Vector(92.910, 5.451, -65.140), Vector(94.045, 6.239, -60.661), Vector(95.057, 7.528, -56.218), Vector(95.808, 8.347, -51.920),
			Vector(99.173, 8.518, -49.020), Vector(104.152, 8.569, -48.510), Vector(108.985, 8.578, -48.674), Vector(114.002, 8.593,
			-48.733), Vector(119.048, 8.021, -48.609), Vector(123.849, 7.628, -48.516), Vector(128.510, 7.628, -48.508), Vector(133.083,
			7.628, -48.560), Vector(137.387, 7.628, -48.697), Vector(141.343, 7.613, -48.851), Vector(144.213, 7.666, -46.573), Vector(
			142.179, 7.654, -43.643), Vector(138.926, 7.613, -43.514), Vector(134.540, 7.563, -43.595), Vector(129.791, 7.580, -43.700),
			Vector(125.042, 7.571, -43.805), Vector(120.219, 7.769, -43.888), Vector(115.054, 8.584, -43.945), Vector(109.837, 8.584,
			-44.002), Vector(104.648, 8.574, -44.059), Vector(99.729, 8.552, -44.219), Vector(95.133, 8.550, -46.149), Vector(92.493,
			8.408, -50.563), Vector(91.146, 7.709, -55.569), Vector(89.779, 6.185, -60.751), Vector(88.533, 5.541, -65.633), Vector(87.571,
			5.545, -71.180), Vector(86.845, 5.545, -76.573), Vector(84.104, 5.545, -79.665), Vector(78.872, 5.545, -80.263), Vector(74.126,
			6.624, -80.113), Vector(69.635, 7.593, -79.969));
		Global.ObjectiveB_Nodes = Array();
		Global.Chokepoint = Array();
		Global.Staircase_Top = Array(Vector(-97.085, 11.550, -58.939), Vector(-49.090, 7.550, -36.396), Vector(-49.063, 11.550, -32.836),
			Vector(-15.496, 9.550, -34.887), Vector(-9.568, 12.550, -41.282), Vector(-65.572, 7.550, -66.635), Vector(-66.779, 7.550,
			-69.206), Vector(-19.140, 11.601, -96.556), Vector(-37.444, 11.550, -96.430), Vector(-50.699, 11.550, -92.112), Vector(-21.407,
			13.550, -51.122), Vector(34.055, 13.550, -57.052), Vector(-43.082, 7.550, -45.155), Vector(57.267, 7.550, -75.866), Vector(
			48.646, 7.559, -67.198), Vector(5.419, 13.627, -71.392), Vector(21.913, 11.550, -96.514), Vector(22.842, 7.623, -101.229),
			Vector(39.041, 7.550, -90.819), Vector(42.806, 11.551, -93.428), Vector(64.050, 11.550, -101.008), Vector(65.189, 13.550,
			-92.465), Vector(65.090, 13.551, -77.278), Vector(27.312, 13.550, -74.456), Vector(47.020, 12.550, -68.919), Vector(69.268,
			8.550, -113.890), Vector(81.166, 8.644, -113.470), Vector(93.265, 5.067, -82.888), Vector(97.868, 8.274, -52.864), Vector(
			102.040, 3.770, -65.144), Vector(106.825, 3.397, -36.168), Vector(97.535, 8.485, -43.073), Vector(119.736, 6.496, -21.304),
			Vector(147.394, 10.571, -32.213), Vector(143.635, 10.583, -57.761), Vector(136.608, 13.563, -63.592), Vector(155.362, 12.537,
			-62.507), Vector(155.362, 12.539, -30.490), Vector(92.225, 10.640, -31.772), Vector(82.301, 10.550, -35.136), Vector(85.407,
			13.550, -42.167), Vector(84.763, 10.550, -25.847));
		Global.Staircase_Bottom = Array(Vector(-106.162, 5.550, -67.890), Vector(-49.278, 5.550, -28.857), Vector(-38.677, 7.550, -32.743),
			Vector(-15.434, 7.549, -40.103), Vector(-9.715, 9.550, -34.305), Vector(-65.839, 5.550, -61.462), Vector(-69.807, 5.550,
			-66.207), Vector(-9.707, 7.550, -96.520), Vector(-37.406, 7.549, -87.676), Vector(-44.450, 7.548, -85.975), Vector(-15.749,
			7.577, -64.874), Vector(18.465, 7.550, -56.927), Vector(-48.115, 5.550, -45.138), Vector(57.210, 5.550, -70.815), Vector(
			53.496, 5.550, -67.224), Vector(11.757, 7.550, -61.580), Vector(13.033, 7.550, -96.782), Vector(27.472, 5.550, -101.077),
			Vector(38.733, 5.550, -95.574), Vector(51.968, 7.550, -93.517), Vector(54.810, 7.550, -100.884), Vector(65.213, 11.550,
			-97.574), Vector(75.652, 8.543, -72.904), Vector(27.182, 11.550, -79.863), Vector(47.422, 7.550, -79.808), Vector(69.293,
			6.550, -108.870), Vector(81.096, 6.550, -108.780), Vector(101.834, 3.587, -76.534), Vector(102.155, 3.656, -69.334), Vector(
			105.584, 1.294, -52.031), Vector(106.360, 1.518, -45.279), Vector(104.437, 3.883, -34.519), Vector(114.036, 2.827, -31.435),
			Vector(138.834, 7.549, -32.018), Vector(133.916, 7.548, -57.502), Vector(143.955, 10.569, -63.366), Vector(151.385, 10.625,
			-62.533), Vector(151.179, 10.548, -30.601), Vector(92.099, 8.550, -36.224), Vector(82.263, 8.550, -40.291), Vector(85.378,
			10.550, -35.068), Vector(79.621, 8.550, -25.897));
		Global.Healthkits_Small = Array(Vector(-15.592, 7.550, -45.656), Vector(-44.710, 7.550, -36.331), Vector(-51.284, 7.550, -78.217),
			Vector(10.151, 7.550, -89.212), Vector(28.624, 5.550, -94.943), Vector(28.435, 11.550, -97.503), Vector(86.383, 5.481,
			-87.425), Vector(114.287, 2.598, -22.897), Vector(131.932, 7.550, -28.440), Vector(85.884, 8.550, -47.689));
		Global.Healthkits_Large = Array(Vector(-7.861, 7.577, -59.171), Vector(41.102, 7.550, -54.976), Vector(96.874, 3.545, -72.593),
			Vector(130.728, 6.523, -19.598));
		Global.Staircase_Middle = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, Vector(-49.661, 9.550, -86.498), Vector(-15.976, 12.550, -52.242), 0, 0,
			0, 0, Vector(6.424, 9.550, -61.880), 0, 0, 0, 0, 0, 0, Vector(65.449, 12.550, -73.227), 0, 0, 0, 0, 0, Vector(97.022, 5.083,
			-65.056), Vector(102.220, 2.575, -57.735), 0, Vector(98.423, 5.846, -36.754), Vector(119.191, 3.454, -31.437), 0, 0, 0, 0, 0,
			0, 0, 0, 0);
		Global.Jump_Start = Array();
		Global.Jump_End = Array();
	}
}

disabled rule("----------------------------------- Subroutine ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- Track Sombra Stealth ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Setup Sombra")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
	}

	actions
	{
		Event Player.Invisible_Cooldown = 1.500;
		Event Player.In_Combat_Array = Empty Array;
		Event Player.Is_Visible_Array = Empty Array;
		Chase Player Variable At Rate(Event Player, Invisible_Cooldown, 0, Event Player.In_Combat_Array == Empty Array ? 1 : 0,
			Destination and Rate);
	}
}

rule("Reset In Combat - Objective")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
		(Is Team On Defense(Team Of(Event Player)) ? Is On Objective(Event Player) && Is True For Any(All Living Players(Opposite Team Of(
			Team Of(Event Player))), Is On Objective(Current Array Element)) : Is On Objective(Event Player)) == True;
	}

	actions
	{
		Skip If(Array Contains(Event Player.In_Combat_Array, Custom String("On Objective")), 1);
		Modify Player Variable(Event Player, In_Combat_Array, Append To Array, Custom String("On Objective"));
		Wait Until((Is Team On Defense(Team Of(Event Player)) ? Is On Objective(Event Player) && Is True For Any(All Living Players(
			Opposite Team Of(Team Of(Event Player))), Is On Objective(Current Array Element)) : Is On Objective(Event Player)) != True,
			99999);
		Wait(2, Restart When True);
		Modify Player Variable(Event Player, In_Combat_Array, Remove From Array By Value, Custom String("On Objective"));
	}
}

rule("Reset In Combat - Taken Damage")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
	}

	actions
	{
		Event Player.Invisible_Cooldown = 1.500;
		Modify Player Variable(Event Player, In_Combat_Array, Append To Array, Custom String("Took Damage"));
		Wait(2, Restart When True);
		Modify Player Variable(Event Player, In_Combat_Array, Remove From Array By Value, Custom String("Took Damage"));
	}
}

rule("Reset In Combat - Firing Primary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Event Player.Invisible_Cooldown = 1.500;
		Skip If(Array Contains(Event Player.In_Combat_Array, Custom String("Firing Primary")), 1);
		Modify Player Variable(Event Player, In_Combat_Array, Append To Array, Custom String("Firing Primary"));
		Wait Until(!Is Firing Primary(Event Player), 99999);
		Wait(2, Restart When True);
		Modify Player Variable(Event Player, In_Combat_Array, Remove From Array By Value, Custom String("Firing Primary"));
	}
}

rule("Reset In Combat - EMP")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.Invisible_Cooldown = 1.500;
		Skip If(Array Contains(Event Player.In_Combat_Array, Custom String("Used EMP")), 1);
		Modify Player Variable(Event Player, In_Combat_Array, Append To Array, Custom String("Used EMP"));
		Wait(2, Ignore Condition);
		Modify Player Variable(Event Player, In_Combat_Array, Remove From Array By Value, Custom String("Used EMP"));
	}
}

rule("Reset In Combat - Quick Melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
		Is Meleeing(Event Player) == True;
	}

	actions
	{
		Event Player.Invisible_Cooldown = 1.500;
		Skip If(Array Contains(Event Player.In_Combat_Array, Custom String("Quick Melee")), 1);
		Modify Player Variable(Event Player, In_Combat_Array, Append To Array, Custom String("Quick Melee"));
		Wait Until(!Is Meleeing(Event Player), 99999);
		Wait(2, Restart When True);
		Modify Player Variable(Event Player, In_Combat_Array, Remove From Array By Value, Custom String("Quick Melee"));
	}
}

rule("Reset In Combat - Virus")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.Invisible_Cooldown = 1.500;
		Skip If(Array Contains(Event Player.In_Combat_Array, Custom String("Used Virus")), 1);
		Modify Player Variable(Event Player, In_Combat_Array, Append To Array, Custom String("Used Virus"));
		Wait Until(!Is Using Ability 1(Event Player), 99999);
		Wait(2, Restart When True);
		Modify Player Variable(Event Player, In_Combat_Array, Remove From Array By Value, Custom String("Used Virus"));
	}
}

rule("Reset In Combat - Hacking Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
		Event Player.Invisible_Cooldown == 0;
		(Is Firing Secondary(Event Player) && Is True For Any(Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))),
			!Has Status(Current Array Element, Hacked)), Distance Between(Event Player, Current Array Element)
			<= 15 && Is In Line of Sight(Eye Position(Event Player), Current Array Element, Barriers Do Not Block LOS) && Is In View Angle(
			Event Player, Current Array Element, 40))) == True;
	}

	actions
	{
		Event Player.Invisible_Cooldown = 1.500;
		Skip If(Array Contains(Event Player.In_Combat_Array, Custom String("Hacking Player")), 1);
		Modify Player Variable(Event Player, In_Combat_Array, Append To Array, Custom String("Hacking Player"));
		Wait Until((Is Firing Secondary(Event Player) && Is True For Any(Filtered Array(All Living Players(Opposite Team Of(Team Of(
			Event Player))), !Has Status(Current Array Element, Hacked)), Distance Between(Event Player, Current Array Element)
			<= 15 && Is In Line of Sight(Eye Position(Event Player), Current Array Element, Barriers Do Not Block LOS) && Is In View Angle(
			Event Player, Current Array Element, 40))) != True, 99999);
		Wait(2, Restart When True);
		Modify Player Variable(Event Player, In_Combat_Array, Remove From Array By Value, Custom String("Hacking Player"));
	}
}

rule("Is Visible - Hacking Medkit")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
		Event Player.Invisible_Cooldown == 0;
		(Is Firing Secondary(Event Player) && Is True For Any(Global.Healthkits, Distance Between(Event Player, Current Array Element)
			<= 15 && Is In Line of Sight(Eye Position(Event Player), Current Array Element, Barriers Do Not Block LOS) && Is In View Angle(
			Event Player, Current Array Element - Vector(0, 1.550, 0), 40))) == True;
	}

	actions
	{
		Skip If(Array Contains(Event Player.Is_Visible_Array, Custom String("Hacking Medkit")), 1);
		Modify Player Variable(Event Player, Is_Visible_Array, Append To Array, Custom String("Hacking Medkit"));
		Wait Until((Is Firing Secondary(Event Player) && Is True For Any(Global.Healthkits, Distance Between(Event Player,
			Current Array Element) <= 15 && Is In Line of Sight(Eye Position(Event Player), Current Array Element,
			Barriers Do Not Block LOS) && Is In View Angle(Event Player, Current Array Element - Vector(0, 1.550, 0), 40))) != True,
			99999);
		Modify Player Variable(Event Player, Is_Visible_Array, Remove From Array By Value, Custom String("Hacking Medkit"));
	}
}

rule("Is Visible - Infra-Sight")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
		Event Player.Invisible_Cooldown == 0;
		Is True For Any(Players On Hero(Hero(Widowmaker), Opposite Team Of(Team Of(Event Player))), Is Using Ultimate(
			Current Array Element)) == True;
	}

	actions
	{
		Skip If(Array Contains(Event Player.Is_Visible_Array, Custom String("Infra-Sight")), 1);
		Modify Player Variable(Event Player, Is_Visible_Array, Append To Array, Custom String("Infra-Sight"));
		Wait Until(!Is True For Any(Players On Hero(Hero(Widowmaker), Opposite Team Of(Team Of(Event Player))), Is Using Ultimate(
			Current Array Element)), 99999);
		Modify Player Variable(Event Player, Is_Visible_Array, Remove From Array By Value, Custom String("Infra-Sight"));
	}
}

rule("Not In Combat - Translocator")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
		Is Using Ability 2(Event Player) == True;
		Event Player.Invisible_Cooldown != 0;
	}

	actions
	{
		Wait Until(!Is Using Ability 2(Event Player), 0.250);
		Event Player.In_Combat_Array = Empty Array;
		Event Player.Invisible_Cooldown -= Min(Event Player.Invisible_Cooldown, 0.500);
	}
}

rule("Exit Invisiblity - Primary, Virus, Quick Melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
		Event Player.Invisible_Cooldown == 0;
		Is True For Any(Array(Button(Primary Fire), Button(Ability 1), Button(Melee)), Is Button Held(Event Player, Current Array Element))
			== True;
	}

	actions
	{
		Event Player.Invisible_Cooldown = 1.500;
		Skip If(Array Contains(Event Player.In_Combat_Array, Custom String("Button Press - Exit")), 1);
		Modify Player Variable(Event Player, In_Combat_Array, Append To Array, Custom String("Button Press - Exit"));
		Wait(2, Ignore Condition);
		Modify Player Variable(Event Player, In_Combat_Array, Remove From Array By Value, Custom String("Button Press - Exit"));
	}
}

rule("Exit Invisiblity - EMP")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Being Duplicated(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Sombra)) == True;
		Event Player.Invisible_Cooldown == 0;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Event Player.Invisible_Cooldown = 1.500;
		Skip If(Array Contains(Event Player.In_Combat_Array, Custom String("EMP Press - Exit")), 1);
		Modify Player Variable(Event Player, In_Combat_Array, Append To Array, Custom String("EMP Press - Exit"));
		Wait(2, Ignore Condition);
		Modify Player Variable(Event Player, In_Combat_Array, Remove From Array By Value, Custom String("EMP Press - Exit"));
	}
}

disabled rule("----------------------------------- Track Sombra Stealth ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}
