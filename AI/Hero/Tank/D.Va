settings
{
	main
	{
		Mode Name: "D.VA AI - 4FGE0"
	}

	lobby
	{
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Max Team 1 Players: 4
		Max Team 2 Players: 4
		Return To Lobby: Never
	}

	modes
	{
		Assault
		{
			Game Mode Start: Immediately
			Tank Role Passive Health Bonus: Always Enabled
		}

		General
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}
	}

	heroes
	{
		General
		{
			disabled heroes
			{
				Mauga
			}
		}
	}

	extensions
	{
		Spawn More Dummy Bots
	}
}

variables
{
	global:
		0: Path_Nodes
		1: Healthkits
		2: Defense_Amount_Desired
		3: Offense_Amount_Desired
		4: Used_Healthkit
		5: Objective1_Node
		6: Objective2_Node
		7: Defense_Amount_Currently
		8: Offense_Amount_Currently

	player:
		0: Walk_To_Position
		1: Current_Node
		2: Targets
		3: Self_Destuct_Pos
		4: Node_Options
		5: Player_Position
		6: Self_Destruct_Timer
		7: Walk_Max
		8: Walk_Min
		9: Booster_Timer
		10: Cooldown_Nodes
		11: Self_Destruct_Dir
		27: Target_Order
		66: CD_Nodes_Timer
		67: Node_Timer_Index
		127: Ignore_Lower_Nodes
}

subroutines
{
	0: Hanamura
	1: Horizon
	2: Paris
	3: Temple_of_Anubus
	4: Volskaya
	9: Node_Setup
}

rule("------------------------------------------- Made By Spiderman318 | YT Spiderman318 ---------------------------------------")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Call Subroutine(Node_Setup);
		Global.Defense_Amount_Desired = Workshop Setting Integer(Custom String("AI"), Custom String("Defense Amount"), 1, 0, 5, 0);
		Global.Offense_Amount_Desired = Workshop Setting Integer(Custom String("AI"), Custom String("Offense Amount"), 1, 0, 5, 0);
	}
}

disabled rule("----------------------------------- AI Communicate ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Bot Say Hello")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Hello) == True;
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Communicate(Filtered Array(Remove From Array(All Living Players(Team Of(Event Player)), Event Player), Is In View Angle(
			Event Player, Eye Position(Current Array Element), 45) == True && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Current Array Element), Barriers Do Not Block LOS) == True && Distance Between(Event Player, Current Array Element)
			< 20 && Is Dummy Bot(Current Array Element)), Hello);
	}
}

rule("Bot Say Need Help")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Need Help) != True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Communicate(Event Player, Need Help);
		Wait(8, Ignore Condition);
	}
}

rule("Bot Say Need Healing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Need Healing) != True;
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.800;
	}

	actions
	{
		Communicate(Event Player, Need Healing);
		Wait(8, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bot Say Understood")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Ultimate Status) == True;
		Is Dummy Bot(Event Player) != True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Communicate(Filtered Array(Remove From Array(All Living Players(Team Of(Event Player)), Event Player), Is Dummy Bot(
			Current Array Element)), Acknowledge);
	}
}

rule("Bot Say Thanks")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Thanks) != True;
		Is Dummy Bot(Event Player) == True;
		Healer != Healee;
		Entity Exists(Healer) == True;
	}

	actions
	{
		Communicate(Event Player, Thanks);
		Wait(8, Ignore Condition);
	}
}

disabled rule("----------------------------------- AI Communicate ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- Pathfinder ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Pathfind Melee/Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Magnitude Of(Throttle Of(Event Player)) > 0;
		Is Alive(Event Player) == True;
		Speed Of(Event Player) < 2;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(Max(Server Load / 1000, 0.250), Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Wait(Max(Server Load / 1000, 0.250), Ignore Condition);
		Press Button(Event Player, Button(Melee));
		Loop If Condition Is True;
	}
}

rule("Used Healthkit")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Event Was Health Pack == True;
		Is In Spawn Room(Event Player) != True;
		Entity Exists(Healer) != True;
	}

	actions
	{
		Modify Global Variable(Used_Healthkit, Append To Array, First Of(Sorted Array(Global.Healthkits, Distance Between(Event Player,
			Current Array Element))));
		All Players(All Teams).Walk_To_Position = Null;
		Wait(12, Ignore Condition);
		Modify Global Variable(Used_Healthkit, Remove From Array By Value, Last Of(Global.Used_Healthkit));
	}
}

rule("Node Timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Count Of(Event Player.CD_Nodes_Timer) > 0;
	}

	actions
	{
		For Player Variable(Event Player, Node_Timer_Index, Count Of(Event Player.CD_Nodes_Timer) - 1, 0, -1);
			If(Event Player.CD_Nodes_Timer[Event Player.Node_Timer_Index] <= 1);
				Modify Player Variable(Event Player, Cooldown_Nodes, Remove From Array By Index, Event Player.Node_Timer_Index);
				Modify Player Variable(Event Player, CD_Nodes_Timer, Remove From Array By Index, Event Player.Node_Timer_Index);
			Else;
				Event Player.CD_Nodes_Timer[Event Player.Node_Timer_Index] -= 1;
			End;
			Wait(Min(Server Load / 1000, 0.100), Ignore Condition);
		End;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Current Node")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.Walk_To_Position == Vector(X Component Of(Event Player.Walk_To_Position), Y Component Of(
			Event Player.Walk_To_Position), Z Component Of(Event Player.Walk_To_Position));
	}

	actions
	{
		Skip If(Y Component Of(Position Of(Event Player)) + 2.550 >= Y Component Of(Event Player.Walk_To_Position), 1);
		Event Player.Ignore_Lower_Nodes = 5;
		If(Distance Between(Vector(X Component Of(Position Of(Event Player)), Y Component Of(Event Player.Current_Node), Z Component Of(
			Position Of(Event Player))), Event Player.Current_Node) < Max(Horizontal Speed Of(Event Player) / 5, 2));
			Modify Player Variable(Event Player, Cooldown_Nodes, Append To Array, Event Player.Current_Node);
			Modify Player Variable(Event Player, CD_Nodes_Timer, Append To Array, 8);
		End;
		Event Player.Player_Position = Position Of(Event Player);
		Event Player.Node_Options = Filtered Array(Global.Path_Nodes, !Array Contains(Event Player.Cooldown_Nodes, Current Array Element));
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Event Player, Current Array Element) <= 30);
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Is In Line of Sight(Eye Position(Event Player),
			Current Array Element, Barriers Do Not Block LOS) == True);
		Skip If(Event Player.Ignore_Lower_Nodes == Null, 1);
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Y Component Of(Position Of(Event Player))
			+ 1.550 - 0.550 < Y Component Of(Current Array Element));
		Skip If(Is Using Ability 1(Event Player), 1);
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Y Component Of(Ray Cast Hit Position(Eye Position(
			Event Player), World Vector Of(Vector(0, -999, 0), Event Player, Rotation And Translation), All Players(All Teams),
			Event Player, True)) + 1.550 + 1.200 > Y Component Of(Current Array Element));
		If(Ability Cooldown(Event Player, Button(Ability 1)) == Null || Is Using Ability 1(Event Player));
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
				Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
				Event Player), Current Array Element) / 2), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 2) + Vector(0, -99, 0), Null,
				All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 2))
				< 2.550 || Distance Between(Eye Position(Event Player), Current Array Element) < 12 * Event Player.Booster_Timer);
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
				Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
				Event Player), Current Array Element) / 4), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 4) + Vector(0, -99, 0), Null,
				All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 4))
				< 2.550 || Distance Between(Eye Position(Event Player), Current Array Element) < 12 * Event Player.Booster_Timer);
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
				Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
				Event Player), Current Array Element) / 1.200), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 1.200) + Vector(0, -99, 0),
				Null, All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 1.200))
				< 2.550 || Distance Between(Eye Position(Event Player), Current Array Element) < 12 * Event Player.Booster_Timer);
		Else;
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
				Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
				Event Player), Current Array Element) / 1.200), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 1.200) + Vector(0, -99, 0),
				Null, All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 1.200)) < Max(Min(
				Y Component Of(Position Of(Event Player)) + 2.550 - Y Component Of(Current Array Element),
				Event Player.Ignore_Lower_Nodes != Null ? 2.550 : 20), 2.550));
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
				Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
				Event Player), Current Array Element) / 2), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 2) + Vector(0, -99, 0), Null,
				All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 2)) < Max(Min(Y Component Of(
				Position Of(Event Player)) + 2.550 - Y Component Of(Current Array Element),
				Event Player.Ignore_Lower_Nodes != Null ? 2.550 : 20), 2.550));
			Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
				Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
				Event Player), Current Array Element) / 4), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 4) + Vector(0, -99, 0), Null,
				All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
				Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 4)) < Max(Min(Y Component Of(
				Position Of(Event Player)) + 2.550 - Y Component Of(Current Array Element),
				Event Player.Ignore_Lower_Nodes != Null ? 2.550 : 20), 2.550));
		End;
		Event Player.Node_Options = Sorted Array(Event Player.Node_Options, Distance Between(Event Player, Current Array Element)
			+ Distance Between(Event Player.Walk_To_Position, Current Array Element));
		If(Count Of(Event Player.Node_Options) == 0);
			Event Player.Cooldown_Nodes = Empty Array;
			Event Player.CD_Nodes_Timer = Empty Array;
		End;
		Event Player.Current_Node = First Of(Event Player.Node_Options);
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop;
	}
}

rule("Walk To Target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Event Player.Walk_To_Position = Position Of(First Of(Event Player.Target_Order)) + Vector(0, 1.550, 0);
		Event Player.Walk_Max = Is In Alternate Form(Event Player) ? 40 : 10;
		Event Player.Walk_Min = Is In Alternate Form(Event Player) ? 35 : 0;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Walk To Objective")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Entity Exists(First Of(Event Player.Target_Order)) != True;
		Is On Objective(Event Player) != True;
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) >= 0.800;
		(Is Team On Offense(Team Of(Event Player)) ? Is Game In Progress : Is Alive(Event Player)) == True;
	}

	actions
	{
		Event Player.Walk_To_Position = Is Objective Complete(0) ? Random Value In Array(Global.Objective2_Node) : Random Value In Array(
			Global.Objective1_Node);
		Event Player.Walk_Max = 4;
		Event Player.Walk_Min = 2;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Walk To Healthkit")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Entity Exists(First Of(Event Player.Target_Order)) != True;
		Normalized Health(Event Player) < 0.800;
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Event Player.Walk_To_Position = First Of(Sorted Array(Filtered Array(Global.Healthkits, Array Contains(Global.Used_Healthkit,
			Current Array Element) != True), Distance Between(Current Array Element, Event Player)));
		Event Player.Walk_Max = 1;
		Event Player.Walk_Min = 1;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("----------------------------------- Pathfinder ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- Nodes ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Nodes Setup")
{
	event
	{
		Subroutine;
		Node_Setup;
	}

	actions
	{
		If(Current Map == Map(Hanamura) || Current Map == Map(Hanamura Winter));
			Call Subroutine(Hanamura);
			Abort;
		End;
		If(Current Map == Map(Horizon Lunar Colony));
			Call Subroutine(Horizon);
			Abort;
		End;
		If(Current Map == Map(Paris));
			Call Subroutine(Paris);
			Abort;
		End;
		If(Current Map == Map(Temple of Anubis));
			Call Subroutine(Temple_of_Anubus);
			Abort;
		End;
		If(Current Map == Map(Volskaya Industries));
			Call Subroutine(Volskaya);
			Abort;
		End;
	}
}

rule("Hanamura")
{
	event
	{
		Subroutine;
		Hanamura;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(23.326, 1.550, -4.398), Vector(22.802, 1.572, -21.227), Vector(28.702, 2.522, -21.224), Vector(
			30.652, 3.486, -21.176), Vector(32.646, 4.471, -21.099), Vector(32.935, 4.715, -17.595), Vector(30.942, 5.698, -17.465),
			Vector(29.005, 6.655, -17.613), Vector(25.866, 7.550, -17.295), Vector(20.379, 8.008, -21.078), Vector(12.076, 8.321, -19.733),
			Vector(7.436, 8.550, -22.362), Vector(4.052, 8.550, -25.941), Vector(-4.010, 8.550, -20.266), Vector(-10.098, 8.550, -22.046),
			Vector(-10.159, 8.630, -27.940), Vector(1.909, 7.658, -25.935), Vector(0.010, 6.701, -25.966), Vector(-1.947, 5.716, -25.991),
			Vector(-3.874, 4.744, -25.950), Vector(-5.734, 3.832, -25.880), Vector(-7.511, 2.931, -25.889), Vector(-10.282, 2.550,
			-26.021), Vector(-10.448, 2.550, -22.072), Vector(-3.706, 2.550, -22.648), Vector(-4.502, 2.550, -18.663), Vector(2.903, 1.550,
			-18.511), Vector(12.677, 1.550, -24.341), Vector(13.540, 1.550, -18.551), Vector(17.102, 0.594, -4.198), Vector(13.787, 0.569,
			-10.678), Vector(6.207, 0.651, -7.531), Vector(10.580, 0.550, 0.575), Vector(8.623, 1.525, 0.772), Vector(4.805, 1.550, 0.009),
			Vector(2.516, 2.463, 0.083), Vector(-4.158, 2.550, -8.863), Vector(-11.794, 2.550, 0.321), Vector(-14.062, 2.550, 4.633),
			Vector(-14.137, 1.614, 7.168), Vector(-14.186, 0.696, 8.973), Vector(-14.148, 1.702, -4.990), Vector(-14.180, 0.751, -6.862),
			Vector(-14.752, 0.384, -18.711), Vector(-12.829, 1.333, -18.687), Vector(-11.024, 2.281, -18.686), Vector(-8.259, 2.550,
			-16.846), Vector(-19.305, 0.292, -18.511), Vector(-18.804, 0.367, -21.806), Vector(-17.097, 0.322, -32.425), Vector(-3.759,
			2.550, 6.258), Vector(-3.881, 3.482, 8.618), Vector(-3.906, 4.415, 10.510), Vector(-3.909, 5.320, 12.340), Vector(-4.273,
			5.550, 18.894), Vector(-3.077, 5.550, 26.993), Vector(-3.979, 5.522, 22.171), Vector(-14.486, 5.508, 21.405), Vector(-14.642,
			5.461, 11.854), Vector(10.242, 5.550, 22.690), Vector(10.454, 5.550, 17.067), Vector(12.812, 5.550, 22.339), Vector(14.063,
			5.615, 17.081), Vector(14.846, 5.550, 13.098), Vector(8.320, 5.573, 7.338), Vector(16.042, 5.576, 7.381), Vector(20.338, 5.710,
			8.857), Vector(18.820, 5.544, 15.065), Vector(18.568, 4.591, 17.195), Vector(18.567, 3.710, 18.930), Vector(22.071, 3.550,
			19.651), Vector(22.092, 2.717, 12.941), Vector(22.267, 1.725, 10.876), Vector(24.107, 1.550, 3.920), Vector(21.991, 2.779,
			24.805), Vector(18.173, 1.797, 27.807), Vector(16.326, 0.861, 28.081), Vector(8.611, 0.480, 32.047), Vector(-7.330, 1.357,
			30.815), Vector(-9.231, 2.322, 30.580), Vector(-11.935, 2.550, 30.355), Vector(-11.924, 2.550, 26.826), Vector(-8.322, 3.512,
			27.115), Vector(-6.973, 4.176, 27.096), Vector(-5.035, 5.135, 27.199), Vector(-44.941, 2.550, -113.131), Vector(-33.471, 2.550,
			-101.895), Vector(-23.513, 2.550, -111.756), Vector(-13.984, 2.550, -101.881), Vector(-33.613, 2.550, -81.852), Vector(-43.687,
			2.550, -92.405), Vector(-28.019, 2.550, -87.786), Vector(-22.425, 2.550, -89.371), Vector(-15.520, 2.550, -96.790), Vector(
			-8.919, 2.550, -105.899), Vector(-6.340, 3.445, -103.128), Vector(-5.174, 4.330, -101.811), Vector(-3.918, 5.243, -100.501),
			Vector(-2.668, 6.160, -99.172), Vector(-1.257, 7.115, -97.851), Vector(0.052, 8.070, -96.526), Vector(1.670, 8.560, -95.153),
			Vector(0.972, 8.560, -90.118), Vector(7.405, 8.550, -83.355), Vector(7.679, 8.560, -88.683), Vector(12.602, 8.550, -92.187),
			Vector(14.887, 7.583, -89.613), Vector(16.193, 6.662, -88.313), Vector(17.623, 5.706, -87.029), Vector(20.116, 5.550, -85.208),
			Vector(24.235, 5.296, -80.382), Vector(30.693, 4.550, -73.233), Vector(30.324, 4.550, -79.620), Vector(36.638, 4.550, -74.064),
			Vector(39.791, 4.550, -79.534), Vector(36.336, 4.550, -84.995), Vector(13.544, 5.550, -78.057), Vector(7.997, 5.550, -71.921),
			Vector(7.500, 5.550, -76.473), Vector(15.270, 5.550, -73.499), Vector(6.838, 6.449, -70.631), Vector(4.795, 6.550, -68.639),
			Vector(2.112, 6.560, -71.530), Vector(2.134, 5.806, -66.420), Vector(-2.505, 5.550, -66.774), Vector(0.288, 5.550, -58.229),
			Vector(-3.119, 5.550, -60.522), Vector(-4.678, 4.708, -58.827), Vector(-10.212, 4.550, -53.249), Vector(-14.223, 3.657,
			-57.600), Vector(-15.451, 2.697, -59.086), Vector(-20.232, 2.550, -63.176), Vector(-17.562, 2.550, -65.719), Vector(-26.464,
			2.550, -70.223), Vector(-28.304, 2.550, -54.307), Vector(-25.613, 1.507, -51.111), Vector(-26.318, 2.241, -52.485), Vector(
			-22.909, 0.550, -48.449), Vector(-17.935, 0.257, -53.594), Vector(-16.528, -0.721, -54.907), Vector(-15.175, -1.668, -56.187),
			Vector(-13.989, -2.508, -57.336), Vector(-10.600, -3.384, -61.734), Vector(-7.489, -3.550, -64.417), Vector(-13.447, -3.550,
			-69.901), Vector(-3.520, -3.550, -71.075), Vector(2.337, -3.550, -77.819), Vector(5.778, -3.468, -82.756), Vector(11.152,
			-3.550, -85.529), Vector(14.924, -3.450, -86.900), Vector(16.193, -3.450, -90.854), Vector(17.811, -3.450, -87.485), Vector(
			19.257, -2.505, -86.176), Vector(20.489, -1.575, -84.816), Vector(20.260, -1.247, -81.704), Vector(18.886, -0.277, -80.374),
			Vector(15.919, 0.550, -78.939), Vector(9.584, 0.550, -73.161), Vector(5.617, 0.550, -68.609), Vector(0.845, 0.550, -66.721),
			Vector(1.980, 0.919, -72.070), Vector(-0.694, 1.412, -74.516), Vector(-2.950, 0.722, -77.181), Vector(-5.583, 0.556, -75.642),
			Vector(-1.978, 0.625, -80.740), Vector(-9.561, 0.625, -74.101), Vector(-0.194, 0.625, -83.874), Vector(4.877, -2.923, -83.798),
			Vector(3.652, -2.144, -84.771), Vector(1.928, -1.381, -87.119), Vector(3.896, -0.470, -89.098), Vector(5.582, 0.447, -90.007),
			Vector(5.558, 0.550, -94.731), Vector(2.613, 0.625, -93.657), Vector(-2.068, 0.625, -90.092), Vector(-5.772, 0.625, -93.804),
			Vector(-7.377, 1.593, -95.274), Vector(-9.469, 2.550, -97.555), Vector(-24.881, 2.181, -72.069), Vector(-23.741, 1.537,
			-72.677), Vector(-18.287, 0.625, -77.741), Vector(-21.113, 1.350, -80.854), Vector(-22.402, 2.265, -82.153), Vector(-25.266,
			2.550, -84.710), Vector(-10.959, 0.625, -84.734), Vector(8.078, 0.025, -65.919), Vector(22.556, -0.366, -64.746), Vector(
			25.035, -0.326, -70.248), Vector(35.254, -0.334, -61.302), Vector(37.784, -0.422, -61.434), Vector(37.025, -0.293, -38.859),
			Vector(25.313, -0.101, -39.620), Vector(25.854, -0.234, -50.114), Vector(26, 0.742, -52.293), Vector(26.078, 1.709, -54.214),
			Vector(26.108, 2.633, -56.048), Vector(26.275, 3.465, -59.345), Vector(30.891, 3.905, -63.560), Vector(30.003, 4.426, -68.520),
			Vector(30.840, 3.297, -53.564), Vector(30.830, 3.390, -42.570), Vector(30.717, 3.550, -32.612), Vector(27.246, 3.550, -29.848),
			Vector(38.142, 3.550, -34.735), Vector(24.854, 2.621, -29.924), Vector(23.180, 1.773, -29.899), Vector(18.872, 1.550, -27.956),
			Vector(12.711, 1.550, -26.516), Vector(12.768, 1.545, -31.074), Vector(12.642, 0.587, -33.218), Vector(12.558, -0.201,
			-39.817), Vector(21.491, -0.121, -48.008), Vector(12.915, 0.326, -49.034), Vector(6.676, 0.080, -49.253), Vector(1.875, -0.325,
			-45.146), Vector(12.865, -0.178, -61.159), Vector(-4.788, -0.450, -44.349), Vector(-6.470, 0.440, -44.487), Vector(-8.360,
			0.705, -41.949), Vector(-8.635, 1.483, -40.417), Vector(-8.500, 2.394, -38.627), Vector(-8.729, 2.550, -36.650), Vector(-2.189,
			2.550, -37.564), Vector(-8.050, 2.550, -32.381), Vector(-4.343, 2.550, -29.667), Vector(5.460, 1.981, -29.559), Vector(11.122,
			1.550, -29.824), Vector(-10.145, 2.610, -27.910), Vector(-13.687, 2.550, -30.340), Vector(101.717, 3.550, 7.038), Vector(
			103.830, 2.647, 7.075), Vector(108.438, 2.550, 3), Vector(106.256, 2.550, -0.829), Vector(100.462, 1.901, -0.480), Vector(
			98.598, 0.936, -0.580), Vector(96.719, -0.038, -0.626), Vector(95.225, -0.812, -0.660), Vector(92.656, -1.450, -0.269), Vector(
			82.457, -1.450, -0.031), Vector(78.571, -0.739, 0.167), Vector(72.788, -0.420, -0.517), Vector(82.051, -1.450, 9.591), Vector(
			81.864, -1.450, 18.213), Vector(76.415, -0.451, 23.038), Vector(75.500, -0.385, 17.255), Vector(75.962, 0.532, 15.310), Vector(
			76.137, 1.378, 13.630), Vector(94.332, 3.550, 7.176), Vector(90.657, 3.550, 0.558), Vector(87.567, 3.550, 6.918), Vector(
			76.008, 3.550, 7.124), Vector(75.896, 2.691, 11.024), Vector(75.846, 1.749, 12.896), Vector(75.832, 0.827, 14.725), Vector(
			73.874, -0.452, 25.297), Vector(66.355, -0.455, 26.897), Vector(63.156, -0.511, 19.953), Vector(62.007, -0.214, 1.812), Vector(
			68.239, -0.345, 5.141), Vector(60.646, -0.447, 12.381), Vector(65.826, -0.321, -6.317), Vector(57.524, 0.473, -13.360), Vector(
			44.272, 1.419, -11.591), Vector(43.744, 2.322, -8.778), Vector(44.928, 2.549, -5.859), Vector(48.171, 1.603, -5.974), Vector(
			49.877, 0.738, -5.933), Vector(54.116, 0.550, -5.108), Vector(53.974, 0.550, 3.989), Vector(53.768, 0.026, 9.502), Vector(
			49.439, 0.467, 13.473), Vector(49.236, 0.608, 6.765), Vector(43.397, 1.424, 10.119), Vector(41.121, 2.550, 1.999), Vector(
			36.364, 1.747, 1.946), Vector(36.712, 1.716, 9.701), Vector(40.608, 1.795, 18.869), Vector(40.690, 1.865, 32.050), Vector(
			35.686, 2.817, 31.447), Vector(34.395, 3.454, 31.396), Vector(32.442, 4.419, 31.312), Vector(32.440, 4.550, 28.187), Vector(
			35.811, 4.550, 26.271), Vector(35.768, 5.510, 24.327), Vector(35.748, 6.339, 22.644), Vector(35.660, 7.282, 20.734), Vector(
			35.933, 7.550, 17.800), Vector(47.836, 7.550, 17.403), Vector(48.101, 7.550, 1.772), Vector(42.910, 7.550, 1.794), Vector(
			40.179, 7.550, -2.464), Vector(40.230, 7.550, -6.177), Vector(42.999, 7.550, -3.567), Vector(48.380, 7.550, -12.742), Vector(
			57.528, 7.550, -12.180), Vector(57.784, 7.550, -14.903), Vector(61.827, 7.550, -12.727), Vector(61.801, 7.550, -6.126), Vector(
			45.933, 7.550, -10.997), Vector(45.846, 7.550, 8.578), Vector(41.647, 7.550, 15.876), Vector(48.051, 6.598, -17.213), Vector(
			48.048, 5.739, -18.901), Vector(47.959, 4.780, -20.853), Vector(47.992, 3.866, -22.649), Vector(47.913, 3.550, -25.685),
			Vector(58.109, 3.550, -25.378), Vector(44.041, 2.725, -26.742), Vector(42.158, 1.769, -26.412), Vector(38.746, 1.572, -23.554),
			Vector(38.976, 1.501, -14.289), Vector(58.284, 3.550, -21.269), Vector(58.127, 2.581, -18.857), Vector(58.082, 1.618, -16.911),
			Vector(58.037, 0.811, -15.274), Vector(38.984, 1.499, -11.432), Vector(33.204, 1.649, -12.868), Vector(31.508, 1.640, -2.649),
			Vector(35.075, 1.755, 5.929), Vector(1.910, 0.550, 17.312), Vector(14.321, 0.550, 18.889), Vector(-13.861, 0.550, 18.621),
			Vector(6.323, 1.551, 8.883), Vector(13.904, 1.551, 8.651), Vector(22.280, 1.551, 8.729), Vector(13.843, 0.896, 12.593));
		Global.Healthkits = Array(Vector(25.659, 1.572, -23.521), Vector(2.024, 2.550, -22.003), Vector(-14.703, 5.429, 12.849), Vector(
			7.563, 5.550, 16.500), Vector(7.940, 0.389, 35.713), Vector(29.928, 4.550, -89.595), Vector(-13.098, 2.550, -61.352), Vector(
			-0.526, -3.550, -74.065), Vector(14.811, -3.450, -96.204), Vector(-0.999, 0.550, -97.554), Vector(29.831, -0.328, -65.271),
			Vector(38.656, -0.335, -38.688), Vector(12.915, 0.326, -49.037), Vector(0.574, 2.550, -36.499), Vector(45.192, 2.550, -0.798),
			Vector(40.854, 1.857, 34.598), Vector(52.121, 3.550, -27.883));
		Global.Objective1_Node = Array(0, Vector(2.282, 2.550, -7.324), Vector(0.265, 2.550, -7.317), Vector(-2.194, 2.550, -7.313),
			Vector(-5.152, 2.550, -7.260), Vector(-8.061, 2.550, -7.237), Vector(-10.591, 2.550, -7.237), Vector(-10.591, 2.550, -3.975),
			Vector(-8.090, 2.550, -4.008), Vector(-5.193, 2.550, -3.943), Vector(-2.347, 2.550, -3.904), Vector(0.322, 2.550, -3.844),
			Vector(2.332, 2.550, -3.799), Vector(2.251, 2.550, -0.081), Vector(0.101, 2.550, -0.096), Vector(-2.258, 2.550, -0.263),
			Vector(-6.379, 2.550, 0.251), Vector(-8.394, 2.550, 0.992), Vector(-10.663, 2.550, 0.918), Vector(-10.689, 2.550, 4.436),
			Vector(-8.319, 2.550, 4.513), Vector(-5.232, 2.550, 4.606), Vector(-2.856, 2.550, 4.637), Vector(0.062, 2.550, 4.609), Vector(
			2.270, 2.550, 4.669), Vector(2.188, 2.550, 8.444), Vector(-0.137, 2.550, 8.380), Vector(-2.720, 3.335, 8.322), Vector(-5.813,
			3.323, 8.298), Vector(-8.270, 2.550, 8.811), Vector(-10.793, 2.550, 8.774));
		Global.Objective2_Node = Array(Vector(-21.182, 0.625, -86.458), Vector(-19.057, 0.625, -88.496), Vector(-17.015, 0.800, -90.692),
			Vector(-15.043, 0.675, -92.204), Vector(-12.440, 0.625, -94.445), Vector(-10.310, 0.625, -92.211), Vector(-12.696, 0.625,
			-89.867), Vector(-14.521, 0.625, -88.070), Vector(-16.669, 0.625, -85.947), Vector(-18.729, 0.625, -83.919), Vector(-16.137,
			0.625, -81.284), Vector(-14.068, 0.625, -83.370), Vector(-11.895, 0.625, -85.464), Vector(-10.028, 0.625, -87.302), Vector(
			-7.724, 0.625, -89.687), Vector(-5.492, 0.625, -87.415), Vector(-7.864, 0.625, -85.083), Vector(-9.666, 0.625, -83.313),
			Vector(-11.855, 0.625, -81.160), Vector(-14.026, 0.625, -79.022), Vector(-11.996, 0.625, -76.922), Vector(-9.783, 0.625,
			-79.062), Vector(-7.607, 0.625, -81.206), Vector(-5.799, 0.625, -82.956), Vector(-3.323, 0.625, -85.344));
		Modify Global Variable(Path_Nodes, Remove From Array By Value, Null);
		Modify Global Variable(Healthkits, Remove From Array By Value, Null);
		Modify Global Variable(Objective1_Node, Remove From Array By Value, Null);
		Modify Global Variable(Objective2_Node, Remove From Array By Value, Null);
	}
}

rule("Horizon")
{
	event
	{
		Subroutine;
		Horizon;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(-27.416, 9.550, 11.435), Vector(-0.100, 9.550, 4.617), Vector(-7.170, 9.550, -9.529), Vector(
			-14.581, 9.550, -15.637), Vector(-15.857, 9.550, -26.488), Vector(-9.458, 10.520, -28.864), Vector(-7.786, 11.453, -29.705),
			Vector(-6.201, 12.373, -30.646), Vector(-2.515, 12.550, -29.396), Vector(0.755, 13.429, -25.270), Vector(1.588, 14.410,
			-23.489), Vector(2.438, 14.550, -19.884), Vector(4.976, 14.573, -23.815), Vector(7.042, 14.573, -30.751), Vector(18.957,
			14.550, 3.292), Vector(15.570, 13.753, 5.117), Vector(13.853, 12.795, 5.979), Vector(9.611, 11.855, 3.796), Vector(8.782,
			10.946, 2.176), Vector(10.340, 10.550, -1.775), Vector(1.970, 9.709, 0.845), Vector(5.918, 10.550, -0.720), Vector(4.788,
			10.573, -12.787), Vector(-1.953, 10.199, -8.784), Vector(11.757, 10.550, -8.720), Vector(19.299, 10.550, 3.716), Vector(31.798,
			10.550, -3.219), Vector(29.472, 10.550, -7.158), Vector(20.318, 10.550, -2.638), Vector(16.082, 10.550, -11.573), Vector(
			16.735, 10.550, -0.454), Vector(23.669, 10.550, 1.283), Vector(21.746, 14.560, 2.395), Vector(12.831, 14.550, -39.180), Vector(
			19.388, 14.550, -34.935), Vector(25.620, 14.550, -44.089), Vector(15.941, 14.550, -44.511), Vector(9.545, 13.660, -41.640),
			Vector(8.132, 12.761, -42.773), Vector(7.431, 12.550, -45.825), Vector(11.002, 11.631, -44.039), Vector(12.764, 10.663,
			-43.198), Vector(15.841, 10.573, -44.067), Vector(8.381, 10.550, -32.560), Vector(4.203, 10.550, -25.457), Vector(16.609,
			10.550, -27.218), Vector(12.130, 10.550, -18.763), Vector(20.970, 10.550, -33.806), Vector(21.967, 9.579, -35.688), Vector(
			22.828, 8.597, -37.470), Vector(23.321, 8.550, -43.913), Vector(21.521, 9.477, -44.918), Vector(20.209, 10.328, -46.032),
			Vector(40.929, 14.550, -47.438), Vector(44.645, 14.550, -44.961), Vector(42.932, 13.872, -41.957), Vector(44.334, 13.550,
			-37.203), Vector(46.449, 13.630, -34.344), Vector(51.945, 13.550, -34.786), Vector(44.901, 13.550, -32.636), Vector(49.181,
			13.573, -29.746), Vector(39.411, 13.550, -36.377), Vector(37.470, 13.550, -33.300), Vector(33.098, 13.550, -26.020), Vector(
			25.763, 13.893, -30.813), Vector(32.985, 13.630, -21.511), Vector(42.412, 8.550, -21.849), Vector(43.658, 9.509, -23.819),
			Vector(44.905, 10.478, -25.322), Vector(42.521, 11.451, -29.396), Vector(40.895, 12.440, -30.527), Vector(39.284, 13.390,
			-31.538), Vector(27.314, 8.550, -24.657), Vector(29.352, 8.550, -29.056), Vector(39.543, 8.550, -22.023), Vector(28, 8.550,
			-36.684), Vector(28.155, 8.550, -43.395), Vector(27.992, 8.550, -13.659), Vector(21.213, 9.468, -13.812), Vector(18.729,
			10.404, -12.364), Vector(39.067, 8.550, -13.452), Vector(47.677, 8.550, -16.572), Vector(51.232, 8.550, -14.584), Vector(
			54.486, 8.550, -12.242), Vector(56.807, 8.550, -23.028), Vector(60.130, 8.550, -21.062), Vector(55.119, 7.688, -27.992),
			Vector(58.291, 7.550, -33.512), Vector(48.866, 7.550, -39.633), Vector(37.271, 8.573, -52.009), Vector(34.885, 8.550, -45.072),
			Vector(40.399, 7.955, -43.176), Vector(50.457, 7.894, -44.832), Vector(47.379, 8.573, -52.526), Vector(57.547, 8.550, -46.274),
			Vector(52.697, 8.550, -49.892), Vector(64.108, 8.548, -42.002), Vector(66.429, 8.548, -45.288), Vector(58.461, 8.550, -55.792),
			Vector(49.036, 8.987, -58.546), Vector(41.714, 9.560, -64.718), Vector(38.537, 9.578, -68.146), Vector(32.131, 10.022,
			-66.099), Vector(31.030, 11.020, -64.436), Vector(30.054, 11.958, -62.828), Vector(29.062, 12.844, -61.354), Vector(28.666,
			13.599, -57.011), Vector(30.142, 14.515, -55.961), Vector(31.388, 15.255, -55.150), Vector(39.829, 15.551, -57.861), Vector(
			43.419, 15.550, -62.208), Vector(48.339, 15.550, -59.055), Vector(43.050, 15.550, -77.565), Vector(52.750, 15.550, -76.880),
			Vector(56.158, 15.550, -74.222), Vector(50.665, 15.550, -74.356), Vector(53.158, 15.577, -79.095), Vector(66.561, 15.549,
			-76.361), Vector(71.375, 15.550, -68.345), Vector(64.344, 15.551, -61.241), Vector(64.619, 15.551, -67.729), Vector(79.073,
			14.643, -62.070), Vector(78.266, 13.697, -60.210), Vector(77.868, 12.702, -58.236), Vector(77.504, 11.745, -56.331), Vector(
			75.590, 10.775, -52.730), Vector(74.530, 9.780, -51.046), Vector(73.657, 8.892, -49.494), Vector(71.203, 8.551, -46.265),
			Vector(76.291, 8.550, -43.657), Vector(81.479, 7.997, -40.294), Vector(86.816, 8.878, -46.295), Vector(88.186, 9.814, -48.478),
			Vector(89.515, 10.738, -50.491), Vector(90.513, 11.577, -52.717), Vector(91.346, 12.385, -55.231), Vector(92.288, 13.364,
			-59.170), Vector(92.125, 14.079, -67.425), Vector(88.367, 14.725, -71.735), Vector(83.015, 15.550, -72.555), Vector(78.074,
			15.550, -72.213), Vector(67.774, 8.550, -50.607), Vector(65.247, 7.991, -62.930), Vector(59.419, 7.543, -71.189), Vector(
			65.448, 7.545, -74.373), Vector(65.611, 8.416, -76.213), Vector(65.834, 9.381, -78.136), Vector(66.571, 9.550, -85.520),
			Vector(74.639, 10.529, -86.162), Vector(76.564, 11.506, -85.441), Vector(78.139, 12.381, -82.623), Vector(78.251, 13.362,
			-80.656), Vector(78.079, 14.298, -78.788), Vector(77.923, 15.243, -76.897), Vector(61.315, 10.418, -86.532), Vector(72.181,
			9.585, -81.286), Vector(72.435, 8.651, -79.390), Vector(74.573, 8.550, -71.861), Vector(68.165, 8.573, -68.531), Vector(79.695,
			8.550, -62), Vector(80.566, 8.522, -74.102), Vector(54.563, 7.931, -63.512), Vector(48.679, 7.549, -77.072), Vector(46.720,
			8.539, -77.081), Vector(45.010, 9.359, -77.099), Vector(42.256, 9.560, -77.492), Vector(40.343, 9.550, -86.533), Vector(42.325,
			9.550, -90.665), Vector(46.524, 10.392, -90.353), Vector(41.727, 9.550, -101.793), Vector(50.729, 9.550, -100.972), Vector(
			58.682, 9.550, -99.946), Vector(58.491, 10.378, -97.490), Vector(50.678, 10.451, -97.681), Vector(54.317, 10.551, -95.076),
			Vector(53.567, 11.024, -79.766), Vector(60.487, 10.550, -92.918), Vector(70.557, 10.842, -92.804), Vector(66.998, 10.550,
			-96.786), Vector(61.783, 10.550, -92.753), Vector(65.038, 10.500, -101.442), Vector(62.151, 9.550, -101.277), Vector(32.789,
			9.550, -85.840), Vector(30.771, 9.550, -100.633), Vector(27.046, 9.550, -94.068), Vector(22.431, 9.550, -98.566), Vector(
			22.101, 8.614, -88.982), Vector(26.233, 9.550, -84.399), Vector(28.262, 9.550, -81.537), Vector(30.366, 10.493, -81.589),
			Vector(32.213, 11.415, -81.583), Vector(34.156, 12.384, -81.610), Vector(35.979, 13.294, -81.583), Vector(37.776, 14.191,
			-81.586), Vector(39.761, 15.183, -81.533), Vector(43.038, 15.550, -81.244), Vector(16.711, 7.554, -98.623), Vector(19.123,
			8.527, -98.652), Vector(21.107, 9.518, -98.646), Vector(16.718, 7.550, -88.954), Vector(21.908, 8.541, -88.760), Vector(15.953,
			8.477, -86.120), Vector(4.705, 8.171, -82.659), Vector(2.260, 7.550, -90.033), Vector(-8.207, 7.550, -88.812), Vector(-12.908,
			7.550, -96.011), Vector(-5.666, 7.550, -99.081), Vector(2.240, 7.453, -101.379), Vector(11.191, 7.449, -96.003), Vector(11.587,
			7.523, -107.729), Vector(17.440, 7.550, -109.128), Vector(18.638, 7.550, -104.389), Vector(9.626, 8.525, -109.170), Vector(
			10.475, 8.129, -109.052), Vector(8.136, 9.464, -110.330), Vector(6.749, 10.335, -111.403), Vector(-4.130, 10.550, -114.604),
			Vector(-5.168, 11.508, -116.427), Vector(-4.062, 11.550, -121.655), Vector(-6.253, 10.781, -125.786), Vector(-14.110, 10.550,
			-140.366), Vector(-9.054, 9.657, -143.181), Vector(-7.421, 8.726, -144.078), Vector(-6.086, 8.549, -146.894), Vector(-10.666,
			7.584, -146.184), Vector(-12.430, 6.690, -145.693), Vector(-14.450, 6.573, -144.938), Vector(-18.784, 6.090, -138.869), Vector(
			-17.468, 6.050, -143.060), Vector(-18.129, 6.217, -148.333), Vector(-22.509, 6.050, -145.156), Vector(-22.738, 6.050,
			-140.563), Vector(-22.203, 6.050, -133.995), Vector(-30.459, 6.050, -132.309), Vector(-33.854, 6.050, -138.049), Vector(
			-26.159, 6.550, -154.141), Vector(-33.410, 6.550, -150.422), Vector(-35.814, 6.550, -156.349), Vector(-47.511, 6.623,
			-150.970), Vector(-43.046, 6.550, -140.485), Vector(-49.173, 6.550, -136.375), Vector(-47.589, 6.028, -131.453), Vector(
			-41.769, 6.050, -134.062), Vector(-39.472, 6.050, -127.583), Vector(-46.330, 6.050, -128.421), Vector(-50.588, 7.049,
			-127.079), Vector(-52.139, 8.003, -125.923), Vector(-54.174, 8.550, -123.145), Vector(-50.310, 9.490, -123.349), Vector(
			-48.547, 10.462, -124.176), Vector(-46.825, 11.435, -125.079), Vector(-39.719, 11.550, -127.133), Vector(-35.175, 11.550,
			-118.507), Vector(-35.886, 6.090, -126.625), Vector(-37.383, 6.050, -120.451), Vector(-42.696, 6.050, -117.668), Vector(
			-36.096, 5.958, -117.130), Vector(-35.285, 4.986, -115.354), Vector(-30.479, 4.550, -114.447), Vector(-34.684, 4.550,
			-124.077), Vector(-21.229, 4.550, -131.051), Vector(-18.354, 5.390, -137.560), Vector(-17.057, 4.548, -134.694), Vector(
			-14.100, 4.092, -131.918), Vector(-8.383, 3.546, -133.595), Vector(-14.727, 4.300, -121.911), Vector(-4.357, 4.550, -118.581),
			Vector(-4.474, 3.567, -128.716), Vector(-11.381, 4.550, -118.748), Vector(-19.624, 4.513, -115.519), Vector(-24.245, 4.485,
			-113.598), Vector(-17.970, 4.550, -111.511), Vector(-14.082, 4.664, -107.083), Vector(-12.720, 5.646, -104.492), Vector(
			-11.818, 6.465, -102.408), Vector(-10.533, 7.335, -100.367), Vector(-16.199, 7.550, -94.224), Vector(-17.984, 6.692, -95.373),
			Vector(-25.728, 6.050, -98.755), Vector(-28.302, 5.158, -103.466), Vector(-30.057, 4.550, -107.326), Vector(-32.134, 6.130,
			-96.315), Vector(-36.878, 6.050, -99.875), Vector(-39.950, 6.050, -108.674), Vector(-1.633, 4.550, -111.166), Vector(-0.520,
			5.517, -109.282), Vector(0.259, 6.251, -108.022), Vector(2.005, 7.158, -103.498), Vector(-48.896, 6.233, -167.993));
		Global.Healthkits = Array(Vector(17.785, 10.550, -48.410), Vector(35.802, 8.550, -33.875), Vector(61.589, 8.550, -22.842), Vector(
			37.134, 9.550, -74.545), Vector(87.323, 13.704, -59.122), Vector(73.564, 8.550, -61.042), Vector(33.807, 9.550, -103.131),
			Vector(15.069, 8.550, -78.844), Vector(15.993, 7.550, -109.974), Vector(-35.085, 6.550, -142.012), Vector(-5.590, 3.520,
			-132.643), Vector(-20.866, 6.050, -103.126), Vector(-36.796, 6.050, -108.786));
		Global.Objective1_Node = Array(Vector(49.346, 10.551, -95.103), Vector(51.597, 10.545, -94.944), Vector(54.162, 10.541, -94.772),
			Vector(56.654, 10.530, -94.624), Vector(58.985, 10.547, -94.713), Vector(58.870, 10.549, -91.409), Vector(56.502, 10.462,
			-91.449), Vector(54.065, 10.425, -91.531), Vector(51.399, 10.472, -91.711), Vector(49.225, 10.550, -92.002), Vector(49.080,
			10.550, -88.804), Vector(51.297, 10.472, -88.729), Vector(54.036, 10.409, -88.665), Vector(56.366, 10.462, -88.604), Vector(
			58.802, 10.530, -88.627), Vector(58.707, 10.550, -85.449), Vector(56.242, 10.452, -85.535), Vector(53.868, 10.408, -85.616),
			Vector(51.220, 10.456, -85.706), Vector(48.942, 10.550, -85.784), Vector(48.884, 10.550, -83.244), Vector(51.127, 10.517,
			-83.169), Vector(53.738, 10.461, -83.086), Vector(56.216, 10.506, -83.002), Vector(58.610, 10.549, -83.195), Vector(56.073,
			10.550, -80.563), Vector(53.647, 10.550, -80.643), Vector(50.952, 10.550, -80.784));
		Global.Objective2_Node = Array(Vector(-32.927, 4.300, -122.951), Vector(-30.697, 4.438, -124.027), Vector(-28.576, 4.328,
			-125.117), Vector(-26.432, 4.303, -126.215), Vector(-24.454, 4.301, -127.228), Vector(-22.474, 4.301, -128.189), Vector(
			-20.560, 4.261, -129.143), Vector(-19.199, 4.175, -126.675), Vector(-21.026, 4.270, -125.589), Vector(-23.104, 4.298,
			-124.645), Vector(-25.030, 4.389, -123.643), Vector(-27.272, 4.324, -122.538), Vector(-29.216, 4.314, -121.280), Vector(
			-31.259, 4.299, -119.980), Vector(-29.696, 4.289, -117.128), Vector(-27.618, 4.153, -118.258), Vector(-25.454, 4.172,
			-119.350), Vector(-23.442, 4.289, -120.596), Vector(-21.356, 4.279, -121.855), Vector(-19.573, 4.219, -122.778), Vector(
			-17.654, 4.189, -123.826), Vector(-16.043, 4.300, -120.845), Vector(-17.808, 4.300, -119.600), Vector(-19.548, 4.300,
			-118.652), Vector(-21.602, 4.302, -117.506), Vector(-23.773, 4.302, -116.324), Vector(-25.970, 4.294, -115.239), Vector(
			-28.108, 4.300, -114.078));
		Modify Global Variable(Path_Nodes, Remove From Array By Value, Null);
		Modify Global Variable(Healthkits, Remove From Array By Value, Null);
		Modify Global Variable(Objective1_Node, Remove From Array By Value, Null);
		Modify Global Variable(Objective2_Node, Remove From Array By Value, Null);
	}
}

rule("Paris")
{
	event
	{
		Subroutine;
		Paris;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(24.308, 13.550, -86.868), Vector(23.233, 12.592, -85.093), Vector(22.769, 12.548, -79.475),
			Vector(29.892, 12.548, -76.696), Vector(34.438, 13.550, -81.461), Vector(33.281, 12.658, -79.778), Vector(30.198, 13.550,
			-85.401), Vector(16.810, 11.581, -61.484), Vector(21.483, 11.873, -62.732), Vector(15.809, 11.809, -65.854), Vector(17.494,
			12.550, -73.753), Vector(11.644, 12.550, -80.370), Vector(5.531, 11.574, -70.299), Vector(14.642, 11.474, -56.956), Vector(
			7.186, 11.572, -58.621), Vector(0.136, 11.545, -50.437), Vector(3.821, 11.474, -44.121), Vector(3.387, 12.315, -39.735),
			Vector(-0.338, 12.947, -31.899), Vector(-2.611, 13.916, -33.775), Vector(-3.838, 14.899, -35.372), Vector(-9.380, 15.550,
			-40.527), Vector(-15.859, 15.550, -34.054), Vector(-16.424, 15.550, -47.422), Vector(-4.767, 11.474, -54.710), Vector(-2.243,
			11.473, -57.638), Vector(-8.907, 11.550, -65.156), Vector(-4.641, 11.633, -68.622), Vector(8.162, 12.409, -74.641), Vector(
			-4.768, 11.633, -60.858), Vector(-12.900, 11.550, -60.118), Vector(-18.799, 11.633, -59.620), Vector(-14.162, 12.550, -64.260),
			Vector(-12.985, 13.514, -65.659), Vector(-11.703, 14.447, -67.017), Vector(-10.364, 15.404, -68.385), Vector(-5.953, 15.550,
			-67.937), Vector(-6.130, 16.534, -62.239), Vector(-7.168, 17.490, -60.578), Vector(-15.347, 17.550, -56.451), Vector(-13.034,
			11.474, -51.996), Vector(-19.818, 11.475, -48.423), Vector(-25.964, 11.475, -39.395), Vector(-24.867, 11.474, -34.675), Vector(
			-31.389, 11.593, -30.297), Vector(-26.480, 11.474, -25.889), Vector(-14.420, 11.890, -29.708), Vector(-9.382, 12.798, -27.309),
			Vector(-0.394, 12.938, -27.169), Vector(-23.582, 11.633, -22.876), Vector(-17.373, 11.550, -17.042), Vector(-19.134, 11.633,
			-14.117), Vector(-34.845, 11.473, -23.315), Vector(-38.467, 12.396, -26.553), Vector(-44.395, 12.608, -32.270), Vector(-47.827,
			13.593, -29.326), Vector(-49.462, 12.608, -36.065), Vector(-52.868, 13.540, -33.422), Vector(-52.045, 13.540, -26.407), Vector(
			-47.595, 13.540, -21.975), Vector(-52.490, 13.603, -19.204), Vector(-44.754, 15.540, -18.678), Vector(-46.020, 14.673,
			-20.160), Vector(-47.202, 13.796, -21.452), Vector(-39.745, 15.540, -17.723), Vector(-37.194, 15.542, -15.172), Vector(-33.074,
			15.540, -10.875), Vector(-33.070, 15.541, -6.737), Vector(-34.966, 15.541, -5.970), Vector(-36.656, 14.565, -4.472), Vector(
			-37.765, 13.740, -3.272), Vector(-38.852, 12.929, -2.080), Vector(-40.019, 12.040, -0.773), Vector(-42.078, 11.474, 3.258),
			Vector(-39.901, 15.542, -13.152), Vector(-47.741, 15.542, -12.277), Vector(-52.292, 16.540, -8.120), Vector(-56.816, 16.101,
			-3.688), Vector(-61.425, 15.540, 3.454), Vector(-67.860, 15.540, 1.828), Vector(-69.420, 15.540, -5.391), Vector(-57.788,
			14.563, 6.577), Vector(-56.302, 13.575, 8.331), Vector(-73.015, 14.639, -8.838), Vector(-74.202, 13.700, -10.270), Vector(
			-64.368, 15.625, -7.200), Vector(-62.928, 14.653, -8.572), Vector(-61.676, 13.790, -9.754), Vector(-58.669, 13.403, -13.666),
			Vector(-55.187, 12.498, -9.781), Vector(-52.676, 11.815, -7.144), Vector(-46.318, 11.574, 5.506), Vector(-47.927, 12.568,
			7.071), Vector(-49.518, 13.486, 8.559), Vector(-42.393, 13.540, 16.341), Vector(-39.757, 12.676, 13.648), Vector(-40.989,
			12.471, 13.282), Vector(-39.034, 11.574, 8.542), Vector(-37.390, 11.474, 3.600), Vector(-29.443, 11.474, -2.861), Vector(
			-29.312, 11.474, -12.457), Vector(-21, 11.572, -9.315), Vector(-21.392, 11.573, -3.425), Vector(-23.092, 12.524, -2), Vector(
			-24.381, 13.401, -0.795), Vector(-25.546, 14.300, 0.558), Vector(-26.342, 14.625, 4.581), Vector(-27.507, 14.625, 8.386),
			Vector(-23.124, 14.625, 1.338), Vector(-23.138, 14.540, 4.392), Vector(-20.086, 14.540, 2.523), Vector(-27.838, 14.816,
			11.644), Vector(-26.646, 15.655, 12.818), Vector(-24.048, 16.540, 15.398), Vector(-34.038, 16.540, 24.406), Vector(-37.632,
			17.516, 20.534), Vector(-38.891, 17.489, 17.682), Vector(-42.334, 17.540, 25.215), Vector(-47.311, 17.620, 25.466), Vector(
			-47.192, 17.546, 20.869), Vector(-50.281, 17.546, 23.958), Vector(-47.102, 17.542, 33.250), Vector(-45.875, 16.599, 34.938),
			Vector(-44.578, 15.655, 36.315), Vector(-38.457, 15.025, 35.870), Vector(-37.055, 14.138, 34.808), Vector(-34.258, 13.541,
			32.160), Vector(-47.296, 13.620, 25.579), Vector(-41.280, 13.542, 28.620), Vector(-32.284, 13.231, 34.058), Vector(-31.041,
			12.314, 35.409), Vector(-28.919, 11.540, 37.268), Vector(-24.897, 11.540, 34.357), Vector(-29.128, 11.540, 19.524), Vector(
			-29.882, 11.574, 18.698), Vector(-22.312, 11.603, 20.280), Vector(-28.698, 11.603, 26.504), Vector(-17.599, 11.540, 25.202),
			Vector(-21.853, 11.540, 31.282), Vector(-50.795, 13.540, 20.952), Vector(-68.318, 13.526, -17.811), Vector(-58.050, 13.505,
			-21.887), Vector(-66.350, 13.410, -25.324), Vector(-82.797, 13.504, -16.606), Vector(-84.073, 12.645, -18.374), Vector(-84.994,
			11.731, -19.785), Vector(-77.914, 11.405, -35.128), Vector(-68.773, 12.186, -30.081), Vector(-65.271, 11.554, -42.475), Vector(
			-67.567, 13.124, -27.575), Vector(-75.853, 13.539, -15.291), Vector(-81.719, 11.559, -26.639), Vector(-88.970, 11.434,
			-28.746), Vector(-95.691, 12.324, -38.385), Vector(-88.967, 12.464, -45.159), Vector(-83.948, 11.530, -45.098), Vector(-72.240,
			11.554, -51.136), Vector(-68.157, 12.405, -55.257), Vector(-78.327, 11.405, -49.955), Vector(-80.091, 12.222, -53.616), Vector(
			-80.903, 13.125, -55.273), Vector(-86.185, 13.550, -64.647), Vector(-100.342, 13.550, -57.923), Vector(-98.006, 13.550,
			-53.313), Vector(-108.955, 13.550, -47.788), Vector(-105.662, 12.886, -42.170), Vector(-103.850, 12.321, -36.444), Vector(
			-103.217, 13.550, -53.419), Vector(-104.395, 12.699, -55.507), Vector(-105.166, 11.899, -56.902), Vector(-110.349, 11.550,
			-62.061), Vector(-116.872, 11.550, -61.056), Vector(-121.681, 11.340, -54.212), Vector(-117.191, 11.400, -45.109), Vector(
			-113.979, 12.325, -43.588), Vector(-118.589, 12.389, -41.081), Vector(-113.513, 12.565, -32.895), Vector(-108.806, 12.328,
			-34.822), Vector(-108.825, 11.550, -68.974), Vector(-115.904, 11.550, -70.885), Vector(-118.214, 12.452, -76.580), Vector(
			-109.761, 12.544, -76.062), Vector(-108.021, 13.512, -76.902), Vector(-105.438, 13.550, -78.296), Vector(-106.996, 12.471,
			-70.135), Vector(-105.413, 13.393, -71.076), Vector(-102.627, 13.550, -72.528), Vector(-118.986, 13.425, -78.361), Vector(
			-119.795, 14.385, -80.093), Vector(-120.155, 14.550, -86.092), Vector(-110.381, 14.550, -82.038), Vector(-112.749, 14.550,
			-87.297), Vector(-110.830, 13.700, -88.072), Vector(-108.383, 13.708, -83.146), Vector(-105.904, 13.550, -87.414), Vector(
			-118.469, 14.550, -96.360), Vector(-109.806, 15.430, -97.653), Vector(-117.289, 14.550, -91.677), Vector(-108.063, 16.382,
			-98.415), Vector(-104.335, 16.550, -100.534), Vector(-100.168, 16.550, -92.241), Vector(-104.779, 16.550, -89.910), Vector(
			-95.170, 16.550, -94.644), Vector(-100.291, 16.578, -102.036), Vector(-98.430, 15.592, -102.935), Vector(-96.850, 14.713,
			-103.705), Vector(-91.974, 14.550, -109.413), Vector(-87.093, 14.550, -104.819), Vector(-79.340, 14.549, -99.613), Vector(
			-78.409, 15.478, -97.801), Vector(-77.625, 16.323, -96.296), Vector(-76.290, 16.550, -92.112), Vector(-82.639, 16.550,
			-89.213), Vector(-79.969, 16.550, -83.793), Vector(-76.407, 16.550, -84.858), Vector(-69.189, 16.550, -88.979), Vector(-61.125,
			16.550, -90.167), Vector(-60.077, 15.677, -87.894), Vector(-59.216, 14.751, -86.261), Vector(-63.515, 14.550, -79.509), Vector(
			-60.572, 13.643, -74.161), Vector(-59.738, 12.710, -72.496), Vector(-56.494, 12.447, -66.895), Vector(-62.180, 12.550,
			-67.923), Vector(-64.152, 12.541, -64.238), Vector(-71.022, 14.550, -71.084), Vector(-77.475, 13.824, -68.435), Vector(-88.212,
			14.550, -98.996), Vector(-89.966, 13.683, -98.174), Vector(-84.246, 14.550, -97.373), Vector(-87.185, 13.779, -92.916), Vector(
			-92.984, 13.550, -94.422), Vector(-91.114, 13.550, -74.971), Vector(-87.633, 13.550, -67.280), Vector(-63.761, 12.402,
			-58.793), Vector(-55.543, 12.404, -63.474), Vector(-53.702, 11.410, -59.860), Vector(-48.319, 10.247, -56.678), Vector(-51.024,
			10.689, -49.133), Vector(-56.052, 10.569, -51.056), Vector(-58.155, 11.433, -38.886), Vector(-108.946, 16.550, -110.585),
			Vector(-114.325, 16.550, -105.830), Vector(-116.211, 15.646, -104.893), Vector(-117.785, 14.748, -104.030), Vector(-121.455,
			14.550, -102.134), Vector(-101.859, 16.550, -111.913), Vector(-100.123, 15.662, -112.845), Vector(-98.423, 14.726, -113.629),
			Vector(-94.810, 14.550, -114.972));
		Global.Healthkits = Array(Vector(-0.459, 11.545, -49.716), Vector(-15.744, 11.550, -58.358), Vector(-30.611, 11.574, -39.974),
			Vector(-14.948, 11.550, -21.028), Vector(-39.738, 12.608, -40.028), Vector(-69.493, 15.540, 1.987), Vector(-17.387, 14.540,
			4.047), Vector(-40.978, 13.542, 25.279), Vector(-73.186, 11.567, -38.450), Vector(-124.840, 11.550, -56.307), Vector(-46.444,
			10.256, -57.439));
		Global.Objective1_Node = Array(Vector(-54.907, 13.574, 21.648), Vector(-56.303, 13.574, 20.432), Vector(-57.615, 13.574, 18.510),
			Vector(-58.849, 13.574, 16.937), Vector(-60.297, 13.574, 15.188), Vector(-61.929, 13.574, 13.528), Vector(-59.766, 13.574,
			11.352), Vector(-58.062, 13.574, 13.080), Vector(-56.551, 13.574, 14.614), Vector(-55.110, 13.574, 16.070), Vector(-53.497,
			13.574, 17.712), Vector(-52.265, 13.574, 18.995), Vector(-49.944, 13.574, 16.708), Vector(-51.201, 13.574, 15.562), Vector(
			-52.773, 13.574, 13.967), Vector(-54.328, 13.574, 12.485), Vector(-55.847, 13.574, 10.999), Vector(-57.591, 13.574, 9.272),
			Vector(-55.853, 13.573, 7.360), Vector(-54.024, 13.573, 8.948), Vector(-52.370, 13.573, 10.604), Vector(-50.940, 13.573,
			12.034), Vector(-49.305, 13.573, 13.671), Vector(-48.108, 13.573, 14.867), Vector(-45.892, 13.573, 12.610), Vector(-46.960,
			13.550, 11.516), Vector(-48.601, 13.540, 9.794), Vector(-49.991, 13.540, 8.443), Vector(-51.672, 13.540, 6.683), Vector(
			-53.367, 13.575, 4.898));
		Global.Objective2_Node = Array(Vector(-98.932, 13.650, -72.609), Vector(-99.779, 13.650, -74.436), Vector(-100.882, 13.551,
			-76.812), Vector(-101.996, 13.551, -79.128), Vector(-103.070, 13.551, -81.358), Vector(-104.357, 13.650, -84.031), Vector(
			-105.217, 13.650, -85.680), Vector(-102.654, 13.650, -86.902), Vector(-101.553, 13.650, -84.668), Vector(-100.628, 13.650,
			-82.793), Vector(-99.405, 13.650, -80.319), Vector(-98.240, 13.650, -78.031), Vector(-97.071, 13.650, -75.711), Vector(-96.176,
			13.650, -73.894), Vector(-93.883, 13.550, -75.049), Vector(-94.844, 13.650, -77.011), Vector(-95.955, 13.650, -79.260), Vector(
			-97.135, 13.696, -81.494), Vector(-98.215, 13.650, -83.682), Vector(-99.277, 13.650, -85.842), Vector(-100.234, 13.550,
			-87.766), Vector(-97.555, 13.550, -89.086), Vector(-96.620, 13.550, -87.190), Vector(-95.482, 13.650, -84.874), Vector(-93.312,
			13.684, -80.612), Vector(-92.148, 13.650, -78.256), Vector(-91.198, 13.550, -76.312), Vector(-88.307, 13.650, -77.736), Vector(
			-89.251, 13.650, -79.644), Vector(-90.452, 13.650, -82.040), Vector(-91.538, 13.650, -84.237), Vector(-92.537, 13.650,
			-86.244), Vector(-93.718, 13.650, -88.599), Vector(-94.713, 13.650, -90.569), Vector(-92.105, 13.650, -91.834), Vector(-91.149,
			13.650, -89.917), Vector(-90.044, 13.550, -87.675), Vector(-88.973, 13.550, -85.507), Vector(-87.867, 13.550, -83.271), Vector(
			-86.745, 13.650, -81.001), Vector(-85.724, 13.650, -78.934));
		Modify Global Variable(Path_Nodes, Remove From Array By Value, Null);
		Modify Global Variable(Healthkits, Remove From Array By Value, Null);
		Modify Global Variable(Objective1_Node, Remove From Array By Value, Null);
		Modify Global Variable(Objective2_Node, Remove From Array By Value, Null);
	}
}

rule("Temple Of Anubis")
{
	event
	{
		Subroutine;
		Temple_of_Anubus;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(3.981, 3.323, -36.909), Vector(8.605, 3.323, -40.174), Vector(10.350, 2.380, -39.130), Vector(
			9.493, 2.323, -32.820), Vector(16.271, 2.323, -28.814), Vector(11.492, 2.323, -25.745), Vector(12.426, 2.323, -22.622), Vector(
			7.483, 2.323, -22.075), Vector(2.859, 2.182, -20.228), Vector(4.930, 2.323, -34.192), Vector(-0.946, 2.323, -27.882), Vector(
			-0.890, 2.323, -31.785), Vector(-5.666, 1.655, -35.395), Vector(-7.397, 0.710, -36.599), Vector(-9.019, -0.167, -37.667),
			Vector(-15.634, -0.714, -40.979), Vector(-24.713, -0.731, -33.487), Vector(18.208, 2.323, -18.646), Vector(26.765, 2.134,
			-12.078), Vector(15.455, 1.629, 7.748), Vector(9.596, 0.758, 5.791), Vector(7.223, -0.122, 4.545), Vector(-0.603, -0.850,
			-7.807), Vector(2.040, 1.242, -17.655), Vector(0.648, 0.367, -15.716), Vector(-0.534, -0.299, -13.284), Vector(-8.120, -0.646,
			-14.031), Vector(-4.440, 0.061, -20.606), Vector(-10.896, -0.382, -21.944), Vector(-15.909, -0.172, -11.113), Vector(-8.391,
			-1.053, -5.085), Vector(-6.120, -1.241, -2.344), Vector(-2.388, -1.241, 1.979), Vector(2.731, -1.241, 2.453), Vector(4.607,
			0.186, 6.330), Vector(3.319, 1.078, 7.615), Vector(2.337, 1.962, 9.423), Vector(0.592, 2.513, 13.336), Vector(-13.926, 2.496,
			3.645), Vector(-11.749, 1.541, 0.104), Vector(-10.845, 0.594, -1.546), Vector(-9.729, -0.331, -3.032), Vector(3.717, 2.730,
			18.015), Vector(6.987, 3.138, 16.431), Vector(8.723, 4.109, 17.282), Vector(10.011, 4.862, 18.037), Vector(13.229, 5.657,
			19.823), Vector(14.922, 5.657, 12.658), Vector(-7.994, 2.654, 9.724), Vector(-7.889, 3.091, 2.076), Vector(-1.576, 3.226,
			0.606), Vector(0.355, 3.079, 6.900), Vector(-7.572, 2.498, 14.516), Vector(-13.043, 2.554, 11.881), Vector(-21.034, 2.402,
			1.635), Vector(-22.778, 2.577, -3.143), Vector(-25.375, -0.728, -14.787), Vector(-18.387, -0.509, -24.928), Vector(-27.084,
			-0.728, -25.613), Vector(-6.457, 2.629, 19.267), Vector(-1.267, 2.589, 26.096), Vector(2.813, 2.473, 28.497), Vector(-1.299,
			3.394, 38.989), Vector(-6.648, 4.059, 44.664), Vector(-8.511, 4.911, 43.357), Vector(-10.161, 5.893, 42.263), Vector(-15.921,
			6.061, 38.065), Vector(-24.726, 6.061, 33.197), Vector(-19.987, 6.061, 28.189), Vector(-28.536, 6.191, 37.751), Vector(-27.643,
			6.852, 30.812), Vector(-28.917, 7.732, 29.503), Vector(-34.179, 7.604, 26.507), Vector(-36.021, 7.059, 25.417), Vector(-45.139,
			7.059, 19.741), Vector(-40.138, 6.559, 13.144), Vector(-36.286, 5.585, 15.866), Vector(-34.780, 4.654, 16.942), Vector(-33.139,
			3.666, 18.013), Vector(-28.941, 3.015, 19.977), Vector(-24.721, 2.059, 14.081), Vector(-19.301, 2.135, 17.240), Vector(-14.574,
			2.289, 21.322), Vector(-10.462, 2.423, 19.912), Vector(-15.463, 2.406, 17.225), Vector(-30.817, 8.060, 27.353), Vector(-32.288,
			8.060, 29.569), Vector(-10.741, 2.335, 28.327), Vector(-19.667, 2.243, 24.550), Vector(-30.630, 2.881, 27.033), Vector(-34.976,
			7.081, 23.741), Vector(-42.905, 6.678, 11.031), Vector(-44.502, 7.550, 10.085), Vector(-46.238, 8.545, 9.064), Vector(-50.541,
			9.061, 9.373), Vector(-48.501, 9.911, 13.151), Vector(-46.866, 10.874, 14.209), Vector(-43.375, 11.059, 16.044), Vector(
			-52.130, 11.059, 27.075), Vector(-48.726, 11.059, 36.395), Vector(-52.483, 11.081, 36.699), Vector(-46.487, 11.093, 33.530),
			Vector(-57.040, 11.072, 33.868), Vector(-58.511, 10.117, 35.670), Vector(-59.773, 9.244, 37.215), Vector(-60.707, 8.422,
			38.830), Vector(-60.800, 8.059, 43.578), Vector(-57.557, 8.089, 43.809), Vector(-37.469, 7.024, 27.497), Vector(-38.465, 6.060,
			29.129), Vector(-39.447, 5.115, 30.733), Vector(-40.458, 4.140, 32.383), Vector(-41.364, 3.243, 33.913), Vector(-57.066, 3.050,
			44.937), Vector(-62.014, 3.070, 47.782), Vector(-56.681, 3.070, 53.479), Vector(-52.138, 3.103, 48.145), Vector(-51.954, 3.060,
			40.871), Vector(-33.749, 2.892, 33.908), Vector(-37.396, 3.065, 38.026), Vector(-37.841, 3.215, 45.675), Vector(-33.353, 3.540,
			50.425), Vector(-39.317, 3.050, 55.631), Vector(-43.026, 3.092, 53.282), Vector(-46.277, 3.048, 54.587), Vector(-44.500, 3.907,
			57.662), Vector(-43.338, 4.877, 59.204), Vector(-42.233, 5.769, 60.591), Vector(-41.025, 6.736, 62.082), Vector(-36.401, 7.050,
			62.855), Vector(-32.103, 7.050, 60.790), Vector(-33.309, 7.550, 67.096), Vector(-30.712, 2.873, 40.070), Vector(-24.408, 2.905,
			46.099), Vector(-32.954, 3.129, 61.572), Vector(-36.044, 3.050, 61.034), Vector(-39.771, 3.050, 65.068), Vector(-36.733, 3.075,
			75.030), Vector(-38.827, 3.050, 70.155), Vector(-31.122, 3.075, 73.341), Vector(-27.624, 3.047, 71.465), Vector(-32.392, 3.025,
			65.569), Vector(-26.918, 3.022, 58.088), Vector(-19.399, 2.876, 52.859), Vector(-15.577, 2.849, 57.189), Vector(-21.410, 3.060,
			61.128), Vector(-22.348, 3.116, 68.305), Vector(-22.055, 3.087, 74.105), Vector(-19.950, 3.644, 74.086), Vector(-18.036, 4.585,
			74.113), Vector(-10.519, 5.541, 73.926), Vector(-17.301, 3.072, 67.891), Vector(-10.261, 3.311, 66.558), Vector(-9.951, 4.194,
			68.778), Vector(-9.692, 5.136, 70.670), Vector(-4.031, 5.541, 74.734), Vector(0.158, 5.065, 68.868), Vector(-0.355, 5.061,
			62.586), Vector(6.359, 5.081, 61.843), Vector(6.836, 5.156, 67.564), Vector(7.588, 5.172, 74.153), Vector(5.893, 6.050,
			55.047), Vector(0.450, 6.729, 55.455), Vector(-8.055, 7.114, 58.641), Vector(-9.808, 5.541, 79.612), Vector(-17.036, 6.228,
			77.519), Vector(-26.804, 6.210, 79.479), Vector(-28.017, 7.153, 75.910), Vector(-28.048, 7.692, 72.809), Vector(-25.347, 6.166,
			87.880), Vector(-24.884, 6.214, 96.300), Vector(-24.551, 7.114, 97.304), Vector(-15.897, 6.206, 96.733), Vector(-9.422, 6.290,
			95.581), Vector(-9.440, 6.212, 86.866), Vector(-15.127, 6.248, 87.442), Vector(-3.545, 5.255, 86.524), Vector(-0.059, 4.442,
			86.523), Vector(5.385, 5.610, 80.748), Vector(5.259, 4.755, 83.488), Vector(5.319, 4.167, 87.537), Vector(10.720, 3.949,
			88.664), Vector(13.529, 3.949, 89.672), Vector(13.397, 3.024, 92.049), Vector(13.633, 2.050, 99.483), Vector(8.396, 2.062,
			99.683), Vector(17.627, 3.949, 89.987), Vector(18.884, 3.949, 103.573), Vector(14.060, 4.771, 104.724), Vector(12.164, 5.717,
			105.022), Vector(8.534, 6.123, 104.435), Vector(9.366, 5.963, 113.623), Vector(3.903, 6.137, 114.078), Vector(17.169, 5.963,
			114.495), Vector(12.348, 6.384, 118.744), Vector(9.042, 5.963, 121.403), Vector(10.482, 6.043, 129.826), Vector(-4.997, 6.046,
			130.729), Vector(-4.456, 6.049, 137.092), Vector(-11.769, 5.845, 137.419), Vector(-9.985, 5.845, 142.967), Vector(-12.546,
			6.773, 133.667), Vector(-12.720, 7.603, 131.996), Vector(-12.630, 7.983, 126.615), Vector(-20.021, 6.999, 127.331), Vector(
			-22.922, 6.023, 127.560), Vector(-27.474, 6.121, 117.348), Vector(-19.323, 6.229, 116.260), Vector(4.633, 2.235, 96.479),
			Vector(5.169, 3.114, 91.534), Vector(2.424, 2.221, 94.692), Vector(2.855, 2.367, 101.063), Vector(-1.624, 1.990, 95.833),
			Vector(-0.395, 2.204, 101.059), Vector(-4.311, 1.251, 100.651), Vector(-12.071, 2.293, 102.369), Vector(-8.874, 1.462,
			100.141), Vector(-14.197, 3.215, 102.740), Vector(-21.413, 4.233, 104.737), Vector(-17.107, 4.057, 103.253), Vector(-20.906,
			5.228, 109.443), Vector(-20.281, 6.226, 112.447), Vector(-25.639, 5.189, 105.275), Vector(-32.487, 5.486, 110.799), Vector(
			-32.698, 6.200, 113.865), Vector(-31.983, 6.193, 118.172), Vector(-32.557, 5.975, 126.376), Vector(-26.233, 6.017, 122.403),
			Vector(-15.092, 6.221, 113.771), Vector(-11.845, 5.790, 118.647), Vector(-11.527, 5.534, 122.531), Vector(-1.970, 5.510,
			121.602), Vector(-2.264, 5.985, 116.813), Vector(-7.265, 6.214, 108.996), Vector(-0.219, 6.204, 108.697), Vector(-12.256,
			6.214, 109.278), Vector(-7.631, 6.187, 103.042), Vector(-5.482, 6.302, 99.548), Vector(-11.554, 6.302, 101.527), Vector(
			-16.427, 7.970, 63.699), Vector(-21.298, 7.980, 56.825), Vector(-27.662, 7.970, 62.615), Vector(-22.902, 7.970, 68.593),
			Vector(-22.380, 7.938, 63.189), Vector(-39.888, 11.750, 48.453), Vector(-35.548, 11.750, 44.434), Vector(-32.051, 11.750,
			44.322), Vector(-30.578, 10.565, 56.892), Vector(-34.230, 11.458, 54.471), Vector(-37.331, 11.750, 50.471), Vector(-69.532,
			4.061, 16.988), Vector(-60.928, 3.120, 26.062), Vector(-55.729, 3.059, 25.771), Vector(-53.098, 3.059, 24.147), Vector(-51.025,
			3.059, 27.236), Vector(-53.333, 3.059, 31.413), Vector(-48.663, 3.059, 34.396), Vector(-61.718, 3.410, 22.741), Vector(-59.185,
			3.059, 23.644), Vector(-57.732, 4.084, 21.403), Vector(-56.665, 5.050, 19.810), Vector(-55.620, 5.986, 18.271), Vector(-54.629,
			6.872, 16.817), Vector(-51.478, 7.059, 18.654), Vector(-53.466, 7.059, 22.836), Vector(-51.231, 7.059, 27.175), Vector(-45.086,
			7.059, 27.581), Vector(5.418, 3.597, 90.589));
		Global.Healthkits = Array(Vector(-3.424, -1.241, 3.742), Vector(5.912, 2.872, 19.910), Vector(-24.667, 2.677, -1.206), Vector(
			-4.992, 4.059, 45.590), Vector(-23.238, 2.059, 15.412), Vector(-39.343, 6.559, 7.197), Vector(-42.717, 11.059, 24.285), Vector(
			-37.666, 3.050, 57.758), Vector(-35.705, 3.050, 69.837), Vector(12.190, 5.156, 67.278), Vector(-16.864, 6.272, 84.669), Vector(
			17.849, 3.949, 88.210), Vector(-7.982, 1.339, 101.336));
		Global.Objective1_Node = Array(Vector(-36.757, 3.147, 42.370), Vector(-37.965, 3.079, 40.849), Vector(-39.285, 3.076, 39.355),
			Vector(-40.772, 3.061, 37.639), Vector(-42.138, 3.062, 35.980), Vector(-44.330, 3.062, 34.055), Vector(-46.118, 3.062, 36.096),
			Vector(-44.008, 3.062, 37.972), Vector(-42.348, 3.060, 39.474), Vector(-40.736, 3.074, 40.918), Vector(-39.129, 3.102, 42.178),
			Vector(-38.042, 3.150, 43.861), Vector(-39.465, 3.071, 45.391), Vector(-40.712, 3.063, 43.912), Vector(-42.203, 3.055, 42.529),
			Vector(-43.741, 3.216, 41.148), Vector(-45.241, 3.059, 39.342), Vector(-47.414, 3.036, 37.468), Vector(-49.234, 3.059, 39.410),
			Vector(-47.028, 3.217, 41.373), Vector(-43.751, 3.218, 44.312), Vector(-42.195, 3.054, 45.710), Vector(-40.796, 3.067, 46.961),
			Vector(-42.553, 3.075, 49.020), Vector(-43.952, 3.052, 47.813), Vector(-45.521, 3.052, 46.594), Vector(-47.086, 3.218, 45.320),
			Vector(-48.933, 3.054, 43.795), Vector(-51.140, 3.056, 41.998), Vector(-52.591, 3.053, 43.785), Vector(-50.495, 3.053, 45.606),
			Vector(-48.715, 3.053, 47.133), Vector(-47.163, 3.053, 48.476), Vector(-45.624, 3.053, 49.811), Vector(-47.072, 3.053, 51.385),
			Vector(-48.559, 3.053, 49.942), Vector(-49.917, 3.053, 48.451), Vector(-51.422, 3.053, 47.123), Vector(-53.797, 3.053,
			45.086));
		Global.Objective2_Node = Array(Vector(-15.756, 6.268, 108.684), Vector(-13.478, 6.214, 108.545), Vector(-10.715, 6.214, 108.583),
			Vector(-7.856, 6.204, 108.408), Vector(-4.389, 6.214, 108.211), Vector(-1.249, 6.202, 107.946), Vector(1.340, 6.239, 107.744),
			Vector(1.623, 6.237, 109.881), Vector(-0.996, 6.210, 110.191), Vector(-4.080, 6.215, 110.470), Vector(-7.676, 6.212, 110.799),
			Vector(-10.584, 6.212, 111.059), Vector(-13.263, 6.212, 111.296), Vector(-15.618, 6.212, 111.507), Vector(-15.358, 6.233,
			114.191), Vector(-13.097, 6.213, 113.981), Vector(-10.375, 6.213, 113.748), Vector(-3.727, 6.230, 113.351), Vector(-0.782,
			6.226, 113.091), Vector(1.847, 6.218, 112.702), Vector(2.119, 6.308, 115.769), Vector(-0.514, 6.212, 116.019), Vector(-3.513,
			6.229, 116.574), Vector(-10.114, 6.321, 116.696), Vector(-12.970, 6.081, 116.462), Vector(-15.330, 6.311, 116.864));
		Modify Global Variable(Path_Nodes, Remove From Array By Value, Null);
		Modify Global Variable(Healthkits, Remove From Array By Value, Null);
		Modify Global Variable(Objective1_Node, Remove From Array By Value, Null);
		Modify Global Variable(Objective2_Node, Remove From Array By Value, Null);
	}
}

rule("Volskaya")
{
	event
	{
		Subroutine;
		Volskaya;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(27.414, -1.430, -10.877), Vector(31.881, -1.414, -8.861), Vector(32.885, -0.426, -7.353), Vector(
			35.307, 0.570, -4.466), Vector(25.658, -0.875, -15.436), Vector(24.690, 0.101, -16.965), Vector(22.543, 0.570, -19.306),
			Vector(25.567, -2.339, -9.372), Vector(23.727, -3.266, -7.935), Vector(19.115, -3.430, -7.029), Vector(22.230, -3.430, -2.728),
			Vector(11.664, -3.430, 0.382), Vector(14.471, -3.430, 3.732), Vector(14.699, -3.430, 8.417), Vector(22.479, -3.430, 16.681),
			Vector(20.508, -3.456, 21.354), Vector(12.294, -3.430, 11.616), Vector(8.697, -3.430, 14.177), Vector(3.268, -3.430, 10.937),
			Vector(1.857, -3.430, 5.124), Vector(6.298, -3.430, 0.208), Vector(0.482, -3.428, -9.138), Vector(-4.357, -4.366, -5.393),
			Vector(-5.793, -5.318, -4.146), Vector(-11.676, -5.429, 0.889), Vector(-18.760, -5.429, 3.040), Vector(-21.062, -4.971,
			12.861), Vector(-20.263, -4.237, 17.439), Vector(-8.611, -4.224, 16.377), Vector(-4.076, -4.398, 19.473), Vector(5.244, -3.553,
			28.582), Vector(9.836, -3.284, 30.330), Vector(9.762, -2.620, 44.645), Vector(4.051, -2.832, 48.484), Vector(2.942, -2.681,
			39.472), Vector(-7.610, -2.680, 35.937), Vector(-16.961, -2.628, 36.414), Vector(-3.939, -2.680, 32.992), Vector(-8.027,
			-2.680, 29.489), Vector(-12.501, -2.628, 32.243), Vector(-12.119, -3.299, 26.815), Vector(-8.182, -3.654, 26.154), Vector(
			-4.488, -3.421, 26.550), Vector(-6.737, -4.198, 23.789), Vector(-17.288, -4.266, 23.026), Vector(-24.407, -3.485, 34.104),
			Vector(-26.350, -4.067, 25.506), Vector(-29.640, -3.079, 27.321), Vector(-31.157, -2.320, 27.789), Vector(-34.045, -1.430,
			27.837), Vector(-39.582, -1.430, 29.641), Vector(-39.076, -1.430, 34.137), Vector(-34.752, -1.430, 34.769), Vector(-36.102,
			-1.430, 44.520), Vector(-27.377, -1.665, 51.362), Vector(-24.035, -2.852, 38.069), Vector(-21.062, -2.126, 48.056), Vector(
			-8.842, -2.083, 51.688), Vector(-34.931, -1.006, 50.911), Vector(-30.317, -3.430, 6.678), Vector(-35.597, -3.430, 13.048),
			Vector(-43.004, -3.420, 17.946), Vector(-43.151, -2.428, 20.041), Vector(-43.155, -1.430, 22.931), Vector(-45.068, -1.430,
			27.828), Vector(-46.861, -0.509, 27.857), Vector(-48.688, 0.406, 27.812), Vector(-50.609, 1.365, 27.757), Vector(-53.314,
			1.570, 25.876), Vector(-49.521, 2.557, 24.699), Vector(-47.617, 3.508, 24.673), Vector(-37.508, 3.570, 31.484), Vector(-36.800,
			3.570, 37.948), Vector(-28.547, 3.563, 39.603), Vector(-25.574, -5.440, 7.101), Vector(-27.681, -4.480, 7.031), Vector(-29.503,
			-3.569, 7.128), Vector(-13.882, -1.749, 59.083), Vector(-18.960, -1.022, 61.353), Vector(-27.312, -0.431, 61.504), Vector(
			-29.990, -0.431, 55.102), Vector(-33.428, 0.213, 57.388), Vector(-33.396, 1.190, 59.341), Vector(-33.283, 2.149, 61.262),
			Vector(-33.161, 3.038, 63.042), Vector(-33.174, 3.570, 73.803), Vector(-29.789, 3.570, 70.053), Vector(-29.618, 3.647, 73.484),
			Vector(-29.774, 3.647, 76.796), Vector(-32.812, 3.658, 81.164), Vector(-27.768, -1.210, 65.839), Vector(-23.880, -1.568,
			67.878), Vector(-18.624, -1.749, 68.276), Vector(-10.463, -1.749, 69.855), Vector(-4.385, -1.561, 61.387), Vector(8.200,
			-1.430, 57.782), Vector(10.041, -0.519, 58.129), Vector(13.625, -0.430, 63.177), Vector(17.154, -0.430, 59.680), Vector(16.029,
			-0.430, 53.548), Vector(12.763, -0.430, 72.434), Vector(8.652, -1.155, 72.616), Vector(-1.985, -1.749, 73.489), Vector(-21.524,
			-1.729, 74.117), Vector(-21.985, -2.470, 83.259), Vector(-12.122, -2.441, 83.034), Vector(-1.233, -2.069, 77.713), Vector(
			-5.982, -2.422, 86.552), Vector(-1.490, -2.678, 85.267), Vector(-5.985, -2.496, 97.820), Vector(0.555, -2.155, 101.041),
			Vector(13.199, -2.431, 100.697), Vector(13.326, -2.430, 88.788), Vector(13.092, -1.493, 85.187), Vector(13.048, -0.560,
			83.324), Vector(11.232, -0.430, 80.751), Vector(8.826, 0.490, 84.215), Vector(8.688, 1.464, 86.165), Vector(8.959, 2.380,
			87.999), Vector(9.057, 3.337, 89.914), Vector(9.248, 3.570, 93.292), Vector(1.895, 3.470, 92.466), Vector(-2.446, 3.470,
			95.443), Vector(-2.646, 3.730, 91.519), Vector(-0.875, 3.470, 87.720), Vector(2.134, 3.470, 85.156), Vector(3.405, 3.629,
			102.223), Vector(-0.787, 3.745, 102.271), Vector(1.488, 3.570, 107.651), Vector(-2.600, 2.921, 107.674), Vector(-14.028, 2.570,
			106.908), Vector(-11.756, 2.570, 109.268), Vector(-16.404, 2.572, 109.223), Vector(-5.354, 2.572, 109.220), Vector(-21.352,
			2.734, 109.327), Vector(-24.403, 3.035, 107.370), Vector(-27.815, 3.570, 107.400), Vector(-27.825, 3.570, 98.466), Vector(
			-25.630, 3.619, 94.885), Vector(-25.730, 3.739, 100.670), Vector(-32.857, 3.570, 98.650), Vector(-32.793, 3.570, 93.471),
			Vector(-34.153, 3.570, 89.847), Vector(-34.120, 3.570, 84.913), Vector(-38.475, 3.570, 97.230), Vector(-38.707, 2.651, 91.202),
			Vector(-38.675, 1.734, 89.367), Vector(-38.728, 0.818, 87.537), Vector(-38.780, -0.108, 85.687), Vector(-35.121, -1.023,
			83.248), Vector(-33.398, -1.886, 82.992), Vector(-26.195, -2.313, 89.096), Vector(-30.969, -2.430, 88.744), Vector(-31.784,
			-2.430, 94.464), Vector(-31.871, -2.496, 104.348), Vector(-22.006, -2.453, 103.460), Vector(-20.520, -2.463, 97.590), Vector(
			-22.009, -1.513, 107.002), Vector(-22.432, -1.430, 117.197), Vector(-14.332, -1.421, 115.394), Vector(-6.448, -1.430, 117.760),
			Vector(-5.677, -1.910, 106.318), Vector(-7.472, -2.496, 102.167), Vector(-13.216, -2.145, 102.533), Vector(-13.671, -2.496,
			113.673), Vector(-18.629, -1.872, 113.338), Vector(-9.029, -1.859, 113.639), Vector(-11.458, 2.820, 77.646), Vector(-11.432,
			2.820, 73.925), Vector(-6.518, 2.820, 74.816), Vector(-14.983, 2.820, 74.133), Vector(-16.582, 2.820, 80.687), Vector(-11.038,
			2.820, 81.130), Vector(-5.433, 2.829, 81.280), Vector(-18.550, 3.493, 78.386), Vector(27.165, -2.496, 70.183), Vector(26.335,
			-2.496, 80.215), Vector(23.501, -2.496, 86.816), Vector(18.358, -2.430, 86.412), Vector(22.929, -2.496, 101.479), Vector(
			17.713, -0.313, 72.750), Vector(20.293, 0.664, 72.678), Vector(22.156, 1.597, 72.763), Vector(26.751, 2.570, 76.861), Vector(
			24.187, 2.570, 89.587), Vector(24.067, 2.570, 87.145), Vector(-42.591, 3.570, 97.319), Vector(-43.290, 3.417, 90.728), Vector(
			-43.233, 2.455, 88.803), Vector(-43.136, 1.557, 87.006), Vector(-43.106, 0.620, 85.134), Vector(-43.083, -0.355, 83.181),
			Vector(-43.039, -1.258, 81.377), Vector(-43.098, -2.202, 79.488), Vector(-39.044, -2.611, 72.881), Vector(-48.146, -2.377,
			78.117), Vector(-49.160, -2.491, 88.289), Vector(-52.001, -3.425, 97.925), Vector(-44.252, -3.429, 103.582), Vector(-35.421,
			-2.496, 103.709), Vector(-59.423, -2.805, 94.053), Vector(-64.304, -2.516, 91.043), Vector(-61.286, -2.430, 85.605), Vector(
			-55.635, -2.611, 76.016), Vector(-50.681, -2.611, 64.123), Vector(-45.950, -1.672, 60.850), Vector(-44.236, -1.430, 57.024),
			Vector(-50.469, -1.430, 48.442), Vector(-54.643, -1.430, 46.464), Vector(-60.676, -1.430, 55.062), Vector(-58.174, -1.759,
			57.155), Vector(-58.453, -2.611, 63.954), Vector(-65.071, -2.611, 73.381), Vector(-72.684, -2.430, 77.054), Vector(-72.353,
			-1.782, 73.187), Vector(-67.753, -1.430, 65.880), Vector(-72.919, -0.306, 62.034), Vector(-70.812, -1.118, 63.298), Vector(
			-70.866, -2.518, 87.862), Vector(-74.621, -2.474, 80.780), Vector(-76.595, -1.530, 82.752), Vector(-77.850, -0.538, 84.309),
			Vector(-76.763, 0.421, 88.490), Vector(-75.229, 1.317, 89.416), Vector(-73.600, 2.247, 90.321), Vector(-71.990, 3.154, 91.160),
			Vector(-69.413, 3.570, 92.955), Vector(-64.567, 3.570, 90.686), Vector(-61.703, 3.570, 86.465), Vector(-55.084, 3.570, 89.111),
			Vector(-49.589, 3.570, 92.694), Vector(-67.346, 3.570, 81.972), Vector(-65.118, -0.540, 53.101), Vector(-65.772, 4.070,
			52.234), Vector(-57.612, -1.430, 42.940), Vector(-70.114, -0.930, 37.522), Vector(-71.164, -0.930, 33.723), Vector(-67.720,
			-0.930, 29.147), Vector(-63.522, -0.930, 29.934), Vector(-59.719, -0.930, 33.152), Vector(-64.327, -0.928, 39.841), Vector(
			-78.440, -0.430, 49.353), Vector(-75.832, -0.430, 56.011), Vector(-71.642, -0.430, 50.749), Vector(-80.650, -0.426, 65.398),
			Vector(-82.395, -1.280, 68.208), Vector(-85.049, -2.426, 73.341), Vector(-82.327, -1.504, 68.770), Vector(-88.937, -2.430,
			78.450), Vector(-90.695, -1.456, 82.007), Vector(-91.499, -0.555, 83.037), Vector(-94.167, -0.363, 84.058), Vector(-95.775,
			0.568, 83.119), Vector(-97.308, 1.441, 82.276), Vector(-98.876, 2.351, 81.354), Vector(-100.477, 3.280, 80.402), Vector(
			-103.154, 3.570, 78.767), Vector(-100.962, 3.740, 71.803), Vector(-97.911, 3.572, 73.851), Vector(-96.376, 3.572, 68.467),
			Vector(-94.627, 3.572, 64.339), Vector(-91.831, 3.572, 60.689), Vector(-91.449, 3.572, 56.255), Vector(-87.742, 3.648, 58.282),
			Vector(-114.645, 3.570, 71.778), Vector(-110.376, 3.570, 67.612), Vector(-110.628, 3.570, 64.171), Vector(-110.902, 3.570,
			61.411), Vector(-112.917, 2.601, 60.095), Vector(-114.316, 1.764, 59.174), Vector(-111.813, 3.280, 60.890), Vector(-115.923,
			0.765, 57.964), Vector(-117.499, -0.181, 56.917), Vector(-118.235, -0.430, 53.423), Vector(-111.705, -0.312, 48.345), Vector(
			-114.968, -0.430, 49.214), Vector(-121.906, -0.430, 45.480), Vector(-125.369, -0.430, 47.922), Vector(-130.214, -0.430,
			45.053), Vector(-132.296, -0.430, 41.671), Vector(-128.938, 0.569, 38.694), Vector(-126.317, 0.569, 34.896), Vector(-127.048,
			0.569, 27.394), Vector(-120.549, 0.544, 33.474), Vector(-118.477, 0.569, 28.308), Vector(-110.779, -0.430, 26.838), Vector(
			-105.563, -0.430, 18.547), Vector(-98.086, -0.926, 23.022), Vector(-102.348, -0.930, 30.017), Vector(-99.669, -0.428, 32.314),
			Vector(-108.673, -0.930, 40.380), Vector(-101.363, -0.430, 44.968), Vector(-87.883, -0.928, 28.724), Vector(-88.885, -0.926,
			39.396), Vector(-90.959, -0.431, 43.016), Vector(-81.479, -0.930, 31.166), Vector(-77.959, -0.930, 26.831), Vector(-82.867,
			-0.167, 26.698), Vector(-82.020, 0.823, 24.896), Vector(-80.367, 1.570, 21.906), Vector(-87.032, 1.570, 17.919), Vector(
			-88.733, 2.474, 20.412), Vector(-89.712, 3.321, 21.801), Vector(-91.098, 3.570, 27.544), Vector(-93.702, 3.572, 26.169),
			Vector(-96.730, 3.572, 33.281), Vector(-88.770, 3.572, 38.644), Vector(-89.840, 3.748, 35.584), Vector(-89.765, 3.674, 40.430),
			Vector(-84.789, 3.570, 36.290), Vector(-81.440, 3.572, 43.105), Vector(-83.322, 3.572, 46.807), Vector(-83.438, 3.579, 50.769),
			Vector(-87.071, 3.579, 49.076), Vector(-100.021, 3.570, 38.536), Vector(-102.446, 3.811, 46.669), Vector(-100.670, 3.570,
			43.478), Vector(-103.527, 3.811, 41.706), Vector(-105.813, 3.687, 45.358), Vector(-102.850, 3.570, 43.959), Vector(-107.396,
			3.570, 51.111), Vector(-107.256, 3.570, 56.993), Vector(-85.044, -0.430, 51.472), Vector(-88.646, -0.430, 56.284), Vector(
			-82.544, -0.430, 64.078), Vector(-85.334, -0.430, 58.812), Vector(-80.393, -0.430, 54.047), Vector(-86.739, -0.430, 63.764),
			Vector(-88.218, -1.423, 66.176), Vector(-89.472, -2.242, 67.329), Vector(-92.247, -2.430, 67.260), Vector(-91.255, -2.430,
			71.294), Vector(-95.775, -2.430, 73.729), Vector(-98.958, -2.430, 71.734), Vector(-96.375, -2.430, 66.994), Vector(-104.341,
			-2.430, 67.574), Vector(-100.997, -2.430, 62.125), Vector(-99.738, -1.496, 60.514), Vector(-98.738, -0.572, 58.960), Vector(
			-97.045, -0.430, 56.735), Vector(-77.591, -0.430, 68.752), Vector(-84.202, -0.424, 78.688), Vector(-89.661, -0.428, 87.233),
			Vector(-71.214, 4.070, 53.689), Vector(-75.097, 4.206, 51.640), Vector(-74.899, 4.248, 48.094), Vector(-72.378, 4.230, 43.876),
			Vector(-70.052, 4.070, 40.810), Vector(-66.459, 4.176, 42.616), Vector(-62.366, 4.184, 45.114), Vector(-66.437, 4.070, 47.066),
			Vector(-70.425, 4.070, 51.319));
		Global.Healthkits = Array(Vector(17.642, -3.420, 45.698), Vector(-8.274, -2.590, 37.405), Vector(-39.747, -1.430, 24.487), Vector(
			17.803, -3.427, 45.790), Vector(-30.503, -0.430, 53.987), Vector(20.729, -0.430, 55.631), Vector(-15.867, -2.430, 78.742),
			Vector(-33.236, -2.430, 88.301), Vector(-14.167, -1.430, 117.523), Vector(-64.052, -2.430, 82.587), Vector(-65.316, 3.570,
			83.267), Vector(-73.240, -0.930, 32.520), Vector(-69.424, -0.430, 46.738), Vector(-109.919, -0.430, 55.166), Vector(-97.270,
			-0.428, 33.592), Vector(-91.576, -2.430, 63.143));
		Global.Objective1_Node = Array(Vector(-7.769, -2.289, 85.207), Vector(-7.815, -2.289, 87.377), Vector(-7.840, -2.289, 89.852),
			Vector(-7.870, -2.289, 92.546), Vector(-7.896, -2.289, 95.101), Vector(-10.586, -2.289, 95.080), Vector(-10.507, -2.289,
			92.481), Vector(-10.507, -2.298, 89.904), Vector(-10.502, -2.289, 87.292), Vector(-10.497, -2.289, 85.103), Vector(-13.432,
			-2.289, 85.104), Vector(-13.432, -2.310, 87.354), Vector(-13.432, -2.144, 89.979), Vector(-13.433, -2.160, 92.463), Vector(
			-13.413, -2.291, 94.941), Vector(-16.509, -2.291, 94.941), Vector(-16.509, -2.293, 92.276), Vector(-16.509, -2.316, 89.911),
			Vector(-16.509, -2.289, 87.247), Vector(-16.505, -2.289, 85.047), Vector(-19.485, -2.289, 85.047), Vector(-19.485, -2.289,
			87.273), Vector(-19.485, -2.289, 89.919), Vector(-19.484, -2.289, 92.403), Vector(-19.484, -2.289, 95.021));
		Global.Objective2_Node = Array(Vector(-85.259, -0.430, 47.489), Vector(-87.578, -0.430, 46.107), Vector(-90.244, -0.430, 44.475),
			Vector(-92.404, -0.430, 43.138), Vector(-94.466, -0.430, 41.875), Vector(-96.901, -0.430, 40.386), Vector(-98.394, -0.430,
			42.773), Vector(-95.954, -0.430, 44.219), Vector(-93.803, -0.430, 45.536), Vector(-91.720, -0.430, 46.812), Vector(-88.960,
			-0.430, 48.498), Vector(-86.710, -0.430, 49.878), Vector(-88.119, -0.430, 52.264), Vector(-90.392, -0.430, 50.855), Vector(
			-93.176, 0.659, 49.149), Vector(-95.257, 0.541, 47.899), Vector(-97.430, -0.430, 46.608), Vector(-99.799, -0.430, 45.150),
			Vector(-101.640, -0.430, 48.130), Vector(-99.006, -0.430, 49.694), Vector(-97.037, -0.430, 50.902), Vector(-94.790, -0.430,
			52.278), Vector(-92.267, -0.430, 53.823), Vector(-89.944, -0.430, 55.238), Vector(-91.288, -0.430, 57.447), Vector(-93.702,
			-0.430, 55.975), Vector(-96.241, -0.430, 54.421), Vector(-98.429, -0.430, 53.079), Vector(-100.506, -0.430, 51.832), Vector(
			-102.906, -0.430, 50.366), Vector(-103.862, -0.430, 51.903), Vector(-101.452, -0.430, 53.374), Vector(-99.312, -0.430, 54.687),
			Vector(-97.289, -0.430, 55.928), Vector(-94.725, -0.430, 57.466), Vector(-92.310, -0.430, 58.923));
		Modify Global Variable(Path_Nodes, Remove From Array By Value, Null);
		Modify Global Variable(Healthkits, Remove From Array By Value, Null);
		Modify Global Variable(Objective1_Node, Remove From Array By Value, Null);
		Modify Global Variable(Objective2_Node, Remove From Array By Value, Null);
	}
}

disabled rule("----------------------------------- Nodes ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- D.VA AI ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Skip Assembing Time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(Workshop Setting Integer(Custom String("Game"), Custom String("Assembing Time"), 5, 0, 30, 0));
	}
}

rule("Create Dummy Bot")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(
			Global.Defense_Amount_Currently < Global.Defense_Amount_Desired || Global.Offense_Amount_Currently < Global.Offense_Amount_Desired)
			== True;
		(Is In Setup || Is Game In Progress) == True;
	}

	actions
	{
		Skip If(Global.Defense_Amount_Currently >= Global.Defense_Amount_Desired, 2);
		Create Dummy Bot(Hero(D.Va), Team 1, 5 + Global.Defense_Amount_Currently, Random Value In Array(Spawn Points(Team 1)), Null);
		Global.Defense_Amount_Currently += 1;
		Skip If(Global.Offense_Amount_Currently >= Global.Offense_Amount_Desired, 2);
		Create Dummy Bot(Hero(D.Va), Team 2, 5 + Global.Offense_Amount_Currently, Random Value In Array(Spawn Points(Team 2)), Null);
		Global.Offense_Amount_Currently += 1;
		Wait(Max(Server Load / 1000, 0.100), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Destroy Dummy Bot")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(
			Global.Defense_Amount_Currently < Global.Defense_Amount_Desired || Global.Offense_Amount_Currently < Global.Offense_Amount_Desired)
			== True;
	}

	actions
	{
		Skip If(Global.Defense_Amount_Currently <= Global.Defense_Amount_Desired, 2);
		Global.Defense_Amount_Currently -= 1;
		Destroy Dummy Bot(Team 1, 5 + Global.Defense_Amount_Currently);
		Skip If(Global.Offense_Amount_Currently <= Global.Offense_Amount_Desired, 2);
		Global.Offense_Amount_Currently -= 1;
		Destroy Dummy Bot(Team 2, 5 + Global.Offense_Amount_Currently);
		Wait(Max(Server Load / 1000, 0.100), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Setup Bots")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Is In Line of Sight(Eye Position(Event Player), Event Player.Walk_To_Position,
			Barriers Do Not Block LOS) ? (Distance Between(Event Player, Event Player.Walk_To_Position)
			< Event Player.Walk_Min ? Direction Towards(Event Player.Walk_To_Position, Event Player) : Direction Towards(Event Player,
			Event Player.Walk_To_Position)) : Direction Towards(Position Of(Event Player), Event Player.Current_Node), (Distance Between(
			Event Player, Event Player.Walk_To_Position) < Event Player.Walk_Min || Distance Between(Event Player,
			Event Player.Walk_To_Position) > Event Player.Walk_Max) && Is In Line of Sight(Eye Position(Event Player),
			Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 1 : (Is In Line of Sight(Eye Position(Event Player),
			Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 0 : 1), To World, Replace existing throttle,
			Direction and Magnitude);
		Start Facing(Event Player, Entity Exists(First Of(Event Player.Target_Order)) ? Direction Towards(Eye Position(Event Player),
			!Has Status(First Of(Event Player.Target_Order), Knocked Down) && !Has Status(First Of(Event Player.Target_Order), Asleep)
			? Eye Position(First Of(Event Player.Target_Order)) : Position Of(First Of(Event Player.Target_Order))) : (Is In Line of Sight(
			Eye Position(Event Player), Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? Direction Towards(Eye Position(
			Event Player), Event Player.Walk_To_Position) : Direction Towards(Eye Position(Event Player), Event Player.Current_Node)),
			Is True For Any(Array(Has Status(Event Player, Knocked Down), Has Status(Event Player, Asleep), Has Status(Event Player,
			Frozen), Has Status(Event Player, Stunned)), Current Array Element == True) ? 0 : (Magnitude Of(Throttle Of(Event Player))
			== 0 && !Entity Exists(First Of(Event Player.Target_Order)) ? 0 : (!Entity Exists(First Of(Event Player.Target_Order))
			&& Is Using Ability 1(Event Player) ? 1000 : 225)), To World, Direction and Turn Rate);
		Chase Player Variable At Rate(Event Player, Self_Destuct_Pos, Ray Cast Hit Position(
			Event Player.Self_Destuct_Pos - Event Player.Self_Destruct_Dir, Event Player.Self_Destuct_Pos + Event Player.Self_Destruct_Dir,
			Null, Event Player, False), 12, Destination and Rate);
		Chase Player Variable At Rate(Event Player, Self_Destruct_Dir, Vector(0, -1, 0), Event Player.Booster_Timer > 0 ? 0 : 999,
			Destination and Rate);
		Chase Player Variable At Rate(Event Player, Self_Destruct_Timer, 0, 1, Destination and Rate);
		Chase Player Variable At Rate(Event Player, Booster_Timer, 0, 1, Destination and Rate);
		Chase Player Variable At Rate(Event Player, Ignore_Lower_Nodes, 0, 1, Destination and Rate);
	}
}

rule("Targeting List")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.Targets = Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), Is In Line of Sight(
			Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS) == True);
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets,
			Hero Being Duplicated(Current Array Element) == Hero(Sombra) || Hero Of(Current Array Element) == Hero(Sombra)
			? Is Using Ability 1(Current Array Element) && !Is Firing Secondary(Current Array Element) && Distance Between(Event Player,
			Current Array Element) > 3 : Is Dead(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, !Has Spawned(
			Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, Has Status(
			Current Array Element, Invincible)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, Has Status(
			Current Array Element, Phased Out)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(D.Va) || Hero Of(Current Array Element) == Hero(D.Va))
			&& Is Firing Secondary(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Sigma) || Hero Of(Current Array Element) == Hero(Sigma))
			&& Is Using Ability 1(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Orisa) || Hero Of(Current Array Element) == Hero(Orisa))
			&& Is Using Ability 2(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Doomfist) || Hero Of(Current Array Element) == Hero(Doomfist))
			&& Is Using Ultimate(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Genji) || Hero Of(Current Array Element) == Hero(Genji))
			&& Is Using Ability 2(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Mei) || Hero Of(Current Array Element) == Hero(Mei))
			&& Is Using Ability 1(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Moira) || Hero Of(Current Array Element) == Hero(Moira))
			&& Is Using Ability 1(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Reaper) || Hero Of(Current Array Element) == Hero(Reaper))
			&& Is Using Ability 1(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Tracer) || Hero Of(Current Array Element) == Hero(Tracer))
			&& Is Using Ability 2(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Zenyatta) || Hero Of(Current Array Element) == Hero(Zenyatta))
			&& Is Using Ultimate(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, Is Dead(
			Current Array Element)));
		Event Player.Target_Order = Sorted Array(Event Player.Targets, Distance Between(Event Player, Current Array Element)
			* Normalized Health(Current Array Element));
		Event Player.Target_Order = Sorted Array(Event Player.Targets, Current Array Index * ((Hero Being Duplicated(Current Array Element)
			== Hero(D.Va) || Hero Of(Current Array Element) == Hero(D.Va)) && Is In Alternate Form(Current Array Element) ? -1 : 1));
		If(Count Of(Event Player.Target_Order) == 0);
			Press Button(Event Player, Button(Reload));
		End;
		Wait(Max(Server Load / 1000, 0.100), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Gained Mech")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Is In Alternate Form(Event Player) != True;
	}

	actions
	{
		If(Entity Exists(First Of(Event Player.Target_Order)));
			Event Player.Walk_Max = 10;
			Event Player.Walk_Min = 0;
		End;
	}
}

rule("Lost Mech")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		If(Entity Exists(First Of(Event Player.Target_Order)));
			Event Player.Walk_Max = 40;
			Event Player.Walk_Min = 35;
		End;
	}
}

rule("Start Firing Primary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) != True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is Firing Secondary(Event Player) != True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Stop Firing Primary")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		(Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			!= True || !Entity Exists(First Of(Event Player.Target_Order)) || Is Firing Secondary(Event Player)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Boosters (Mobility)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) != True;
		Is Using Ability 1(Event Player) != True;
		Ability Cooldown(Event Player, Button(Ability 1)) == Null;
		Is In Alternate Form(Event Player) != True;
		Distance Between(Event Player, Event Player.Walk_To_Position) >= 12;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Event Player.Booster_Timer = 2;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Boosters (Fly Over Gap)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) != True;
		Is Using Ability 1(Event Player) != True;
		Ability Cooldown(Event Player, Button(Ability 1)) == Null;
		Is In Air(Event Player) == True;
		Is In Alternate Form(Event Player) != True;
		Altitude Of(Event Player) > 3;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Event Player.Booster_Timer = 2;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Boosters (Offence)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is Using Ability 1(Event Player) != True;
		Ability Cooldown(Event Player, Button(Ability 1)) == Null;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is In Alternate Form(Event Player) != True;
		Ultimate Charge Percent(Event Player) < 100;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Event Player.Booster_Timer = 2;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Micro Missiles")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is Using Ability 2(Event Player) != True;
		Ability Cooldown(Event Player, Button(Ability 2)) == Null;
		Is Firing Secondary(Event Player) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is In Alternate Form(Event Player) != True;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Start Using Defence Matrix")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is Firing Secondary(Event Player) != True;
		Ability Resource(Event Player, Button(Secondary Fire)) >= 40;
		Is In Alternate Form(Event Player) != True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Stop Using Defence Matrix")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Is Firing Secondary(Event Player) == True;
		(Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			!= True || !Entity Exists(First Of(Event Player.Target_Order)) || Is In Alternate Form(Event Player)) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Self Destruct (Targets)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Count Of(Event Player.Target_Order) >= 3;
		Ability Cooldown(Event Player, Button(Ability 1)) == Null;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is In Alternate Form(Event Player) != True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait Until(Is Using Ability 1(Event Player), 1);
		Press Button(Event Player, Button(Ultimate));
		Event Player.Self_Destuct_Pos = Eye Position(Event Player);
		Event Player.Booster_Timer = 2;
		Event Player.Self_Destruct_Dir = Facing Direction Of(Event Player);
		Event Player.Self_Destruct_Timer = 3;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Self Destruct (Mech Died)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Count Of(Event Player.Target_Order) >= 2;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is In Alternate Form(Event Player) != True;
		Ultimate Charge Percent(Event Player) == 100;
		Health(Event Player) <= 1;
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
		Event Player.Self_Destuct_Pos = Eye Position(Event Player);
		Event Player.Self_Destruct_Timer = 3;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Call Mech")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Is In Alternate Form(Event Player) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}
