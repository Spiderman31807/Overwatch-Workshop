settings
{
	main
	{
		Mode Name: "Ashe AI - 7SZ84"
	}

	lobby
	{
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Max Team 1 Players: 4
		Max Team 2 Players: 4
		Return To Lobby: Never
	}

	modes
	{
		Assault
		{
			Game Mode Start: Immediately
			Tank Role Passive Health Bonus: Always Enabled
		}

		General
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}
	}

	extensions
	{
		Spawn More Dummy Bots
	}
}

variables
{
	global:
		0: Path_Nodes
		1: Healthkits
		2: Defense_Amount_Desired
		3: Offense_Amount_Desired
		5: ObjectiveA_Nodes
		6: ObjectiveB_Nodes
		7: Defense_Amount_Currently
		8: Offense_Amount_Currently
		9: Chokepoint
		10: Staircase_Top
		11: Staircase_Middle
		12: Staircase_Bottom
		13: Healthkits_Small
		14: Healthkits_Large
		15: Healthkit_Index
		16: Healthkit_CD
		17: Healthkit_Used
		18: Used_Healthkit_Type

	player:
		0: Walk_To_Position
		1: Current_Node
		2: Targets
		3: Using_Biotic_Field
		4: Node_Options
		7: Walk_Max
		8: Walk_Min
		9: Sprinting
		14: Pathing_To_Biotic_Field
		17: Using_Stairs
		18: Last_Stair_Type
		19: Stairs_Index
		27: Target_Order
		66: Node_DePrioritze
		67: Known_Nodes
		68: Vist_Count
		127: Ignore_Lower_Nodes
}

subroutines
{
	0: Hanamura
	1: Horizon
	2: Paris
	3: Temple_of_Anubus
	4: Volskaya
	9: Node_Setup
}

rule("------------------------------------------- Made By Spiderman318 | YT Spiderman318 ---------------------------------------")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Call Subroutine(Node_Setup);
		Global.Defense_Amount_Desired = Workshop Setting Integer(Custom String("AI"), Custom String("Defense Amount"), 1, 0, 5, 0);
		Global.Offense_Amount_Desired = Workshop Setting Integer(Custom String("AI"), Custom String("Offense Amount"), 1, 0, 5, 0);
	}
}

rule("Use Healthkit")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Event Was Health Pack == True;
		Is In Spawn Room(Event Player) != True;
		(Hero Of(Healer) == Hero(Sombra) || !Entity Exists(Healer)) == True;
	}

	actions
	{
		If(Count Of(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large)) == 0);
			Modify Global Variable(Healthkit_Used, Append To Array, First Of(Sorted Array(Global.Healthkits, Distance Between(Event Player,
				Current Array Element))));
			Modify Global Variable(Healthkits, Remove From Array By Value, First Of(Sorted Array(Global.Healthkits, Distance Between(
				Event Player, Current Array Element))));
			Modify Global Variable(Healthkit_CD, Append To Array, Event Healing > 75 ? 15 : 10);
			Modify Global Variable(Used_Healthkit_Type, Append To Array, 0);
		Else;
			If(Array Contains(Global.Healthkits_Small, First Of(Sorted Array(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large),
				Distance Between(Event Player, Current Array Element)))));
				Modify Global Variable(Healthkit_Used, Append To Array, First Of(Sorted Array(Global.Healthkits_Small, Distance Between(
					Event Player, Current Array Element))));
				Modify Global Variable(Healthkits_Small, Remove From Array By Value, First Of(Sorted Array(Global.Healthkits_Small,
					Distance Between(Event Player, Current Array Element))));
				Modify Global Variable(Healthkit_CD, Append To Array, 10);
				Modify Global Variable(Used_Healthkit_Type, Append To Array, 1);
			Else;
				Modify Global Variable(Healthkit_Used, Append To Array, First Of(Sorted Array(Global.Healthkits_Large, Distance Between(
					Event Player, Current Array Element))));
				Modify Global Variable(Healthkits_Large, Remove From Array By Value, First Of(Sorted Array(Global.Healthkits_Large,
					Distance Between(Event Player, Current Array Element))));
				Modify Global Variable(Healthkit_CD, Append To Array, 15);
				Modify Global Variable(Used_Healthkit_Type, Append To Array, 2);
			End;
		End;
	}
}

rule("Healthkit Cooldown")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Healthkit_Used = Empty Array;
		Global.Healthkit_CD = Empty Array;
		Global.Used_Healthkit_Type = Empty Array;
		While(True);
			Wait Until(Count Of(Global.Healthkit_Used) > 0, 99999);
			For Global Variable(Healthkit_Index, Count Of(Global.Healthkit_Used) - 1, -1, -1);
				If(Global.Healthkit_CD[Global.Healthkit_Index] <= 0);
					If(Global.Used_Healthkit_Type[Global.Healthkit_Index] == 1);
						Modify Global Variable(Healthkits_Small, Append To Array, Global.Healthkit_Used[Global.Healthkits]);
					Else If(Global.Used_Healthkit_Type[Global.Healthkit_Index] == 2);
						Modify Global Variable(Healthkits_Large, Append To Array, Global.Healthkit_Used[Global.Healthkits]);
					Else;
						Modify Global Variable(Healthkits, Append To Array, Global.Healthkit_Used[Global.Healthkits]);
					End;
					Modify Global Variable(Healthkit_Used, Remove From Array By Index, Global.Healthkit_Index);
					Modify Global Variable(Healthkit_CD, Remove From Array By Index, Global.Healthkit_Index);
					Modify Global Variable(Used_Healthkit_Type, Remove From Array By Index, Global.Healthkit_Index);
				Else;
					Global.Healthkit_CD[Global.Healthkit_Index] -= 1;
				End;
			End;
			Wait(1, Ignore Condition);
		End;
	}
}

disabled rule("----------------------------------- AI Communicate ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Bot Say Hello")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Hello) == True;
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Communicate(Filtered Array(Remove From Array(All Living Players(Team Of(Event Player)), Event Player), Is In View Angle(
			Event Player, Eye Position(Current Array Element), 45) == True && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Current Array Element), Barriers Do Not Block LOS) == True && Distance Between(Event Player, Current Array Element)
			< 20 && Is Dummy Bot(Current Array Element)), Hello);
	}
}

rule("Bot Say Need Help")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Need Help) != True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Communicate(Event Player, Need Help);
		Wait(8, Ignore Condition);
	}
}

rule("Bot Say Need Healing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Need Healing) != True;
		Is Dummy Bot(Event Player) == True;
		Normalized Health(Event Player) <= 0.800;
		Ability Cooldown(Event Player, Button(Ability 2)) != Null;
		Event Player.Using_Biotic_Field != True;
	}

	actions
	{
		Communicate(Event Player, Need Healing);
		Wait(8, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bot Say Understood")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Ultimate Status) == True;
		Is Dummy Bot(Event Player) != True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Communicate(Filtered Array(Remove From Array(All Living Players(Team Of(Event Player)), Event Player), Is Dummy Bot(
			Current Array Element)), Acknowledge);
	}
}

rule("Bot Say Thanks")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Thanks) != True;
		Is Dummy Bot(Event Player) == True;
		Healer != Healee;
		Entity Exists(Healer) == True;
	}

	actions
	{
		Communicate(Event Player, Thanks);
		Wait(8, Ignore Condition);
	}
}

disabled rule("----------------------------------- AI Communicate ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- Pathfinder ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Pathfind Melee/Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Magnitude Of(Throttle Of(Event Player)) > 0;
		Is Alive(Event Player) == True;
		Speed Of(Event Player) < 2;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(Max(Server Load / 1000, 0.250), Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Skip If(Event Player.Sprinting, 2);
		Wait(Max(Server Load / 1000, 0.250), Ignore Condition);
		Press Button(Event Player, Button(Melee));
		Loop If Condition Is True;
	}
}

rule("Current Node")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.Walk_To_Position == Vector(X Component Of(Event Player.Walk_To_Position), Y Component Of(
			Event Player.Walk_To_Position), Z Component Of(Event Player.Walk_To_Position));
	}

	actions
	{
		Event Player.Using_Stairs = Array Contains(Append To Array(Append To Array(Global.Staircase_Middle, Filtered Array(
			Global.Staircase_Bottom, Current Array Element != Null)), Global.Staircase_Top), Event Player.Current_Node) ? True : False;
		Skip If(Y Component Of(Position Of(Event Player)) + 2.750 >= Y Component Of(Event Player.Walk_To_Position), 2);
		Event Player.Ignore_Lower_Nodes = 5;
		Chase Player Variable Over Time(Event Player, Ignore_Lower_Nodes, 0, 5, Destination and Duration);
		If(Distance Between(Position Of(Event Player), Event Player.Current_Node) < 3);
			If(Event Player.Using_Stairs);
				If(Array Contains(Global.Staircase_Middle, Event Player.Current_Node));
					Event Player.Last_Stair_Type = Custom String("Bottom");
				Else If(Array Contains(Filtered Array(Global.Staircase_Bottom, Current Array Element != Null), Event Player.Current_Node));
					Event Player.Last_Stair_Type = Custom String("Middle");
				Else If(Array Contains(Filtered Array(Global.Staircase_Top, Current Array Element != Null), Event Player.Current_Node));
					Event Player.Last_Stair_Type = Custom String("Top");
				End;
			End;
			If(Array Contains(Event Player.Known_Nodes, Event Player.Current_Node) != True);
				Modify Player Variable(Event Player, Known_Nodes, Append To Array, Event Player.Current_Node);
				Modify Player Variable(Event Player, Vist_Count, Append To Array, 1);
			Else;
				Event Player.Vist_Count[Index Of Array Value(Event Player.Known_Nodes, Event Player.Current_Node)] += 1;
			End;
			Event Player.Node_DePrioritze[Index Of Array Value(Event Player.Known_Nodes, Event Player.Current_Node)] += 10;
		End;
		Event Player.Node_Options = Filtered Array(Append To Array(Append To Array(Global.Path_Nodes, Append To Array(Append To Array(
			Global.ObjectiveA_Nodes, Global.ObjectiveB_Nodes), Global.Chokepoint)), Append To Array(Append To Array(
			Global.Staircase_Middle, Filtered Array(Global.Staircase_Bottom, Current Array Element != Null)), Global.Staircase_Top)),
			Event Player.Node_DePrioritze[Index Of Array Value(Event Player.Known_Nodes, Current Array Element)] <= 9999);
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Event Player, Current Array Element) <= 30);
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Y Component Of(Position Of(Event Player))
			+ 2.750 > Y Component Of(Current Array Element));
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
			Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
			Event Player), Current Array Element) / 1.200), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 1.200) + Vector(0, -99, 0),
			Null, All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 1.200)) < Max(Y Component Of(
			Position Of(Event Player)) + 1 - Y Component Of(Current Array Element), 8));
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
			Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
			Event Player), Current Array Element) / 2), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 2) + Vector(0, -99, 0), Null,
			All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 2)) < Max(Y Component Of(
			Position Of(Event Player)) + 1 - Y Component Of(Current Array Element), 8));
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Distance Between(Ray Cast Hit Position(Eye Position(
			Event Player) + Direction Towards(Eye Position(Event Player), Current Array Element) * (Distance Between(Eye Position(
			Event Player), Current Array Element) / 4), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 4) + Vector(0, -99, 0), Null,
			All Players(All Teams), False), Eye Position(Event Player) + Direction Towards(Eye Position(Event Player),
			Current Array Element) * (Distance Between(Eye Position(Event Player), Current Array Element) / 4)) < Max(Y Component Of(
			Position Of(Event Player)) + 1 - Y Component Of(Current Array Element), 8));
		If(Event Player.Using_Stairs);
			If(Array Contains(Global.Staircase_Middle, Event Player.Current_Node));
				Event Player.Stairs_Index = Index Of Array Value(Global.Staircase_Middle, Event Player.Current_Node);
			Else If(Array Contains(Filtered Array(Global.Staircase_Bottom, Current Array Element != Null), Event Player.Current_Node));
				Event Player.Stairs_Index = Index Of Array Value(Global.Staircase_Bottom, Event Player.Current_Node);
			Else If(Array Contains(Filtered Array(Global.Staircase_Top, Current Array Element != Null), Event Player.Current_Node));
				Event Player.Stairs_Index = Index Of Array Value(Global.Staircase_Top, Event Player.Current_Node);
			End;
			If(Event Player.Last_Stair_Type == Custom String("Bottom"));
				If(Global.Staircase_Bottom[Event Player.Stairs_Index] == Null);
					Modify Player Variable(Event Player, Node_Options, Append To Array, Global.Staircase_Top[Event Player.Stairs_Index]);
				Else;
					Modify Player Variable(Event Player, Node_Options, Append To Array, Global.Staircase_Bottom[Event Player.Stairs_Index]);
				End;
			Else If(Event Player.Last_Stair_Type == Custom String("Middle"));
				Modify Player Variable(Event Player, Node_Options, Append To Array, Global.Staircase_Top[Event Player.Stairs_Index]);
			End;
		End;
		Event Player.Node_Options = Filtered Array(Event Player.Node_Options, Is In Line of Sight(Eye Position(Event Player),
			Current Array Element, Barriers Do Not Block LOS) == True);
		Event Player.Node_Options = Sorted Array(Event Player.Node_Options, Distance Between(Event Player, Current Array Element) * (
			Y Component Of(Position Of(Event Player)) + 1 <= Y Component Of(Current Array Element)
			|| !Event Player.Ignore_Lower_Nodes ? 1 : (Distance Between(Event Player, Event Player.Walk_To_Position) < Distance Between(
			Current Array Element, Event Player.Walk_To_Position) ? 5 : 2.500)) + Distance Between(Event Player.Walk_To_Position,
			Current Array Element) + Event Player.Node_DePrioritze[Index Of Array Value(Event Player.Known_Nodes, Current Array Element)]);
		Skip If(Distance Between(Vector(X Component Of(Position Of(Event Player)), Y Component Of(Event Player.Walk_To_Position),
			Z Component Of(Position Of(Event Player))), Event Player.Walk_To_Position) > 15, 1);
		Event Player.Node_Options = Sorted Array(Event Player.Node_Options, Current Array Index * (
			Event Player.Ignore_Lower_Nodes != 0 && Y Component Of(Position Of(Event Player)) + (Array Contains(Global.Staircase_Middle,
			Current Array Element) ? 1.500 : 2.750) <= Y Component Of(Current Array Element) && Array Contains(Append To Array(
			Append To Array(Global.Staircase_Middle, Global.Staircase_Bottom), Global.Staircase_Top), Current Array Element) ? 1 : 5));
		Event Player.Current_Node = First Of(Event Player.Node_Options) < 0 ? First Of(Sorted Array(Filtered Array(
			Event Player.Node_Options, Current Array Index < 0), Absolute Value(Current Array Index))) : First Of(
			Event Player.Node_Options);
		If(Count Of(Event Player.Node_Options) == 0);
			Event Player.Node_DePrioritze = Empty Array;
			Event Player.Vist_Count = Empty Array;
			Event Player.Known_Nodes = Empty Array;
		End;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop;
	}
}

rule("Walk To Target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Event Player.Pathing_To_Biotic_Field != True;
	}

	actions
	{
		Event Player.Walk_To_Position = Position Of(First Of(Event Player.Target_Order)) + Vector(0, 1.550, 0);
		Event Player.Walk_Max = 20;
		Event Player.Walk_Min = 0;
		Event Player.Node_DePrioritze = Empty Array;
		Event Player.Vist_Count = Empty Array;
		Event Player.Known_Nodes = Empty Array;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Walk To Objective")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) != True;
		Array Contains(Is Objective Complete(0) ? Global.ObjectiveB_Nodes : Global.ObjectiveA_Nodes, Event Player.Walk_To_Position)
			!= True;
		disabled Is On Objective(Event Player) != True;
		Normalized Health(Event Player) >= 0.800;
		(Is Team On Offense(Team Of(Event Player)) ? Is Game In Progress : Is Alive(Event Player)) == True;
	}

	actions
	{
		Event Player.Pathing_To_Biotic_Field = False;
		Event Player.Walk_To_Position = Is Objective Complete(0) ? Random Value In Array(Global.ObjectiveB_Nodes) : Random Value In Array(
			Global.ObjectiveA_Nodes);
		Event Player.Walk_Max = 4;
		Event Player.Walk_Min = 2;
		Event Player.Node_DePrioritze = Empty Array;
		Event Player.Vist_Count = Empty Array;
		Event Player.Known_Nodes = Empty Array;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Walk To Healthkit")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Normalized Health(Event Player) < 0.800;
		Event Player.Walk_To_Position != First Of(Sorted Array(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large),
			Distance Between(Event Player, Current Array Element) - (Health(Event Player) <= Max Health(Event Player)
			- 200 && Array Contains(Global.Healthkits_Large, Current Array Element) ? 0 : 10)));
		Entity Exists(First Of(Event Player.Target_Order)) != True;
	}

	actions
	{
		Event Player.Walk_To_Position = First Of(Sorted Array(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large),
			Distance Between(Event Player, Current Array Element) - (Health(Event Player) <= Max Health(Event Player)
			- 200 && Array Contains(Global.Healthkits_Large, Current Array Element) ? 0 : 10)));
		Event Player.Walk_Max = 1;
		Event Player.Walk_Min = 1;
		Event Player.Node_DePrioritze = Empty Array;
		Event Player.Vist_Count = Empty Array;
		Event Player.Known_Nodes = Empty Array;
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("----------------------------------- Pathfinder ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- Nodes ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Nodes Setup")
{
	event
	{
		Subroutine;
		Node_Setup;
	}

	actions
	{
		If(Current Map == Map(Hanamura) || Current Map == Map(Hanamura Winter));
			Call Subroutine(Hanamura);
			Abort;
		End;
		If(Current Map == Map(Horizon Lunar Colony));
			Call Subroutine(Horizon);
			Abort;
		End;
		If(Current Map == Map(Paris));
			Call Subroutine(Paris);
			Abort;
		End;
		If(Current Map == Map(Temple of Anubis));
			Call Subroutine(Temple_of_Anubus);
			Abort;
		End;
		If(Current Map == Map(Volskaya Industries));
			Call Subroutine(Volskaya);
			Abort;
		End;
	}
}

rule("Hanamura")
{
	event
	{
		Subroutine;
		Hanamura;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(23.326, 1.550, -4.398), Vector(22.802, 1.572, -21.227), Vector(20.379, 8.008, -21.078), Vector(
			12.076, 8.321, -19.733), Vector(7.436, 8.550, -22.362), Vector(-4.010, 8.550, -20.266), Vector(-10.098, 8.550, -22.046),
			Vector(-10.159, 8.630, -27.940), Vector(-10.448, 2.550, -22.072), Vector(-3.706, 2.550, -22.648), Vector(-4.502, 2.550,
			-18.663), Vector(2.903, 1.550, -18.511), Vector(12.677, 1.550, -24.341), Vector(13.540, 1.550, -18.551), Vector(17.102, 0.594,
			-4.198), Vector(13.787, 0.569, -10.678), Vector(6.207, 0.651, -7.531), Vector(10.580, 0.550, 0.575), Vector(8.623, 1.525,
			0.772), Vector(4.805, 1.550, 0.009), Vector(2.516, 2.463, 0.083), Vector(-4.158, 2.550, -8.863), Vector(-11.794, 2.550, 0.321),
			Vector(-19.305, 0.292, -18.511), Vector(-18.804, 0.367, -21.806), Vector(-4.273, 5.550, 18.894), Vector(-3.979, 5.522, 22.171),
			Vector(-14.486, 5.508, 21.405), Vector(-14.642, 5.461, 11.854), Vector(10.242, 5.550, 22.690), Vector(10.454, 5.550, 17.067),
			Vector(12.812, 5.550, 22.339), Vector(14.063, 5.615, 17.081), Vector(14.846, 5.550, 13.098), Vector(8.320, 5.573, 7.338),
			Vector(16.042, 5.576, 7.381), Vector(20.338, 5.710, 8.857), Vector(24.107, 1.550, 3.920), Vector(8.611, 0.480, 32.047), Vector(
			-44.941, 2.550, -113.131), Vector(-23.513, 2.550, -111.756), Vector(-13.984, 2.550, -101.881), Vector(-33.613, 2.550, -81.852),
			Vector(-43.687, 2.550, -92.405), Vector(-28.019, 2.550, -87.786), Vector(-22.425, 2.550, -89.371), Vector(-15.520, 2.550,
			-96.790), Vector(0.972, 8.560, -90.118), Vector(7.405, 8.550, -83.355), Vector(7.679, 8.560, -88.683), Vector(30.693, 4.550,
			-73.233), Vector(30.324, 4.550, -79.620), Vector(36.638, 4.550, -74.064), Vector(39.791, 4.550, -79.534), Vector(36.336, 4.550,
			-84.995), Vector(13.544, 5.550, -78.057), Vector(7.500, 5.550, -76.473), Vector(15.270, 5.550, -73.499), Vector(2.112, 6.560,
			-71.530), Vector(-2.505, 5.550, -66.774), Vector(0.288, 5.550, -58.229), Vector(-3.119, 5.550, -60.522), Vector(-4.678, 4.708,
			-58.827), Vector(-10.212, 4.550, -53.249), Vector(-20.232, 2.550, -63.176), Vector(-17.562, 2.550, -65.719), Vector(-7.489,
			-3.550, -64.417), Vector(-13.447, -3.550, -69.901), Vector(-3.520, -3.550, -71.075), Vector(2.337, -3.550, -77.819), Vector(
			11.152, -3.550, -85.529), Vector(14.924, -3.450, -86.900), Vector(16.193, -3.450, -90.854), Vector(9.584, 0.550, -73.161),
			Vector(5.617, 0.550, -68.609), Vector(0.845, 0.550, -66.721), Vector(1.980, 0.919, -72.070), Vector(-0.694, 1.412, -74.516),
			Vector(-2.950, 0.722, -77.181), Vector(-5.583, 0.556, -75.642), Vector(-1.978, 0.625, -80.740), Vector(-9.561, 0.625, -74.101),
			Vector(-0.194, 0.625, -83.874), Vector(2.613, 0.625, -93.657), Vector(-2.068, 0.625, -90.092), Vector(-10.959, 0.625, -84.734),
			Vector(8.078, 0.025, -65.919), Vector(22.556, -0.366, -64.746), Vector(25.035, -0.326, -70.248), Vector(35.254, -0.334,
			-61.302), Vector(37.784, -0.422, -61.434), Vector(37.025, -0.293, -38.859), Vector(25.313, -0.101, -39.620), Vector(30.891,
			3.905, -63.560), Vector(30.003, 4.426, -68.520), Vector(30.840, 3.297, -53.564), Vector(30.830, 3.390, -42.570), Vector(30.717,
			3.550, -32.612), Vector(38.142, 3.550, -34.735), Vector(18.872, 1.550, -27.956), Vector(12.711, 1.550, -26.516), Vector(12.558,
			-0.201, -39.817), Vector(21.491, -0.121, -48.008), Vector(12.915, 0.326, -49.034), Vector(6.676, 0.080, -49.253), Vector(1.875,
			-0.325, -45.146), Vector(12.865, -0.178, -61.159), Vector(-8.050, 2.550, -32.381), Vector(-4.343, 2.550, -29.667), Vector(
			5.460, 1.981, -29.559), Vector(11.122, 1.550, -29.824), Vector(-10.145, 2.610, -27.910), Vector(101.717, 3.550, 7.038), Vector(
			103.830, 2.647, 7.075), Vector(108.438, 2.550, 3), Vector(106.256, 2.550, -0.829), Vector(82.457, -1.450, -0.031), Vector(
			78.571, -0.739, 0.167), Vector(72.788, -0.420, -0.517), Vector(82.051, -1.450, 9.591), Vector(81.864, -1.450, 18.213), Vector(
			76.415, -0.451, 23.038), Vector(94.332, 3.550, 7.176), Vector(90.657, 3.550, 0.558), Vector(87.567, 3.550, 6.918), Vector(
			73.874, -0.452, 25.297), Vector(66.355, -0.455, 26.897), Vector(63.156, -0.511, 19.953), Vector(62.007, -0.214, 1.812), Vector(
			68.239, -0.345, 5.141), Vector(60.646, -0.447, 12.381), Vector(65.826, -0.321, -6.317), Vector(44.272, 1.419, -11.591), Vector(
			43.744, 2.322, -8.778), Vector(44.928, 2.549, -5.859), Vector(48.171, 1.603, -5.974), Vector(49.877, 0.738, -5.933), Vector(
			54.116, 0.550, -5.108), Vector(53.974, 0.550, 3.989), Vector(53.768, 0.026, 9.502), Vector(49.439, 0.467, 13.473), Vector(
			49.236, 0.608, 6.765), Vector(43.397, 1.424, 10.119), Vector(41.121, 2.550, 1.999), Vector(36.364, 1.747, 1.946), Vector(
			36.712, 1.716, 9.701), Vector(40.608, 1.795, 18.869), Vector(40.690, 1.865, 32.050), Vector(47.836, 7.550, 17.403), Vector(
			48.101, 7.550, 1.772), Vector(42.910, 7.550, 1.794), Vector(40.179, 7.550, -2.464), Vector(40.230, 7.550, -6.177), Vector(
			42.999, 7.550, -3.567), Vector(57.528, 7.550, -12.180), Vector(57.784, 7.550, -14.903), Vector(61.827, 7.550, -12.727), Vector(
			61.801, 7.550, -6.126), Vector(45.933, 7.550, -10.997), Vector(45.846, 7.550, 8.578), Vector(41.647, 7.550, 15.876), Vector(
			58.109, 3.550, -25.378), Vector(38.746, 1.572, -23.554), Vector(38.976, 1.501, -14.289), Vector(38.984, 1.499, -11.432),
			Vector(33.204, 1.649, -12.868), Vector(31.508, 1.640, -2.649), Vector(35.075, 1.755, 5.929), Vector(1.910, 0.550, 17.312),
			Vector(14.321, 0.550, 18.889), Vector(-13.861, 0.550, 18.621), Vector(6.323, 1.551, 8.883), Vector(13.904, 1.551, 8.651),
			Vector(13.843, 0.896, 12.593), Vector(-34.591, 2.550, -101.898), Vector(20.761, 5.550, -82.739), Vector(24.715, 5.073,
			-80.266), Vector(37.793, -0.303, -50.779), Vector(-2.594, 2.550, -36.363), Vector(5.115, 5.532, 28.542), Vector(3.215, 6.188,
			-66.369), Vector(8.019, 5.868, -71.019), Vector(-27.203, 2.550, -61.468));
		Global.Healthkits = Array(Vector(25.659, 1.572, -23.521), Vector(2.024, 2.550, -22.003), Vector(-14.703, 5.429, 12.849), Vector(
			7.563, 5.550, 16.500), Vector(7.940, 0.389, 35.713), Vector(29.928, 4.550, -89.595), Vector(-13.098, 2.550, -61.352), Vector(
			-0.526, -3.550, -74.065), Vector(14.811, -3.450, -96.204), Vector(-0.999, 0.550, -97.554), Vector(29.831, -0.328, -65.271),
			Vector(38.656, -0.335, -38.688), Vector(12.915, 0.326, -49.037), Vector(0.574, 2.550, -36.499), Vector(45.192, 2.550, -0.798),
			Vector(40.854, 1.857, 34.598), Vector(52.121, 3.550, -27.883));
		Global.ObjectiveA_Nodes = Array(Vector(1.229, 2.551, 8.770), Vector(1.173, 2.551, 5.163), Vector(1.210, 2.551, 1.202), Vector(
			1.210, 2.551, -2.319), Vector(1.210, 2.551, -6.102), Vector(-1.536, 2.551, -6.153), Vector(-1.561, 2.551, -2.367), Vector(
			-1.425, 2.551, 1.315), Vector(-1.452, 2.551, 5.101), Vector(-3.732, 2.550, 5.157), Vector(-4.056, 2.550, -2.341), Vector(
			-4.014, 2.550, -6.299), Vector(-6.608, 2.550, -6.298), Vector(-6.563, 2.550, -2.249), Vector(-6.448, 2.550, 0.134), Vector(
			-6.631, 2.550, 5.149), Vector(-9.541, 2.550, -6.500), Vector(-9.618, 2.550, -2.539), Vector(-9.676, 2.550, 0.098), Vector(
			-9.848, 2.550, 5.172), Vector(-9.981, 2.550, 9.133), Vector(-9.861, 2.550, 2.538), Vector(-4.328, 2.550, 2.651), Vector(0.072,
			2.550, 2.702));
		Global.ObjectiveB_Nodes = Array(Vector(-21.182, 0.625, -86.458), Vector(-19.057, 0.625, -88.496), Vector(-17.015, 0.800, -90.692),
			Vector(-15.043, 0.675, -92.204), Vector(-12.440, 0.625, -94.445), Vector(-10.310, 0.625, -92.211), Vector(-12.696, 0.625,
			-89.867), Vector(-14.521, 0.625, -88.070), Vector(-16.669, 0.625, -85.947), Vector(-18.729, 0.625, -83.919), Vector(-16.137,
			0.625, -81.284), Vector(-14.068, 0.625, -83.370), Vector(-11.895, 0.625, -85.464), Vector(-10.028, 0.625, -87.302), Vector(
			-7.724, 0.625, -89.687), Vector(-5.492, 0.625, -87.415), Vector(-7.864, 0.625, -85.083), Vector(-9.666, 0.625, -83.313),
			Vector(-11.855, 0.625, -81.160), Vector(-14.026, 0.625, -79.022), Vector(-11.996, 0.625, -76.922), Vector(-9.783, 0.625,
			-79.062), Vector(-7.607, 0.625, -81.206), Vector(-5.799, 0.625, -82.956), Vector(-3.323, 0.625, -85.344));
		Global.Chokepoint = Array(Vector(1.354, 1.320, -72.613), Vector(12.896, 1.550, -23.731), Vector(29.407, 1.810, -3.931));
		Global.Staircase_Top = Array(Vector(1.485, 8.560, -94.928), Vector(12.239, 8.550, -92.720), Vector(12.940, 1.550, -30.217), Vector(
			-8.359, 2.550, -37.229), Vector(4.626, 8.550, -25.707), Vector(26.404, 7.550, -17.067), Vector(22.222, 3.548, 15.676), Vector(
			17.911, 5.549, 13.438), Vector(21.795, 3.550, 22.088), Vector(-3.320, 5.550, 26.877), Vector(-4.120, 5.550, 13.560), Vector(
			-14.209, 2.550, 4.129), Vector(-9.527, 2.550, -17.871), Vector(-12.611, 2.550, -30.736), Vector(27.872, 3.550, -29.514),
			Vector(-12.602, 4.550, -55.338), Vector(-27.662, 2.550, -53.900), Vector(-25.911, 2.550, -69.793), Vector(-23.188, 2.550,
			-83.562), Vector(-9.565, 2.550, -97.634), Vector(6.170, 0.550, -91.992), Vector(16.857, 0.550, -78.027), Vector(26.588, 3.465,
			-59.778), Vector(36.688, 7.550, 19.395), Vector(48.092, 7.550, -14.500), Vector(46.424, 3.550, -26.669), Vector(58.032, 3.550,
			-22.211), Vector(76.081, 3.550, 6.813), Vector(103.054, 2.550, -0.079), Vector(-14.163, 2.551, -2.498));
		Global.Staircase_Bottom = Array(Vector(-8.654, 2.550, -105.336), Vector(18.346, 5.550, -85.931), Vector(13.125, -0.392, -35.474),
			Vector(-4.662, -0.450, -44.151), Vector(-9.166, 2.550, -25.514), Vector(26.384, 1.569, -21.243), Vector(22.346, 1.550, 9.923),
			Vector(18.199, 3.548, 19.492), Vector(15.095, 0.567, 27.782), Vector(-4.576, 0.553, 31.248), Vector(-3.964, 2.550, 6.639),
			Vector(-13.750, 0.550, 10.165), Vector(-15.202, 0.371, -17.774), Vector(-17.348, 0.308, -30.299), Vector(21.814, 1.550,
			-29.540), Vector(-16.068, 2.550, -59.050), Vector(-11.031, -3.450, -60.910), Vector(-21.294, 0.625, -74.187), Vector(-19.641,
			0.625, -79.817), Vector(-5.488, 0.625, -93.446), Vector(5.835, -3.550, -82.520), Vector(17.094, -3.450, -88.167), Vector(
			25.485, -0.198, -48.878), Vector(37.229, 2.055, 32), Vector(48.122, 3.550, -23.712), Vector(41.607, 1.587, -26.914), Vector(
			57.735, 0.463, -13.378), Vector(76.038, -0.367, 17.636), Vector(92.502, -1.450, 0.128), Vector(-14.578, 0.509, -7.653));
		Global.Healthkits_Small = Array();
		Global.Healthkits_Large = Array();
		Global.Staircase_Middle = Array(0, 0, 0, Vector(-8.679, 0.550, -44.166), 0, Vector(35.414, 4.550, -19.065), 0, 0, Vector(21.509,
			2.550, 26.687), Vector(-12.062, 2.551, 29.122), 0, 0, 0, 0, 0, 0, Vector(-22.568, 0.550, -49.306), 0, 0, 0, Vector(1.335,
			-1.381, -87.488), Vector(21.901, -1.450, -82.408), 0, Vector(31.652, 4.550, 30.354), 0, 0, 0, 0, 0, 0);
	}
}

rule("Horizon")
{
	event
	{
		Subroutine;
		Horizon;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(-27.416, 9.550, 11.435), Vector(-0.100, 9.550, 4.617), Vector(-7.170, 9.550, -9.529), Vector(
			-14.581, 9.550, -15.637), Vector(-15.857, 9.550, -26.488), Vector(4.976, 14.573, -23.815), Vector(7.042, 14.573, -30.751),
			Vector(10.340, 10.550, -1.775), Vector(1.970, 9.709, 0.845), Vector(5.918, 10.550, -0.720), Vector(4.788, 10.573, -12.787),
			Vector(-1.953, 10.199, -8.784), Vector(11.757, 10.550, -8.720), Vector(19.299, 10.550, 3.716), Vector(31.798, 10.550, -3.219),
			Vector(29.472, 10.550, -7.158), Vector(20.318, 10.550, -2.638), Vector(16.082, 10.550, -11.573), Vector(16.735, 10.550,
			-0.454), Vector(23.669, 10.550, 1.283), Vector(21.746, 14.560, 2.395), Vector(19.388, 14.550, -34.935), Vector(25.620, 14.550,
			-44.089), Vector(15.941, 14.550, -44.511), Vector(8.381, 10.550, -32.560), Vector(4.203, 10.550, -25.457), Vector(16.609,
			10.550, -27.218), Vector(12.130, 10.550, -18.763), Vector(40.929, 14.550, -47.438), Vector(44.645, 14.550, -44.961), Vector(
			42.932, 13.872, -41.957), Vector(44.334, 13.550, -37.203), Vector(46.449, 13.630, -34.344), Vector(51.945, 13.550, -34.786),
			Vector(49.181, 13.573, -29.746), Vector(39.411, 13.550, -36.377), Vector(33.098, 13.550, -26.020), Vector(25.763, 13.893,
			-30.813), Vector(27.314, 8.550, -24.657), Vector(29.352, 8.550, -29.056), Vector(39.543, 8.550, -22.023), Vector(28, 8.550,
			-36.684), Vector(28.155, 8.550, -43.395), Vector(27.992, 8.550, -13.659), Vector(21.213, 9.468, -13.812), Vector(18.729,
			10.404, -12.364), Vector(39.067, 8.550, -13.452), Vector(47.677, 8.550, -16.572), Vector(51.232, 8.550, -14.584), Vector(
			54.486, 8.550, -12.242), Vector(56.807, 8.550, -23.028), Vector(60.130, 8.550, -21.062), Vector(55.119, 7.688, -27.992),
			Vector(58.291, 7.550, -33.512), Vector(48.866, 7.550, -39.633), Vector(37.271, 8.573, -52.009), Vector(34.885, 8.550, -45.072),
			Vector(40.399, 7.955, -43.176), Vector(50.457, 7.894, -44.832), Vector(47.379, 8.573, -52.526), Vector(57.547, 8.550, -46.274),
			Vector(64.108, 8.548, -42.002), Vector(66.429, 8.548, -45.288), Vector(58.461, 8.550, -55.792), Vector(49.036, 8.987, -58.546),
			Vector(41.714, 9.560, -64.718), Vector(38.537, 9.578, -68.146), Vector(39.829, 15.551, -57.861), Vector(43.419, 15.550,
			-62.208), Vector(48.339, 15.550, -59.055), Vector(43.050, 15.550, -77.565), Vector(52.750, 15.550, -76.880), Vector(56.158,
			15.550, -74.222), Vector(50.665, 15.550, -74.356), Vector(53.158, 15.577, -79.095), Vector(66.561, 15.549, -76.361), Vector(
			71.375, 15.550, -68.345), Vector(64.344, 15.551, -61.241), Vector(64.619, 15.551, -67.729), Vector(71.203, 8.551, -46.265),
			Vector(76.291, 8.550, -43.657), Vector(81.479, 7.997, -40.294), Vector(92.125, 14.079, -67.425), Vector(88.367, 14.725,
			-71.735), Vector(83.015, 15.550, -72.555), Vector(67.774, 8.550, -50.607), Vector(65.247, 7.991, -62.930), Vector(59.419,
			7.543, -71.189), Vector(66.571, 9.550, -85.520), Vector(61.315, 10.418, -86.532), Vector(74.573, 8.550, -71.861), Vector(
			79.695, 8.550, -62), Vector(80.566, 8.522, -74.102), Vector(54.563, 7.931, -63.512), Vector(40.343, 9.550, -86.533), Vector(
			42.325, 9.550, -90.665), Vector(46.524, 10.392, -90.353), Vector(41.727, 9.550, -101.793), Vector(50.729, 9.550, -100.972),
			Vector(58.682, 9.550, -99.946), Vector(58.491, 10.378, -97.490), Vector(50.678, 10.451, -97.681), Vector(53.567, 11.024,
			-79.766), Vector(60.487, 10.550, -92.918), Vector(70.557, 10.842, -92.804), Vector(66.998, 10.550, -96.786), Vector(61.783,
			10.550, -92.753), Vector(32.789, 9.550, -85.840), Vector(30.771, 9.550, -100.633), Vector(27.046, 9.550, -94.068), Vector(
			15.953, 8.477, -86.120), Vector(4.705, 8.171, -82.659), Vector(2.260, 7.550, -90.033), Vector(-8.207, 7.550, -88.812), Vector(
			-12.908, 7.550, -96.011), Vector(-5.666, 7.550, -99.081), Vector(11.191, 7.449, -96.003), Vector(18.638, 7.550, -104.389),
			Vector(-4.062, 11.550, -121.655), Vector(-6.253, 10.781, -125.786), Vector(-18.784, 6.090, -138.869), Vector(-17.468, 6.050,
			-143.060), Vector(-18.129, 6.217, -148.333), Vector(-22.509, 6.050, -145.156), Vector(-22.738, 6.050, -140.563), Vector(
			-22.203, 6.050, -133.995), Vector(-30.459, 6.050, -132.309), Vector(-33.854, 6.050, -138.049), Vector(-26.159, 6.550,
			-154.141), Vector(-33.410, 6.550, -150.422), Vector(-35.814, 6.550, -156.349), Vector(-47.511, 6.623, -150.970), Vector(
			-43.046, 6.550, -140.485), Vector(-49.173, 6.550, -136.375), Vector(-47.589, 6.028, -131.453), Vector(-41.769, 6.050,
			-134.062), Vector(-39.472, 6.050, -127.583), Vector(-39.719, 11.550, -127.133), Vector(-35.175, 11.550, -118.507), Vector(
			-35.886, 6.090, -126.625), Vector(-37.383, 6.050, -120.451), Vector(-42.696, 6.050, -117.668), Vector(-36.096, 5.958,
			-117.130), Vector(-35.285, 4.986, -115.354), Vector(-30.479, 4.550, -114.447), Vector(-34.684, 4.550, -124.077), Vector(
			-21.229, 4.550, -131.051), Vector(-18.354, 5.390, -137.560), Vector(-17.057, 4.548, -134.694), Vector(-14.100, 4.092,
			-131.918), Vector(-8.383, 3.546, -133.595), Vector(-14.727, 4.300, -121.911), Vector(-4.357, 4.550, -118.581), Vector(-4.474,
			3.567, -128.716), Vector(-11.381, 4.550, -118.748), Vector(-19.624, 4.513, -115.519), Vector(-24.245, 4.485, -113.598), Vector(
			-17.970, 4.550, -111.511), Vector(-25.728, 6.050, -98.755), Vector(-28.302, 5.158, -103.466), Vector(-30.057, 4.550, -107.326),
			Vector(-32.134, 6.130, -96.315), Vector(-36.878, 6.050, -99.875), Vector(-39.950, 6.050, -108.674), Vector(-48.896, 6.233,
			-167.993), Vector(12.214, 14.550, -9.129), Vector(78.524, 15.550, -72.096), Vector(26.088, 9.550, -84.856), Vector(33.437,
			15.537, -97.321), Vector(32.887, 15.537, -89.298), Vector(-21.546, 10.551, -142.513));
		Global.Healthkits = Array(Vector(-5.660, 3.518, -132.685), Vector(-34.994, 6.550, -142.106), Vector(-36.689, 6.050, -108.801),
			Vector(-20.733, 6.050, -103.183), Vector(15.776, 7.550, -110.317), Vector(15.296, 8.550, -78.830), Vector(33.999, 9.550,
			-103.051), Vector(37.044, 9.550, -74.276), Vector(73.574, 8.550, -60.844), Vector(87.286, 13.710, -59.145), Vector(17.783,
			10.550, -48.335), Vector(35.868, 8.550, -34.060), Vector(61.598, 8.550, -22.974));
		Global.ObjectiveA_Nodes = Array(Vector(49.346, 10.551, -95.103), Vector(51.597, 10.545, -94.944), Vector(54.162, 10.541, -94.772),
			Vector(56.654, 10.530, -94.624), Vector(58.985, 10.547, -94.713), Vector(58.870, 10.549, -91.409), Vector(56.502, 10.462,
			-91.449), Vector(54.065, 10.425, -91.531), Vector(51.399, 10.472, -91.711), Vector(49.225, 10.550, -92.002), Vector(49.080,
			10.550, -88.804), Vector(51.297, 10.472, -88.729), Vector(54.036, 10.409, -88.665), Vector(56.366, 10.462, -88.604), Vector(
			58.802, 10.530, -88.627), Vector(58.707, 10.550, -85.449), Vector(56.242, 10.452, -85.535), Vector(53.868, 10.408, -85.616),
			Vector(51.220, 10.456, -85.706), Vector(48.942, 10.550, -85.784), Vector(48.884, 10.550, -83.244), Vector(51.127, 10.517,
			-83.169), Vector(53.738, 10.461, -83.086), Vector(56.216, 10.506, -83.002), Vector(58.610, 10.549, -83.195), Vector(56.073,
			10.550, -80.563), Vector(53.647, 10.550, -80.643), Vector(50.952, 10.550, -80.784));
		Global.ObjectiveB_Nodes = Array(Vector(-32.927, 4.300, -122.951), Vector(-30.697, 4.438, -124.027), Vector(-28.576, 4.328,
			-125.117), Vector(-26.432, 4.303, -126.215), Vector(-24.454, 4.301, -127.228), Vector(-22.474, 4.301, -128.189), Vector(
			-20.560, 4.261, -129.143), Vector(-19.199, 4.175, -126.675), Vector(-21.026, 4.270, -125.589), Vector(-23.104, 4.298,
			-124.645), Vector(-25.030, 4.389, -123.643), Vector(-27.272, 4.324, -122.538), Vector(-29.216, 4.314, -121.280), Vector(
			-31.259, 4.299, -119.980), Vector(-29.696, 4.289, -117.128), Vector(-27.618, 4.153, -118.258), Vector(-25.454, 4.172,
			-119.350), Vector(-23.442, 4.289, -120.596), Vector(-21.356, 4.279, -121.855), Vector(-19.573, 4.219, -122.778), Vector(
			-17.654, 4.189, -123.826), Vector(-16.043, 4.300, -120.845), Vector(-17.808, 4.300, -119.600), Vector(-19.548, 4.300,
			-118.652), Vector(-21.602, 4.302, -117.506), Vector(-23.773, 4.302, -116.324), Vector(-25.970, 4.294, -115.239), Vector(
			-28.108, 4.300, -114.078));
		Global.Chokepoint = Array(Vector(52.737, 8.550, -50.109), Vector(15.496, 7.550, -95.478), Vector(-14.188, 4.570, -107.894));
		Global.Staircase_Top = Array(Vector(17.670, 14.550, 3.458), Vector(1.876, 14.550, -19.829), Vector(18.404, 10.550, -46.099),
			Vector(11.054, 14.550, -40.380), Vector(37.976, 13.550, -32.391), Vector(32.320, 12.034, -20.587), Vector(33.552, 13.550,
			-22.011), Vector(33.105, 15.550, -54.836), Vector(42.592, 9.560, -77.622), Vector(66.252, 9.550, -80.093), Vector(78.286,
			15.550, -75.626), Vector(92.303, 13.427, -59.540), Vector(68.506, 8.550, -68.383), Vector(72.773, 9.550, -82.055), Vector(
			41.558, 15.550, -80.731), Vector(2.387, 7.550, -101.752), Vector(-9.376, 7.550, -98.669), Vector(-11.541, 7.515, -98.870),
			Vector(-15.724, 7.550, -93.901), Vector(25.117, 9.550, -89.127), Vector(22.394, 9.550, -98.417), Vector(66.031, 10.550,
			-100.729), Vector(-46.304, 11.573, -125.169), Vector(-13.585, 10.550, -140.475), Vector(5.767, 10.550, -112.094), Vector(
			-5.975, 11.550, -118.321), Vector(20.670, 10.550, -33.250));
		Global.Staircase_Bottom = Array(Vector(8.304, 10.550, 0.946), Vector(-11.381, 9.549, -28.002), Vector(22.969, 8.548, -42.901),
			Vector(13.462, 10.560, -43.255), Vector(42.709, 8.610, -22.318), Vector(28.604, 8.550, -18.659), Vector(32.323, 12.110,
			-20.487), Vector(33.032, 9.550, -67.406), Vector(48.916, 7.549, -77.425), Vector(66.088, 7.545, -74.162), Vector(72.079, 9.550,
			-86.233), Vector(86.402, 8.115, -43.997), Vector(65.825, 7.555, -68.458), Vector(72.798, 8.550, -77.813), Vector(27.988, 9.550,
			-81.580), Vector(-2.541, 4.550, -110.778), Vector(-14.988, 4.570, -108.138), Vector(-14.988, 4.570, -108.138), Vector(-18.942,
			6.112, -96.049), Vector(19.425, 7.639, -89.584), Vector(16.930, 7.553, -99.053), Vector(62.142, 9.549, -101.051), Vector(
			-46.835, 6.050, -128.644), Vector(-15.348, 6.217, -144.213), Vector(11.964, 7.550, -108.366), Vector(-4.161, 10.550, -114.576),
			Vector(23.435, 8.550, -37.471));
		Global.Healthkits_Small = Array(Vector(-5.660, 3.518, -132.685), Vector(-34.994, 6.550, -142.106), Vector(-20.733, 6.050,
			-103.183), Vector(15.776, 7.550, -110.317), Vector(33.999, 9.550, -103.051), Vector(37.044, 9.550, -74.276), Vector(17.783,
			10.550, -48.335));
		Global.Healthkits_Large = Array(Vector(-36.689, 6.050, -108.801), Vector(15.296, 8.550, -78.830), Vector(73.574, 8.550, -60.844),
			Vector(87.286, 13.710, -59.145), Vector(35.868, 8.550, -34.060), Vector(61.598, 8.550, -22.974));
		Global.Staircase_Middle = Array(Vector(11.475, 12.550, 6.764), Vector(-4.713, 12.550, -31.389), 0, Vector(6.399, 12.550, -45.494),
			Vector(44.933, 10.550, -27.857), Vector(30.907, 10.070, -21.456), 0, Vector(27.490, 13.550, -58.165), 0, 0, Vector(78.570,
			11.550, -85.181), Vector(90.856, 11.210, -51.428), 0, 0, 0, Vector(0.249, 6.550, -105.835), 0, 0, 0, 0, 0, 0, Vector(-55.333,
			8.550, -124.210), Vector(-6.260, 8.550, -146.774), 0, 0, 0);
	}
}

rule("Paris")
{
	event
	{
		Subroutine;
		Paris;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(24.308, 13.550, -86.868), Vector(23.233, 12.592, -85.093), Vector(22.769, 12.548, -79.475),
			Vector(29.892, 12.548, -76.696), Vector(34.438, 13.550, -81.461), Vector(33.281, 12.658, -79.778), Vector(30.198, 13.550,
			-85.401), Vector(16.810, 11.581, -61.484), Vector(21.483, 11.873, -62.732), Vector(15.809, 11.809, -65.854), Vector(17.494,
			12.550, -73.753), Vector(11.644, 12.550, -80.370), Vector(5.531, 11.574, -70.299), Vector(14.642, 11.474, -56.956), Vector(
			7.186, 11.572, -58.621), Vector(0.136, 11.545, -50.437), Vector(-9.380, 15.550, -40.527), Vector(-15.859, 15.550, -34.054),
			Vector(-16.424, 15.550, -47.422), Vector(-4.767, 11.474, -54.710), Vector(-2.243, 11.473, -57.638), Vector(-8.907, 11.550,
			-65.156), Vector(-4.641, 11.633, -68.622), Vector(8.162, 12.409, -74.641), Vector(-4.768, 11.633, -60.858), Vector(-12.900,
			11.550, -60.118), Vector(-18.799, 11.633, -59.620), Vector(-15.347, 17.550, -56.451), Vector(-13.034, 11.474, -51.996), Vector(
			-19.818, 11.475, -48.423), Vector(-25.964, 11.475, -39.395), Vector(-24.867, 11.474, -34.675), Vector(-31.389, 11.593,
			-30.297), Vector(-26.480, 11.474, -25.889), Vector(-0.394, 12.938, -27.169), Vector(-23.582, 11.633, -22.876), Vector(-17.373,
			11.550, -17.042), Vector(-19.134, 11.633, -14.117), Vector(-52.490, 13.603, -19.204), Vector(-39.745, 15.540, -17.723), Vector(
			-37.194, 15.542, -15.172), Vector(-33.074, 15.540, -10.875), Vector(-33.070, 15.541, -6.737), Vector(-34.966, 15.541, -5.970),
			Vector(-42.078, 11.474, 3.258), Vector(-39.901, 15.542, -13.152), Vector(-47.741, 15.542, -12.277), Vector(-52.292, 16.540,
			-8.120), Vector(-56.816, 16.101, -3.688), Vector(-67.860, 15.540, 1.828), Vector(-46.318, 11.574, 5.506), Vector(-47.927,
			12.568, 7.071), Vector(-49.518, 13.486, 8.559), Vector(-42.393, 13.540, 16.341), Vector(-39.757, 12.676, 13.648), Vector(
			-40.989, 12.471, 13.282), Vector(-39.034, 11.574, 8.542), Vector(-37.390, 11.474, 3.600), Vector(-29.443, 11.474, -2.861),
			Vector(-29.312, 11.474, -12.457), Vector(-21, 11.572, -9.315), Vector(-38.891, 17.489, 17.682), Vector(-42.334, 17.540,
			25.215), Vector(-47.311, 17.620, 25.466), Vector(-47.192, 17.546, 20.869), Vector(-50.281, 17.546, 23.958), Vector(-34.258,
			13.541, 32.160), Vector(-47.296, 13.620, 25.579), Vector(-41.280, 13.542, 28.620), Vector(-24.897, 11.540, 34.357), Vector(
			-29.128, 11.540, 19.524), Vector(-29.882, 11.574, 18.698), Vector(-22.312, 11.603, 20.280), Vector(-28.698, 11.603, 26.504),
			Vector(-17.599, 11.540, 25.202), Vector(-21.853, 11.540, 31.282), Vector(-50.795, 13.540, 20.952), Vector(-68.318, 13.526,
			-17.811), Vector(-58.050, 13.505, -21.887), Vector(-77.914, 11.405, -35.128), Vector(-65.271, 11.554, -42.475), Vector(-75.853,
			13.539, -15.291), Vector(-81.719, 11.559, -26.639), Vector(-88.970, 11.434, -28.746), Vector(-95.691, 12.324, -38.385), Vector(
			-88.967, 12.464, -45.159), Vector(-83.948, 11.530, -45.098), Vector(-72.240, 11.554, -51.136), Vector(-68.157, 12.405,
			-55.257), Vector(-78.327, 11.405, -49.955), Vector(-80.091, 12.222, -53.616), Vector(-80.903, 13.125, -55.273), Vector(-86.185,
			13.550, -64.647), Vector(-100.342, 13.550, -57.923), Vector(-98.006, 13.550, -53.313), Vector(-108.955, 13.550, -47.788),
			Vector(-105.662, 12.886, -42.170), Vector(-103.850, 12.321, -36.444), Vector(-110.349, 11.550, -62.061), Vector(-116.872,
			11.550, -61.056), Vector(-121.681, 11.340, -54.212), Vector(-117.191, 11.400, -45.109), Vector(-113.979, 12.325, -43.588),
			Vector(-118.589, 12.389, -41.081), Vector(-113.513, 12.565, -32.895), Vector(-108.806, 12.328, -34.822), Vector(-108.825,
			11.550, -68.974), Vector(-115.904, 11.550, -70.885), Vector(-109.761, 12.544, -76.062), Vector(-108.021, 13.512, -76.902),
			Vector(-105.438, 13.550, -78.296), Vector(-106.996, 12.471, -70.135), Vector(-105.413, 13.393, -71.076), Vector(-102.627,
			13.550, -72.528), Vector(-120.155, 14.550, -86.092), Vector(-110.381, 14.550, -82.038), Vector(-112.749, 14.550, -87.297),
			Vector(-110.830, 13.700, -88.072), Vector(-108.383, 13.708, -83.146), Vector(-105.904, 13.550, -87.414), Vector(-118.469,
			14.550, -96.360), Vector(-117.289, 14.550, -91.677), Vector(-100.168, 16.550, -92.241), Vector(-104.779, 16.550, -89.910),
			Vector(-95.170, 16.550, -94.644), Vector(-91.974, 14.550, -109.413), Vector(-87.093, 14.550, -104.819), Vector(-76.290, 16.550,
			-92.112), Vector(-76.407, 16.550, -84.858), Vector(-69.189, 16.550, -88.979), Vector(-63.515, 14.550, -79.509), Vector(-56.494,
			12.447, -66.895), Vector(-62.180, 12.550, -67.923), Vector(-64.152, 12.541, -64.238), Vector(-71.022, 14.550, -71.084), Vector(
			-77.475, 13.824, -68.435), Vector(-88.212, 14.550, -98.996), Vector(-89.966, 13.683, -98.174), Vector(-84.246, 14.550,
			-97.373), Vector(-87.185, 13.779, -92.916), Vector(-92.984, 13.550, -94.422), Vector(-87.633, 13.550, -67.280), Vector(-63.761,
			12.402, -58.793), Vector(-48.319, 10.247, -56.678), Vector(-51.024, 10.689, -49.133), Vector(-56.052, 10.569, -51.056), Vector(
			-58.155, 11.433, -38.886), Vector(-108.946, 16.550, -110.585), Vector(-121.455, 14.550, -102.134), Vector(-94.810, 14.550,
			-114.972), Vector(-70.678, 15.540, -1.360), Vector(-25.004, 14.542, 5.888), Vector(-22.905, 14.542, 1.661), Vector(-52.447,
			13.540, -26.979), Vector(-10.813, 17.550, -57.865), Vector(-6.180, 15.550, -67.294), Vector(20.865, 18.550, -80.430), Vector(
			15.214, 18.550, -69.860), Vector(20.510, 18.550, -69.179), Vector(24.727, 18.550, -64.622), Vector(30.621, 18.550, -75.128));
		Global.Healthkits = Array(Vector(-0.509, 11.545, -49.747), Vector(-15.592, 11.550, -58.205), Vector(-30.555, 11.574, -39.988),
			Vector(-14.883, 11.550, -21.102), Vector(-17.322, 14.540, 4.140), Vector(-40.862, 13.540, 25.241), Vector(-69.465, 15.540,
			2.218), Vector(-39.551, 12.608, -40.093), Vector(-73.395, 11.567, -38.396), Vector(-46.502, 10.255, -57.414), Vector(-125.168,
			11.550, -56.353), Vector(-105.172, 16.550, -103.052), Vector(-81.640, 14.550, -95.099));
		Global.ObjectiveA_Nodes = Array(Vector(-54.907, 13.574, 21.648), Vector(-56.303, 13.574, 20.432), Vector(-57.615, 13.574, 18.510),
			Vector(-58.849, 13.574, 16.937), Vector(-60.297, 13.574, 15.188), Vector(-61.929, 13.574, 13.528), Vector(-59.766, 13.574,
			11.352), Vector(-58.062, 13.574, 13.080), Vector(-56.551, 13.574, 14.614), Vector(-55.110, 13.574, 16.070), Vector(-53.497,
			13.574, 17.712), Vector(-52.265, 13.574, 18.995), Vector(-49.944, 13.574, 16.708), Vector(-51.201, 13.574, 15.562), Vector(
			-52.773, 13.574, 13.967), Vector(-54.328, 13.574, 12.485), Vector(-55.847, 13.574, 10.999), Vector(-57.591, 13.574, 9.272),
			Vector(-55.853, 13.573, 7.360), Vector(-54.024, 13.573, 8.948), Vector(-52.370, 13.573, 10.604), Vector(-50.940, 13.573,
			12.034), Vector(-49.305, 13.573, 13.671), Vector(-48.108, 13.573, 14.867), Vector(-45.892, 13.573, 12.610), Vector(-46.960,
			13.550, 11.516), Vector(-48.601, 13.540, 9.794), Vector(-49.991, 13.540, 8.443), Vector(-51.672, 13.540, 6.683), Vector(
			-53.367, 13.575, 4.898));
		Global.ObjectiveB_Nodes = Array(Vector(-98.932, 13.650, -72.609), Vector(-99.779, 13.650, -74.436), Vector(-100.882, 13.551,
			-76.812), Vector(-101.996, 13.551, -79.128), Vector(-103.070, 13.551, -81.358), Vector(-104.357, 13.650, -84.031), Vector(
			-105.217, 13.650, -85.680), Vector(-102.654, 13.650, -86.902), Vector(-101.553, 13.650, -84.668), Vector(-100.628, 13.650,
			-82.793), Vector(-99.405, 13.650, -80.319), Vector(-98.240, 13.650, -78.031), Vector(-97.071, 13.650, -75.711), Vector(-96.176,
			13.650, -73.894), Vector(-93.883, 13.550, -75.049), Vector(-94.844, 13.650, -77.011), Vector(-95.955, 13.650, -79.260), Vector(
			-97.135, 13.696, -81.494), Vector(-98.215, 13.650, -83.682), Vector(-99.277, 13.650, -85.842), Vector(-100.234, 13.550,
			-87.766), Vector(-97.555, 13.550, -89.086), Vector(-96.620, 13.550, -87.190), Vector(-95.482, 13.650, -84.874), Vector(-93.312,
			13.684, -80.612), Vector(-92.148, 13.650, -78.256), Vector(-91.198, 13.550, -76.312), Vector(-88.307, 13.650, -77.736), Vector(
			-89.251, 13.650, -79.644), Vector(-90.452, 13.650, -82.040), Vector(-91.538, 13.650, -84.237), Vector(-92.537, 13.650,
			-86.244), Vector(-93.718, 13.650, -88.599), Vector(-94.713, 13.650, -90.569), Vector(-92.105, 13.650, -91.834), Vector(-91.149,
			13.650, -89.917), Vector(-90.044, 13.550, -87.675), Vector(-88.973, 13.550, -85.507), Vector(-87.867, 13.550, -83.271), Vector(
			-86.745, 13.650, -81.001), Vector(-85.724, 13.650, -78.934));
		Global.Chokepoint = Array(Vector(-26.323, 11.474, -25.893), Vector(-66.594, 13.341, -27.318), Vector(-89.906, 13.550, -71.770),
			Vector(-52.878, 11.829, -7.114));
		Global.Staircase_Top = Array(Vector(-66.589, 13.405, -26.140), Vector(-82.618, 13.501, -16.139), Vector(-70.643, 15.542, -6.647),
			Vector(-65.143, 15.540, -6.527), Vector(-59.979, 15.542, 4.187), Vector(-34.590, 15.540, -6.683), Vector(-26.074, 14.540,
			1.271), Vector(-24.616, 16.540, 14.734), Vector(-37.694, 17.516, 20.769), Vector(-47.665, 17.540, 32.683), Vector(-32.230,
			13.254, 33.940), Vector(-57.139, 13.446, -12.114), Vector(-44.305, 15.540, -18.183), Vector(-39.479, 12.608, -28.553), Vector(
			-53.137, 13.540, -32.498), Vector(-49.383, 13.540, -27.547), Vector(-9.602, 15.550, -68.980), Vector(-8.132, 17.550, -60.216),
			Vector(-5.678, 15.550, -36.848), Vector(2.847, 12.946, -37.302), Vector(-8.880, 12.832, -27.182), Vector(-55.398, 12.397,
			-63.327), Vector(-61.802, 14.550, -76.613), Vector(-62.077, 16.551, -89.961), Vector(-77.293, 16.550, -94.813), Vector(
			-100.875, 16.550, -101.828), Vector(-106.802, 16.551, -98.947), Vector(-82.695, 16.550, -89.036), Vector(-80.155, 16.550,
			-83.716), Vector(-103.237, 13.571, -53.511), Vector(-120.158, 14.551, -81.422), Vector(-102.386, 16.550, -111.738), Vector(
			-113.796, 16.550, -106.208));
		Global.Staircase_Bottom = Array(Vector(-69.609, 11.405, -32.632), Vector(-85.103, 11.392, -20.781), Vector(-75.034, 13.566,
			-10.562), Vector(-61.208, 13.525, -10.475), Vector(-55.935, 13.575, 8.057), Vector(-40.884, 11.575, -0.246), Vector(-21.302,
			11.572, -3.285), Vector(-28.099, 14.540, 10.863), Vector(-34.271, 16.540, 24.479), Vector(-36.035, 13.540, 33.813), Vector(
			-29.453, 11.540, 36.633), Vector(-51.467, 11.620, -5.333), Vector(-48.019, 13.540, -21.756), Vector(-35.553, 11.476, -23.693),
			Vector(-49.045, 12.608, -36.187), Vector(-44.489, 12.608, -32.938), Vector(-15.940, 11.550, -62.363), Vector(-4.390, 15.550,
			-63.832), Vector(-1.161, 12.946, -32.046), Vector(3.562, 11.509, -41.938), Vector(-17.665, 11.549, -29.343), Vector(-52.905,
			10.449, -58.189), Vector(-59.507, 12.550, -71.912), Vector(-59.223, 14.548, -85.725), Vector(-79.826, 14.550, -99.545), Vector(
			-95.984, 14.550, -104.081), Vector(-111.703, 14.548, -96.284), Vector(-85.486, 13.550, -86.780), Vector(-83.598, 13.550,
			-82.150), Vector(-105.584, 11.550, -58.091), Vector(-117.084, 11.550, -74.470), Vector(-98.007, 14.550, -113.815), Vector(
			-118.548, 14.550, -103.858));
		Global.Healthkits_Small = Array(Vector(-15.592, 11.550, -58.205), Vector(-30.555, 11.574, -39.988), Vector(-14.883, 11.550,
			-21.102), Vector(-17.322, 14.540, 4.140), Vector(-40.862, 13.540, 25.241), Vector(-39.551, 12.608, -40.093), Vector(-73.395,
			11.567, -38.396), Vector(-46.502, 10.255, -57.414), Vector(-105.172, 16.550, -103.052), Vector(-81.640, 14.550, -95.099));
		Global.Healthkits_Large = Array(Vector(-0.509, 11.545, -49.747), Vector(-69.465, 15.540, 2.218), Vector(-125.168, 11.550,
			-56.353));
		Global.Staircase_Middle = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, Vector(-42.432, 15.540, 37.130), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, Vector(-83.750, 15.175, -86.309), Vector(-82.981, 15.175, -84.748), 0, 0, 0, 0);
	}
}

rule("Temple Of Anubis")
{
	event
	{
		Subroutine;
		Temple_of_Anubus;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(3.981, 3.323, -36.909), Vector(8.605, 3.323, -40.174), Vector(10.350, 2.380, -39.130), Vector(
			9.493, 2.323, -32.820), Vector(16.271, 2.323, -28.814), Vector(11.492, 2.323, -25.745), Vector(12.426, 2.323, -22.622), Vector(
			7.483, 2.323, -22.075), Vector(4.930, 2.323, -34.192), Vector(-0.946, 2.323, -27.882), Vector(-0.890, 2.323, -31.785), Vector(
			-15.634, -0.714, -40.979), Vector(-24.713, -0.731, -33.487), Vector(18.208, 2.323, -18.646), Vector(26.765, 2.134, -12.078),
			Vector(15.455, 1.629, 7.748), Vector(-0.603, -0.850, -7.807), Vector(-8.120, -0.646, -14.031), Vector(-4.440, 0.061, -20.606),
			Vector(-10.896, -0.382, -21.944), Vector(-15.909, -0.172, -11.113), Vector(-6.120, -1.241, -2.344), Vector(-2.388, -1.241,
			1.979), Vector(2.731, -1.241, 2.453), Vector(0.592, 2.513, 13.336), Vector(3.717, 2.730, 18.015), Vector(14.922, 5.657,
			12.658), Vector(-7.994, 2.654, 9.724), Vector(-7.889, 3.091, 2.076), Vector(-1.576, 3.226, 0.606), Vector(0.355, 3.079, 6.900),
			Vector(-7.572, 2.498, 14.516), Vector(-13.043, 2.554, 11.881), Vector(-21.034, 2.402, 1.635), Vector(-22.778, 2.577, -3.143),
			Vector(-25.375, -0.728, -14.787), Vector(-18.387, -0.509, -24.928), Vector(-27.084, -0.728, -25.613), Vector(-6.457, 2.629,
			19.267), Vector(-1.267, 2.589, 26.096), Vector(2.813, 2.473, 28.497), Vector(-15.921, 6.061, 38.065), Vector(-19.987, 6.061,
			28.189), Vector(-28.536, 6.191, 37.751), Vector(-28.941, 3.015, 19.977), Vector(-24.721, 2.059, 14.081), Vector(-19.301, 2.135,
			17.240), Vector(-14.574, 2.289, 21.322), Vector(-10.462, 2.423, 19.912), Vector(-15.463, 2.406, 17.225), Vector(-30.817, 8.060,
			27.353), Vector(-32.288, 8.060, 29.569), Vector(-10.741, 2.335, 28.327), Vector(-19.667, 2.243, 24.550), Vector(-30.630, 2.881,
			27.033), Vector(-34.976, 7.081, 23.741), Vector(-43.375, 11.059, 16.044), Vector(-52.130, 11.059, 27.075), Vector(-48.726,
			11.059, 36.395), Vector(-52.483, 11.081, 36.699), Vector(-46.487, 11.093, 33.530), Vector(-60.800, 8.059, 43.578), Vector(
			-57.557, 8.089, 43.809), Vector(-57.066, 3.050, 44.937), Vector(-62.014, 3.070, 47.782), Vector(-56.681, 3.070, 53.479),
			Vector(-52.138, 3.103, 48.145), Vector(-51.954, 3.060, 40.871), Vector(-33.749, 2.892, 33.908), Vector(-37.396, 3.065, 38.026),
			Vector(-37.841, 3.215, 45.675), Vector(-33.353, 3.540, 50.425), Vector(-39.317, 3.050, 55.631), Vector(-43.026, 3.092, 53.282),
			Vector(-36.401, 7.050, 62.855), Vector(-32.103, 7.050, 60.790), Vector(-33.309, 7.550, 67.096), Vector(-30.712, 2.873, 40.070),
			Vector(-24.408, 2.905, 46.099), Vector(-32.954, 3.129, 61.572), Vector(-36.044, 3.050, 61.034), Vector(-39.771, 3.050, 65.068),
			Vector(-36.733, 3.075, 75.030), Vector(-38.827, 3.050, 70.155), Vector(-31.122, 3.075, 73.341), Vector(-27.624, 3.047, 71.465),
			Vector(-32.392, 3.025, 65.569), Vector(-26.918, 3.022, 58.088), Vector(-19.399, 2.876, 52.859), Vector(-15.577, 2.849, 57.189),
			Vector(-21.410, 3.060, 61.128), Vector(-22.348, 3.116, 68.305), Vector(-17.301, 3.072, 67.891), Vector(-4.031, 5.541, 74.734),
			Vector(0.158, 5.065, 68.868), Vector(-0.355, 5.061, 62.586), Vector(6.359, 5.081, 61.843), Vector(6.836, 5.156, 67.564),
			Vector(7.588, 5.172, 74.153), Vector(5.893, 6.050, 55.047), Vector(0.450, 6.729, 55.455), Vector(-8.055, 7.114, 58.641),
			Vector(-9.808, 5.541, 79.612), Vector(-17.036, 6.228, 77.519), Vector(-26.804, 6.210, 79.479), Vector(-28.017, 7.153, 75.910),
			Vector(-28.048, 7.692, 72.809), Vector(-25.347, 6.166, 87.880), Vector(-24.884, 6.214, 96.300), Vector(-24.551, 7.114, 97.304),
			Vector(-15.897, 6.206, 96.733), Vector(-9.422, 6.290, 95.581), Vector(-9.440, 6.212, 86.866), Vector(-15.127, 6.248, 87.442),
			Vector(-3.545, 5.255, 86.524), Vector(-0.059, 4.442, 86.523), Vector(5.385, 5.610, 80.748), Vector(5.259, 4.755, 83.488),
			Vector(10.720, 3.949, 88.664), Vector(13.633, 2.050, 99.483), Vector(8.396, 2.062, 99.683), Vector(17.627, 3.949, 89.987),
			Vector(9.366, 5.963, 113.623), Vector(3.903, 6.137, 114.078), Vector(17.169, 5.963, 114.495), Vector(12.348, 6.384, 118.744),
			Vector(9.042, 5.963, 121.403), Vector(10.482, 6.043, 129.826), Vector(-4.997, 6.046, 130.729), Vector(-4.456, 6.049, 137.092),
			Vector(-9.985, 5.845, 142.967), Vector(-27.474, 6.121, 117.348), Vector(-19.323, 6.229, 116.260), Vector(4.633, 2.235, 96.479),
			Vector(2.424, 2.221, 94.692), Vector(-1.624, 1.990, 95.833), Vector(-0.395, 2.204, 101.059), Vector(-4.311, 1.251, 100.651),
			Vector(-8.874, 1.462, 100.141), Vector(-31.983, 6.193, 118.172), Vector(-32.557, 5.975, 126.376), Vector(-26.233, 6.017,
			122.403), Vector(-11.845, 5.790, 118.647), Vector(-11.527, 5.534, 122.531), Vector(-1.970, 5.510, 121.602), Vector(-2.264,
			5.985, 116.813), Vector(-7.631, 6.187, 103.042), Vector(-5.482, 6.302, 99.548), Vector(-11.554, 6.302, 101.527), Vector(
			-16.427, 7.970, 63.699), Vector(-21.298, 7.980, 56.825), Vector(-27.662, 7.970, 62.615), Vector(-22.902, 7.970, 68.593),
			Vector(-22.380, 7.938, 63.189), Vector(-39.888, 11.750, 48.453), Vector(-35.548, 11.750, 44.434), Vector(-32.051, 11.750,
			44.322), Vector(-30.578, 10.565, 56.892), Vector(-34.230, 11.458, 54.471), Vector(-37.331, 11.750, 50.471), Vector(-69.532,
			4.061, 16.988), Vector(-60.928, 3.120, 26.062), Vector(-53.098, 3.059, 24.147), Vector(-53.333, 3.059, 31.413), Vector(-48.663,
			3.059, 34.396), Vector(-51.478, 7.059, 18.654), Vector(-53.466, 7.059, 22.836), Vector(-51.231, 7.059, 27.175), Vector(-45.086,
			7.059, 27.581), Vector(9.932, 1.043, 6.803), Vector(12.893, 2.012, -1.957), Vector(21.167, 2.240, -1.299), Vector(8.927,
			-0.467, -6.854), Vector(-50.751, 9.061, 9.389), Vector(-32.089, 11.999, 12.426), Vector(-35.142, 12.164, 10.512), Vector(
			-36.974, 10.581, 7.241), Vector(-14.463, 7.872, 50.566), Vector(-19.466, 7.882, 46.827), Vector(-24.838, 9.570, 47.644),
			Vector(-24.612, 9.570, 43.614), Vector(-11.194, 12.095, 55.267), Vector(-14.940, 12.330, 53.198), Vector(-41.856, 7.059,
			23.780), Vector(-42.888, 7.059, 16.896), Vector(-63.841, 4.061, 23.340), Vector(16.505, 5.963, 108.744), Vector(18.433, 3.949,
			96.748), Vector(3.584, 2.362, 100.386), Vector(-13.022, 7.981, 126.966));
		Global.Healthkits = Array(Vector(5.912, 2.872, 19.910), Vector(-24.755, 2.698, -1.502), Vector(-4.915, 4.059, 45.586), Vector(
			-23.210, 2.059, 15.523), Vector(-39.251, 6.559, 7.032), Vector(-42.641, 11.059, 24.406), Vector(-37.764, 3.050, 57.758),
			Vector(-35.661, 3.050, 69.597), Vector(12.072, 5.157, 67.239), Vector(-16.997, 6.284, 84.687), Vector(17.615, 3.949, 88.212),
			Vector(-3.417, -1.241, 3.664));
		Global.ObjectiveA_Nodes = Array(Vector(-36.757, 3.147, 42.370), Vector(-37.965, 3.079, 40.849), Vector(-39.285, 3.076, 39.355),
			Vector(-40.772, 3.061, 37.639), Vector(-42.138, 3.062, 35.980), Vector(-44.330, 3.062, 34.055), Vector(-46.118, 3.062, 36.096),
			Vector(-44.008, 3.062, 37.972), Vector(-42.348, 3.060, 39.474), Vector(-40.736, 3.074, 40.918), Vector(-39.129, 3.102, 42.178),
			Vector(-38.042, 3.150, 43.861), Vector(-39.465, 3.071, 45.391), Vector(-40.712, 3.063, 43.912), Vector(-42.203, 3.055, 42.529),
			Vector(-43.741, 3.216, 41.148), Vector(-45.241, 3.059, 39.342), Vector(-47.414, 3.036, 37.468), Vector(-49.234, 3.059, 39.410),
			Vector(-47.028, 3.217, 41.373), Vector(-43.751, 3.218, 44.312), Vector(-42.195, 3.054, 45.710), Vector(-40.796, 3.067, 46.961),
			Vector(-42.553, 3.075, 49.020), Vector(-43.952, 3.052, 47.813), Vector(-45.521, 3.052, 46.594), Vector(-47.086, 3.218, 45.320),
			Vector(-48.933, 3.054, 43.795), Vector(-51.140, 3.056, 41.998), Vector(-52.591, 3.053, 43.785), Vector(-50.495, 3.053, 45.606),
			Vector(-48.715, 3.053, 47.133), Vector(-47.163, 3.053, 48.476), Vector(-45.624, 3.053, 49.811), Vector(-47.072, 3.053, 51.385),
			Vector(-48.559, 3.053, 49.942), Vector(-49.917, 3.053, 48.451), Vector(-51.422, 3.053, 47.123), Vector(-53.797, 3.053,
			45.086));
		Global.ObjectiveB_Nodes = Array(Vector(-15.756, 6.268, 108.684), Vector(-13.478, 6.214, 108.545), Vector(-10.715, 6.214, 108.583),
			Vector(-7.856, 6.204, 108.408), Vector(-4.389, 6.214, 108.211), Vector(-1.249, 6.202, 107.946), Vector(1.340, 6.239, 107.744),
			Vector(1.623, 6.237, 109.881), Vector(-0.996, 6.210, 110.191), Vector(-4.080, 6.215, 110.470), Vector(-7.676, 6.212, 110.799),
			Vector(-10.584, 6.212, 111.059), Vector(-13.263, 6.212, 111.296), Vector(-15.618, 6.212, 111.507), Vector(-13.097, 6.213,
			113.981), Vector(-10.375, 6.213, 113.748), Vector(-3.727, 6.230, 113.351), Vector(-0.782, 6.226, 113.091), Vector(1.847, 6.218,
			112.702), Vector(2.119, 6.308, 115.769), Vector(-0.514, 6.212, 116.019), Vector(-3.513, 6.229, 116.574), Vector(-10.114, 6.321,
			116.696), Vector(-12.970, 6.081, 116.462), Vector(-15.330, 6.311, 116.864));
		Global.Chokepoint = Array(Vector(-14.707, 2.272, 21.863), Vector(-24.614, 2.904, 46.126), Vector(-9.977, 5.992, 81.221));
		Global.Staircase_Top = Array(Vector(-3.666, 2.323, -33.916), Vector(2.980, 2.107, -19.888), Vector(2.372, 2.548, 11.957), Vector(
			-13.535, 2.568, 2.542), Vector(-11.242, 6.059, 41.424), Vector(-30.214, 8.059, 29.618), Vector(-33.095, 8.059, 27.499), Vector(
			-47.788, 9.059, 8.619), Vector(-45.700, 11.059, 14.656), Vector(-56.188, 11.059, 33.531), Vector(-53.356, 7.065, 16.308),
			Vector(-39.915, 7.050, 62.610), Vector(-15.650, 5.541, 74.024), Vector(-10.516, 5.541, 72.131), Vector(5.835, 4.129, 87.591),
			Vector(13.765, 3.949, 89.378), Vector(10.637, 5.970, 105.237), Vector(-17.988, 6.207, 95.938), Vector(-20.288, 6.228, 112.201),
			Vector(-32.499, 6.213, 113.307), Vector(-25.391, 7.958, 113.667), Vector(-12.478, 7.950, 131.274), Vector(-18.351, 7.833,
			127.092));
		Global.Staircase_Bottom = Array(Vector(-9.657, -0.542, -38.438), Vector(-1.354, -0.304, -13.540), Vector(5.572, -1.073, 2.118),
			Vector(-8.900, -1.024, -4.716), Vector(-0.388, 2.365, 36.979), Vector(-26.104, 6.059, 32.058), Vector(-41.571, 3.063, 34.328),
			Vector(-31.628, 3.088, 18.714), Vector(-49.973, 9.059, 11.921), Vector(-60.067, 8.059, 40.308), Vector(-59.104, 3.061, 22.845),
			Vector(-46.053, 3.047, 55.888), Vector(-22.043, 3.087, 73.851), Vector(-10.685, 3.209, 65.885), Vector(5.740, 2.351, 93.471),
			Vector(13.565, 2.050, 94.388), Vector(18.057, 3.949, 103.797), Vector(-10.917, 1.896, 102.119), Vector(-20.757, 4.262,
			106.789), Vector(-22.053, 4.233, 105.076), Vector(-28.078, 5.189, 108.631), Vector(-12.126, 5.927, 135.817), Vector(-22.279,
			6.028, 127.485));
		Global.Healthkits_Small = Array(Vector(-23.210, 2.059, 15.523), Vector(-39.251, 6.559, 7.032), Vector(-37.764, 3.050, 57.758),
			Vector(-16.997, 6.284, 84.687), Vector(17.615, 3.949, 88.212), Vector(-3.417, -1.241, 3.664));
		Global.Healthkits_Large = Array(Vector(-24.755, 2.698, -1.502), Vector(-4.915, 4.059, 45.586), Vector(-42.641, 11.059, 24.406),
			Vector(-35.661, 3.050, 69.597), Vector(12.072, 5.157, 67.239), Vector(-8.047, 1.349, 101.431));
		Global.Staircase_Middle = Array(0, 0, Vector(6.662, 0.257, 6.227), 0, Vector(-5.720, 4.061, 44.082), 0, Vector(-36.168, 7.059,
			25.708), Vector(-40.513, 6.561, 12.611), 0, 0, 0, 0, 0, 0, 0, 0, 0, Vector(-16.532, 4.003, 102.663), 0, Vector(-32.677, 5.188,
			107.469), Vector(-26.313, 6.690, 111.105), 0, 0);
	}
}

rule("Volskaya")
{
	event
	{
		Subroutine;
		Volskaya;
	}

	actions
	{
		Global.Path_Nodes = Array(Vector(19.115, -3.430, -7.029), Vector(22.230, -3.430, -2.728), Vector(11.664, -3.430, 0.382), Vector(
			14.471, -3.430, 3.732), Vector(14.699, -3.430, 8.417), Vector(22.479, -3.430, 16.681), Vector(12.294, -3.430, 11.616), Vector(
			8.697, -3.430, 14.177), Vector(3.268, -3.430, 10.937), Vector(1.857, -3.430, 5.124), Vector(6.298, -3.430, 0.208), Vector(
			-11.676, -5.429, 0.889), Vector(-18.760, -5.429, 3.040), Vector(-21.062, -4.971, 12.861), Vector(-20.263, -4.237, 17.439),
			Vector(-8.611, -4.224, 16.377), Vector(-4.076, -4.398, 19.473), Vector(5.244, -3.553, 28.582), Vector(9.836, -3.284, 30.330),
			Vector(9.762, -2.620, 44.645), Vector(4.051, -2.832, 48.484), Vector(2.942, -2.681, 39.472), Vector(-7.610, -2.680, 35.937),
			Vector(-16.961, -2.628, 36.414), Vector(-3.939, -2.680, 32.992), Vector(-8.027, -2.680, 29.489), Vector(-12.501, -2.628,
			32.243), Vector(-12.119, -3.299, 26.815), Vector(-8.182, -3.654, 26.154), Vector(-4.488, -3.421, 26.550), Vector(-6.737,
			-4.198, 23.789), Vector(-17.288, -4.266, 23.026), Vector(-24.407, -3.485, 34.104), Vector(-26.350, -4.067, 25.506), Vector(
			-39.582, -1.430, 29.641), Vector(-39.076, -1.430, 34.137), Vector(-34.752, -1.430, 34.769), Vector(-36.102, -1.430, 44.520),
			Vector(-27.377, -1.665, 51.362), Vector(-24.035, -2.852, 38.069), Vector(-21.062, -2.126, 48.056), Vector(-8.842, -2.083,
			51.688), Vector(-34.931, -1.006, 50.911), Vector(-35.597, -3.430, 13.048), Vector(-37.508, 3.570, 31.484), Vector(-36.800,
			3.570, 37.948), Vector(-28.547, 3.563, 39.603), Vector(-13.882, -1.749, 59.083), Vector(-18.960, -1.022, 61.353), Vector(
			-27.312, -0.431, 61.504), Vector(-29.990, -0.431, 55.102), Vector(-33.174, 3.570, 73.803), Vector(-29.789, 3.570, 70.053),
			Vector(-29.618, 3.647, 73.484), Vector(-29.774, 3.647, 76.796), Vector(-32.812, 3.658, 81.164), Vector(-27.768, -1.210,
			65.839), Vector(-23.880, -1.568, 67.878), Vector(-18.624, -1.749, 68.276), Vector(-10.463, -1.749, 69.855), Vector(-4.385,
			-1.561, 61.387), Vector(8.200, -1.430, 57.782), Vector(10.041, -0.519, 58.129), Vector(13.625, -0.430, 63.177), Vector(17.154,
			-0.430, 59.680), Vector(16.029, -0.430, 53.548), Vector(12.763, -0.430, 72.434), Vector(8.652, -1.155, 72.616), Vector(-1.985,
			-1.749, 73.489), Vector(-21.524, -1.729, 74.117), Vector(-21.985, -2.470, 83.259), Vector(-12.122, -2.441, 83.034), Vector(
			-1.233, -2.069, 77.713), Vector(-5.982, -2.422, 86.552), Vector(-1.490, -2.678, 85.267), Vector(-5.985, -2.496, 97.820),
			Vector(0.555, -2.155, 101.041), Vector(13.199, -2.431, 100.697), Vector(1.895, 3.470, 92.466), Vector(-2.446, 3.470, 95.443),
			Vector(-2.646, 3.730, 91.519), Vector(-0.875, 3.470, 87.720), Vector(2.134, 3.470, 85.156), Vector(3.405, 3.629, 102.223),
			Vector(-0.787, 3.745, 102.271), Vector(1.488, 3.570, 107.651), Vector(-2.600, 2.921, 107.674), Vector(-14.028, 2.570, 106.908),
			Vector(-11.756, 2.570, 109.268), Vector(-16.404, 2.572, 109.223), Vector(-5.354, 2.572, 109.220), Vector(-21.352, 2.734,
			109.327), Vector(-24.403, 3.035, 107.370), Vector(-27.815, 3.570, 107.400), Vector(-27.825, 3.570, 98.466), Vector(-25.630,
			3.619, 94.885), Vector(-25.730, 3.739, 100.670), Vector(-32.857, 3.570, 98.650), Vector(-32.793, 3.570, 93.471), Vector(
			-34.153, 3.570, 89.847), Vector(-34.120, 3.570, 84.913), Vector(-38.475, 3.570, 97.230), Vector(-26.195, -2.313, 89.096),
			Vector(-30.969, -2.430, 88.744), Vector(-31.784, -2.430, 94.464), Vector(-31.871, -2.496, 104.348), Vector(-20.520, -2.463,
			97.590), Vector(-22.432, -1.430, 117.197), Vector(-6.448, -1.430, 117.760), Vector(-7.472, -2.496, 102.167), Vector(-13.216,
			-2.145, 102.533), Vector(-11.458, 2.820, 77.646), Vector(-11.432, 2.820, 73.925), Vector(-6.518, 2.820, 74.816), Vector(
			-14.983, 2.820, 74.133), Vector(-16.582, 2.820, 80.687), Vector(-11.038, 2.820, 81.130), Vector(-5.433, 2.829, 81.280), Vector(
			-18.550, 3.493, 78.386), Vector(27.165, -2.496, 70.183), Vector(26.335, -2.496, 80.215), Vector(23.501, -2.496, 86.816),
			Vector(18.358, -2.430, 86.412), Vector(22.929, -2.496, 101.479), Vector(26.751, 2.570, 76.861), Vector(24.187, 2.570, 89.587),
			Vector(24.067, 2.570, 87.145), Vector(-42.591, 3.570, 97.319), Vector(-39.044, -2.611, 72.881), Vector(-48.146, -2.377,
			78.117), Vector(-49.160, -2.491, 88.289), Vector(-52.001, -3.425, 97.925), Vector(-44.252, -3.429, 103.582), Vector(-35.421,
			-2.496, 103.709), Vector(-59.423, -2.805, 94.053), Vector(-64.304, -2.516, 91.043), Vector(-61.286, -2.430, 85.605), Vector(
			-55.635, -2.611, 76.016), Vector(-50.681, -2.611, 64.123), Vector(-45.950, -1.672, 60.850), Vector(-44.236, -1.430, 57.024),
			Vector(-50.469, -1.430, 48.442), Vector(-54.643, -1.430, 46.464), Vector(-60.676, -1.430, 55.062), Vector(-58.174, -1.759,
			57.155), Vector(-58.453, -2.611, 63.954), Vector(-65.071, -2.611, 73.381), Vector(-72.684, -2.430, 77.054), Vector(-72.353,
			-1.782, 73.187), Vector(-67.753, -1.430, 65.880), Vector(-72.919, -0.306, 62.034), Vector(-70.812, -1.118, 63.298), Vector(
			-64.567, 3.570, 90.686), Vector(-61.703, 3.570, 86.465), Vector(-55.084, 3.570, 89.111), Vector(-49.589, 3.570, 92.694),
			Vector(-57.612, -1.430, 42.940), Vector(-70.114, -0.930, 37.522), Vector(-71.164, -0.930, 33.723), Vector(-67.720, -0.930,
			29.147), Vector(-63.522, -0.930, 29.934), Vector(-59.719, -0.930, 33.152), Vector(-64.327, -0.928, 39.841), Vector(-78.440,
			-0.430, 49.353), Vector(-75.832, -0.430, 56.011), Vector(-71.642, -0.430, 50.749), Vector(-85.049, -2.426, 73.341), Vector(
			-100.962, 3.740, 71.803), Vector(-97.911, 3.572, 73.851), Vector(-96.376, 3.572, 68.467), Vector(-94.627, 3.572, 64.339),
			Vector(-91.831, 3.572, 60.689), Vector(-91.449, 3.572, 56.255), Vector(-87.742, 3.648, 58.282), Vector(-114.645, 3.570,
			71.778), Vector(-110.376, 3.570, 67.612), Vector(-110.628, 3.570, 64.171), Vector(-118.235, -0.430, 53.423), Vector(-111.705,
			-0.312, 48.345), Vector(-114.968, -0.430, 49.214), Vector(-121.906, -0.430, 45.480), Vector(-125.369, -0.430, 47.922), Vector(
			-130.214, -0.430, 45.053), Vector(-132.296, -0.430, 41.671), Vector(-128.938, 0.569, 38.694), Vector(-126.317, 0.569, 34.896),
			Vector(-127.048, 0.569, 27.394), Vector(-120.549, 0.544, 33.474), Vector(-118.477, 0.569, 28.308), Vector(-110.779, -0.430,
			26.838), Vector(-105.563, -0.430, 18.547), Vector(-98.086, -0.926, 23.022), Vector(-102.348, -0.930, 30.017), Vector(-99.669,
			-0.428, 32.314), Vector(-108.673, -0.930, 40.380), Vector(-101.363, -0.430, 44.968), Vector(-87.883, -0.928, 28.724), Vector(
			-88.885, -0.926, 39.396), Vector(-90.959, -0.431, 43.016), Vector(-81.479, -0.930, 31.166), Vector(-77.959, -0.930, 26.831),
			Vector(-91.098, 3.570, 27.544), Vector(-93.702, 3.572, 26.169), Vector(-96.730, 3.572, 33.281), Vector(-88.770, 3.572, 38.644),
			Vector(-89.840, 3.748, 35.584), Vector(-89.765, 3.674, 40.430), Vector(-84.789, 3.570, 36.290), Vector(-81.440, 3.572, 43.105),
			Vector(-83.322, 3.572, 46.807), Vector(-83.438, 3.579, 50.769), Vector(-87.071, 3.579, 49.076), Vector(-100.021, 3.570,
			38.536), Vector(-102.446, 3.811, 46.669), Vector(-100.670, 3.570, 43.478), Vector(-103.527, 3.811, 41.706), Vector(-105.813,
			3.687, 45.358), Vector(-102.850, 3.570, 43.959), Vector(-107.396, 3.570, 51.111), Vector(-107.256, 3.570, 56.993), Vector(
			-85.044, -0.430, 51.472), Vector(-88.646, -0.430, 56.284), Vector(-82.544, -0.430, 64.078), Vector(-85.334, -0.430, 58.812),
			Vector(-80.393, -0.430, 54.047), Vector(-92.247, -2.430, 67.260), Vector(-91.255, -2.430, 71.294), Vector(-95.775, -2.430,
			73.729), Vector(-98.958, -2.430, 71.734), Vector(-96.375, -2.430, 66.994), Vector(-104.341, -2.430, 67.574), Vector(-100.997,
			-2.430, 62.125), Vector(-99.738, -1.496, 60.514), Vector(-98.738, -0.572, 58.960), Vector(-97.045, -0.430, 56.735), Vector(
			-77.591, -0.430, 68.752), Vector(-84.202, -0.424, 78.688), Vector(-89.661, -0.428, 87.233), Vector(-71.214, 4.070, 53.689),
			Vector(-75.097, 4.206, 51.640), Vector(-74.899, 4.248, 48.094), Vector(-72.378, 4.230, 43.876), Vector(-70.052, 4.070, 40.810),
			Vector(-66.459, 4.176, 42.616), Vector(-62.366, 4.184, 45.114), Vector(-70.425, 4.070, 51.319), Vector(36.345, 0.571, -1.508),
			Vector(20.374, 0.571, -19.592), Vector(16.709, -3.429, -16.537), Vector(12.904, -3.429, -12.422), Vector(7.833, -3.430,
			-8.829), Vector(14.164, -3.430, -2.900), Vector(17.368, -3.430, 1.821), Vector(23.297, -3.430, 9.172), Vector(28.363, -3.430,
			5.357), Vector(33.231, -3.430, 1.222), Vector(21.637, -3.430, 20.256), Vector(16.074, -3.423, 24.850), Vector(0.806, -3.430,
			-7.881), Vector(-16.527, 3.777, 30.641), Vector(-17.308, 3.599, 43.815), Vector(0.360, 3.642, 43.351), Vector(0.495, 3.591,
			30.902), Vector(7.388, 2.422, 43.116), Vector(7.267, 2.346, 35.081), Vector(-8.600, 4.136, 43.313), Vector(-17.816, 4.517,
			57.624), Vector(-17.825, 4.517, 53.402), Vector(7.155, 3.660, 92.643), Vector(13.680, -0.430, 78.444), Vector(-67.330, 3.570,
			81.924), Vector(-82.751, 1.570, 20.028));
		Global.Healthkits = Array(Vector(-39.628, -1.430, 24.338), Vector(-8.106, -2.590, 37.492), Vector(17.732, -3.427, 45.712), Vector(
			20.840, -0.430, 55.596), Vector(16.939, -2.430, 94.748), Vector(-33.316, -2.430, 88.370), Vector(-13.976, -1.430, 117.541),
			Vector(-15.840, -2.430, 78.587), Vector(-30.393, -0.430, 53.872), Vector(-65.422, 3.570, 83.113), Vector(-64.234, -2.430,
			82.749), Vector(-73.366, -0.930, 32.706), Vector(-69.632, -0.430, 46.764), Vector(-109.866, -0.430, 55.291), Vector(-91.409,
			-2.430, 63.145), Vector(-96.973, -0.430, 33.606));
		Global.ObjectiveA_Nodes = Array(Vector(-7.769, -2.289, 85.207), Vector(-7.815, -2.289, 87.377), Vector(-7.840, -2.289, 89.852),
			Vector(-7.870, -2.289, 92.546), Vector(-7.896, -2.289, 95.101), Vector(-10.586, -2.289, 95.080), Vector(-10.507, -2.289,
			92.481), Vector(-10.507, -2.298, 89.904), Vector(-10.502, -2.289, 87.292), Vector(-10.497, -2.289, 85.103), Vector(-13.432,
			-2.289, 85.104), Vector(-13.432, -2.310, 87.354), Vector(-13.432, -2.144, 89.979), Vector(-13.433, -2.160, 92.463), Vector(
			-13.413, -2.291, 94.941), Vector(-16.509, -2.291, 94.941), Vector(-16.509, -2.293, 92.276), Vector(-16.509, -2.316, 89.911),
			Vector(-16.509, -2.289, 87.247), Vector(-16.505, -2.289, 85.047), Vector(-19.485, -2.289, 85.047), Vector(-19.485, -2.289,
			87.273), Vector(-19.485, -2.289, 89.919), Vector(-19.484, -2.289, 92.403), Vector(-19.484, -2.289, 95.021));
		Global.ObjectiveB_Nodes = Array(Vector(-85.259, -0.430, 47.489), Vector(-87.578, -0.430, 46.107), Vector(-90.244, -0.430, 44.475),
			Vector(-92.404, -0.430, 43.138), Vector(-94.466, -0.430, 41.875), Vector(-96.901, -0.430, 40.386), Vector(-98.394, -0.430,
			42.773), Vector(-95.954, -0.430, 44.219), Vector(-93.803, -0.430, 45.536), Vector(-91.720, -0.430, 46.812), Vector(-88.960,
			-0.430, 48.498), Vector(-86.710, -0.430, 49.878), Vector(-88.119, -0.430, 52.264), Vector(-90.392, -0.430, 50.855), Vector(
			-93.176, 0.659, 49.149), Vector(-95.257, 0.541, 47.899), Vector(-97.430, -0.430, 46.608), Vector(-99.799, -0.430, 45.150),
			Vector(-101.640, -0.430, 48.130), Vector(-99.006, -0.430, 49.694), Vector(-97.037, -0.430, 50.902), Vector(-94.790, -0.430,
			52.278), Vector(-92.267, -0.430, 53.823), Vector(-89.944, -0.430, 55.238), Vector(-91.288, -0.430, 57.447), Vector(-93.702,
			-0.430, 55.975), Vector(-96.241, -0.430, 54.421), Vector(-98.429, -0.430, 53.079), Vector(-100.506, -0.430, 51.832), Vector(
			-102.906, -0.430, 50.366), Vector(-103.862, -0.430, 51.903), Vector(-101.452, -0.430, 53.374), Vector(-99.312, -0.430, 54.687),
			Vector(-97.289, -0.430, 55.928), Vector(-94.725, -0.430, 57.466), Vector(-92.310, -0.430, 58.923));
		Global.Chokepoint = Array(Vector(-9.119, -1.626, 54.718), Vector(-33.496, -1.974, 73.884), Vector(-71.918, -0.479, 62.658));
		Global.Staircase_Top = Array(Vector(27.686, -1.430, -10.888), Vector(23.336, 0.570, -18.080), Vector(34.674, 0.570, -5.313),
			Vector(-2.188, -3.429, -7.196), Vector(-30.642, -3.430, 6.991), Vector(-43.221, -1.430, 22.742), Vector(-47.084, 3.570,
			24.521), Vector(-33.596, -1.430, 27.320), Vector(9.408, 3.569, 90.964), Vector(24.269, 2.569, 72.754), Vector(-5.994, -1.430,
			108.300), Vector(-7.298, -1.430, 113.788), Vector(-13.958, -1.430, 117.341), Vector(-20.271, -1.431, 113.485), Vector(-21.869,
			-1.430, 108.011), Vector(-38.808, 3.570, 93.752), Vector(-32.475, 3.604, 64.814), Vector(-43.518, 3.597, 91.647), Vector(
			-70.587, 3.570, 91.748), Vector(-65.994, 4.079, 52.743), Vector(-81.074, -0.424, 66.465), Vector(-86.667, -0.430, 63.666),
			Vector(-102.093, 3.570, 79.628), Vector(-110.662, 3.570, 61.378), Vector(-80.923, 1.571, 23.151), Vector(-90.132, 3.570,
			23.134));
		Global.Staircase_Bottom = Array(Vector(23.420, -3.430, -7.475), Vector(26.596, -1.430, -14.508), Vector(31.330, -1.430, -8.959),
			Vector(-6.437, -5.430, -3.685), Vector(-25.602, -5.440, 6.907), Vector(-43.185, -3.430, 17.558), Vector(-45.096, -1.429,
			28.211), Vector(-28.934, -3.429, 27.227), Vector(13.732, -2.430, 87.731), Vector(17.714, -0.314, 72.481), Vector(-5.988,
			-2.496, 104.790), Vector(-10.278, -2.496, 113.708), Vector(-14.020, -2.496, 113.559), Vector(-17.397, -2.496, 113.666), Vector(
			-21.813, -2.491, 105.020), Vector(-32.420, -2.377, 83.668), Vector(-32.424, -0.430, 56.062), Vector(-42.925, -2.430, 78.816),
			Vector(-75.948, -2.429, 80.614), Vector(-62.350, -1.430, 54.457), Vector(-83.525, -2.428, 71.002), Vector(-89.500, -2.430,
			67.937), Vector(-89.172, -2.430, 78.443), Vector(-118.468, -0.430, 56.971), Vector(-83.376, -0.916, 28.143), Vector(-87.687,
			1.629, 19.072));
		Global.Healthkits_Small = Array(Vector(20.840, -0.430, 55.596), Vector(16.939, -2.430, 94.748), Vector(-13.976, -1.430, 117.541),
			Vector(-15.840, -2.430, 78.587), Vector(-30.393, -0.430, 53.872), Vector(-65.422, 3.570, 83.113), Vector(-69.632, -0.430,
			46.764), Vector(-109.866, -0.430, 55.291), Vector(-96.973, -0.430, 33.606));
		Global.Healthkits_Large = Array(Vector(-39.628, -1.430, 24.338), Vector(-8.106, -2.590, 37.492), Vector(17.732, -3.427, 45.712),
			Vector(-33.316, -2.430, 88.370), Vector(-64.234, -2.430, 82.749), Vector(-73.366, -0.930, 32.706), Vector(-91.409, -2.430,
			63.145));
		Global.Staircase_Middle = Array(0, 0, 0, 0, 0, 0, Vector(-53.266, 1.570, 26.263), 0, Vector(11.338, -0.430, 80.661), 0, 0, 0, 0, 0,
			0, Vector(-38.321, -0.430, 83.606), 0, 0, Vector(-78.859, -0.430, 86.015), Vector(-64.903, -0.602, 52.896), 0, 0, Vector(
			-93.567, -0.424, 84.709), 0, 0, 0);
	}
}

disabled rule("----------------------------------- Nodes ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("----------------------------------- Ashe AI ------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Skip Assembing Time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(Workshop Setting Integer(Custom String("Game"), Custom String("Assembing Time"), 5, 0, 30, 0));
	}
}

rule("Create Dummy Bot")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(
			Global.Defense_Amount_Currently < Global.Defense_Amount_Desired || Global.Offense_Amount_Currently < Global.Offense_Amount_Desired)
			== True;
		(Is In Setup || Is Game In Progress) == True;
	}

	actions
	{
		Skip If(Global.Defense_Amount_Currently >= Global.Defense_Amount_Desired, 2);
		Create Dummy Bot(Hero(Ashe), Team 1, 5 + Global.Defense_Amount_Currently, Random Value In Array(Spawn Points(Team 1)), Null);
		Global.Defense_Amount_Currently += 1;
		Skip If(Global.Offense_Amount_Currently >= Global.Offense_Amount_Desired, 2);
		Create Dummy Bot(Hero(Ashe), Team 2, 5 + Global.Offense_Amount_Currently, Random Value In Array(Spawn Points(Team 2)), Null);
		Global.Offense_Amount_Currently += 1;
		Wait(Max(Server Load / 1000, 0.100), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Destroy Dummy Bot")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(
			Global.Defense_Amount_Currently < Global.Defense_Amount_Desired || Global.Offense_Amount_Currently < Global.Offense_Amount_Desired)
			== True;
	}

	actions
	{
		Skip If(Global.Defense_Amount_Currently <= Global.Defense_Amount_Desired, 2);
		Global.Defense_Amount_Currently -= 1;
		Destroy Dummy Bot(Team 1, 5 + Global.Defense_Amount_Currently);
		Skip If(Global.Offense_Amount_Currently <= Global.Offense_Amount_Desired, 2);
		Global.Offense_Amount_Currently -= 1;
		Destroy Dummy Bot(Team 2, 5 + Global.Offense_Amount_Currently);
		Wait(Max(Server Load / 1000, 0.100), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Setup Bots")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Is In Line of Sight(Eye Position(Event Player), Event Player.Walk_To_Position,
			Barriers Do Not Block LOS) ? (Distance Between(Event Player, Event Player.Walk_To_Position)
			< Event Player.Walk_Min ? Direction Towards(Event Player.Walk_To_Position, Event Player) : Direction Towards(Event Player,
			Event Player.Walk_To_Position)) : Direction Towards(Position Of(Event Player), Event Player.Current_Node), (Distance Between(
			Event Player, Event Player.Walk_To_Position) < Event Player.Walk_Min || Distance Between(Event Player,
			Event Player.Walk_To_Position) > Event Player.Walk_Max) && Is In Line of Sight(Eye Position(Event Player),
			Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 1 : (Is In Line of Sight(Eye Position(Event Player),
			Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? 0 : 1), To World, Replace existing throttle,
			Direction and Magnitude);
		Start Facing(Event Player, Entity Exists(First Of(Event Player.Target_Order)) ? Direction Towards(Eye Position(Event Player),
			!Has Status(First Of(Event Player.Target_Order), Knocked Down) && !Has Status(First Of(Event Player.Target_Order), Asleep)
			? Eye Position(First Of(Event Player.Target_Order)) : Position Of(First Of(Event Player.Target_Order))) : (Is In Line of Sight(
			Eye Position(Event Player), Event Player.Walk_To_Position, Barriers Do Not Block LOS) ? Direction Towards(Eye Position(
			Event Player), Event Player.Walk_To_Position) : Direction Towards(Eye Position(Event Player), Event Player.Current_Node)),
			Is True For Any(Array(Has Status(Event Player, Knocked Down), Has Status(Event Player, Asleep), Has Status(Event Player,
			Frozen), Has Status(Event Player, Stunned)), Current Array Element == True) ? 0 : (Magnitude Of(Throttle Of(Event Player))
			== 0 && !Entity Exists(First Of(Event Player.Target_Order)) ? 0 : 225), To World, Direction and Turn Rate);
		Chase Player Variable At Rate(Event Player, Ignore_Lower_Nodes, 0, 1, Destination and Rate);
	}
}

rule("Targeting List")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.Targets = Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))), Is In Line of Sight(
			Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS) == True);
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets,
			Hero Being Duplicated(Current Array Element) == Hero(Sombra) || Hero Of(Current Array Element) == Hero(Sombra)
			? Is Using Ability 1(Current Array Element) && !Is Firing Secondary(Current Array Element) && Distance Between(Event Player,
			Current Array Element) > 3 : Is Dead(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, !Has Spawned(
			Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, Has Status(
			Current Array Element, Invincible)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, Has Status(
			Current Array Element, Phased Out)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(D.Va) || Hero Of(Current Array Element) == Hero(D.Va))
			&& Is Firing Secondary(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Sigma) || Hero Of(Current Array Element) == Hero(Sigma))
			&& Is Using Ability 1(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Orisa) || Hero Of(Current Array Element) == Hero(Orisa))
			&& Is Using Ability 2(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Doomfist) || Hero Of(Current Array Element) == Hero(Doomfist))
			&& Is Using Ultimate(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Genji) || Hero Of(Current Array Element) == Hero(Genji))
			&& Is Using Ability 2(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Mei) || Hero Of(Current Array Element) == Hero(Mei))
			&& Is Using Ability 1(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Moira) || Hero Of(Current Array Element) == Hero(Moira))
			&& Is Using Ability 1(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Reaper) || Hero Of(Current Array Element) == Hero(Reaper))
			&& Is Using Ability 1(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Tracer) || Hero Of(Current Array Element) == Hero(Tracer))
			&& Is Using Ability 2(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, (
			Hero Being Duplicated(Current Array Element) == Hero(Zenyatta) || Hero Of(Current Array Element) == Hero(Zenyatta))
			&& Is Using Ultimate(Current Array Element)));
		Modify Player Variable(Event Player, Targets, Remove From Array By Value, Filtered Array(Event Player.Targets, Is Dead(
			Current Array Element)));
		Event Player.Target_Order = Sorted Array(Event Player.Targets, Distance Between(Event Player, Current Array Element)
			* Normalized Health(Current Array Element));
		If(Count Of(Event Player.Target_Order) == 0);
			Press Button(Event Player, Button(Reload));
		End;
		Wait(Max(Server Load / 1000, 0.100), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Fire Weapon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(Max(Server Load / 1000, 0.100), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Start Scoping")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Is Firing Secondary(Event Player) != True;
		Distance Between(Event Player, First Of(Event Player.Target_Order)) > 15;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Stop Scoping")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Is Firing Secondary(Event Player) == True;
		(!Entity Exists(First Of(Event Player.Target_Order)) || !Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(
			Event Player.Target_Order)), Barriers Do Not Block LOS) || Distance Between(Event Player, First Of(Event Player.Target_Order))
			<= 15) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Coach Gun")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Distance Between(Event Player, First Of(Event Player.Target_Order)) <= 12;
		Ability Cooldown(Event Player, Button(Ability 1)) == Null;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use Dynamite")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Distance Between(Event Player, First Of(Event Player.Target_Order)) > 15;
		Ability Cooldown(Event Player, Button(Ability 2)) == Null;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Use B.O.B")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
		Entity Exists(First Of(Event Player.Target_Order)) == True;
		Is In Line of Sight(Eye Position(Event Player), Eye Position(First Of(Event Player.Target_Order)), Barriers Do Not Block LOS)
			== True;
		Count Of(Event Player.Target_Order) >= 3;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
		Wait(Max(Server Load / 1000, 0.500), Ignore Condition);
		Loop If Condition Is True;
	}
}
