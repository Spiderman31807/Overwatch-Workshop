settings
{
	main
	{
		Mode Name: "Doomfist The Best Defence"
	}

	modes
	{
		Control
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Escort
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Flashpoint
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Hybrid
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}

		Push
		{
			Limit Roles: 1 Tank 2 Offense 2 Support
		}
	}
}

variables
{
	player:
		1: Decay_Timer
		2: Hero
}

rule("Add Health")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Victim != Attacker;
		Is True For Any(Array(Button(Ability 1), Button(Ability 2), Button(Secondary Fire), Button(Ultimate)),
			Event Ability == Current Array Element) == True;
		(Is True For Any(Array(Hero(Bastion), Hero(Doomfist), Hero(Echo), Hero(Junker Queen), Hero(LÃºcio), Hero(Orisa), Hero(Soldier: 76)),
			(Is Duplicating(Attacker) ? Hero Being Duplicated(Attacker) : Hero Of(Attacker)) == Current Array Element)
			|| Event Ability != Button(Secondary Fire)) == True;
	}

	actions
	{
		Attacker.Decay_Timer = 1;
		Abort If(Health(Attacker) >= Max Health Of Type(Attacker, Health) + Max Health Of Type(Attacker, Armor) + Max Health Of Type(
			Attacker, Shields) + 200);
		If(Event Ability == Button(Ultimate));
			Add Health Pool To Player(Attacker, Health, Min(Max Health Of Type(Attacker, Health) + Max Health Of Type(Attacker, Armor)
				+ Max Health Of Type(Attacker, Shields) + 200 - Health(Attacker), 75), False, False);
		Else;
			Add Health Pool To Player(Attacker, Health, Min(Max Health Of Type(Attacker, Health) + Max Health Of Type(Attacker, Armor)
				+ Max Health Of Type(Attacker, Shields) + 200 - Health(Attacker), 35), False, False);
		End;
	}
}

rule("Decay Health")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Health(Event Player) > Max Health Of Type(Event Player, Health) + Max Health Of Type(Event Player, Armor) + Max Health Of Type(
			Event Player, Shields);
	}

	actions
	{
		If(Event Player.Decay_Timer == 0);
			Set Player Health(Event Player, Max(Max Health Of Type(Event Player, Health) + Max Health Of Type(Event Player, Armor)
				+ Max Health Of Type(Event Player, Shields), Health(Event Player) - 0.300));
		Else;
			Event Player.Decay_Timer -= 0.100;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Reset Health")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Hero != Hero Of(Event Player);
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.Hero = Hero Of(Event Player);
		Remove All Health Pools From Player(Event Player);
	}
}
