settings
{
	main
	{
		Mode Name: "Healthkit Tracker - 302A7"
	}

	lobby
	{
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Max Team 1 Players: 4
		Max Team 2 Players: 4
		Return To Lobby: Never
	}

	modes
	{
		Assault
		{
			enabled maps
			{
				Hanamura 972777519512063901
			}
		}

		Control
		{
			enabled maps
			{
			}
		}

		Escort
		{
			enabled maps
			{
			}
		}

		Hybrid
		{
			enabled maps
			{
			}
		}

		Push
		{
			enabled maps
			{
			}
		}

		General
		{
			Game Mode Start: Manual
			Limit Roles: 1 Tank 2 Offense 2 Support
			Tank Role Passive Health Bonus: Always Enabled
		}
	}
}

variables
{
	global:
		0: Healthkit_Index
		1: Healthkits
		2: Healthkit_CD
		3: Healthkit_Used
		4: Used_Healthkit_Type
		11: Healthkits_Small
		12: Healthkits_Large
}

rule("Use Healthkit")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Event Was Health Pack == True;
		Is In Spawn Room(Event Player) != True;
		(Hero Of(Healer) == Hero(Sombra) || !Entity Exists(Healer)) == True;
	}

	actions
	{
		If(Count Of(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large)) == 0);
			Modify Global Variable(Healthkit_Used, Append To Array, First Of(Sorted Array(Global.Healthkits, Distance Between(Event Player,
				Current Array Element))));
			Modify Global Variable(Healthkits, Remove From Array By Value, First Of(Sorted Array(Global.Healthkits, Distance Between(
				Event Player, Current Array Element))));
			Modify Global Variable(Healthkit_CD, Append To Array, Event Healing > 75 ? 15 : 10);
			Modify Global Variable(Used_Healthkit_Type, Append To Array, 0);
		Else;
			If(Array Contains(Global.Healthkits_Small, First Of(Sorted Array(Append To Array(Global.Healthkits_Small, Global.Healthkits_Large),
				Distance Between(Event Player, Current Array Element)))));
				Modify Global Variable(Healthkit_Used, Append To Array, First Of(Sorted Array(Global.Healthkits_Small, Distance Between(
					Event Player, Current Array Element))));
				Modify Global Variable(Healthkits_Small, Remove From Array By Value, First Of(Sorted Array(Global.Healthkits_Small,
					Distance Between(Event Player, Current Array Element))));
				Modify Global Variable(Healthkit_CD, Append To Array, 10);
				Modify Global Variable(Used_Healthkit_Type, Append To Array, 1);
			Else;
				Modify Global Variable(Healthkit_Used, Append To Array, First Of(Sorted Array(Global.Healthkits_Large, Distance Between(
					Event Player, Current Array Element))));
				Modify Global Variable(Healthkits_Large, Remove From Array By Value, First Of(Sorted Array(Global.Healthkits_Large,
					Distance Between(Event Player, Current Array Element))));
				Modify Global Variable(Healthkit_CD, Append To Array, 15);
				Modify Global Variable(Used_Healthkit_Type, Append To Array, 2);
			End;
		End;
	}
}

rule("Healthkit Cooldown")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Healthkit_Used = Empty Array;
		Global.Healthkit_CD = Empty Array;
		Global.Used_Healthkit_Type = Empty Array;
		While(True);
			Wait Until(Count Of(Global.Healthkit_Used) > 0, 99999);
			"Using Subtract 0 By 1 Cus Negitive Values Broken Right Now, If There Not When Your Seeing This Please Change To -1"
			For Global Variable(Healthkit_Index, Count Of(Global.Healthkit_Used) - 1, 0 - 1, 0 - 1);
				If(Global.Healthkit_CD[Global.Healthkit_Index] <= 0);
					If(Global.Used_Healthkit_Type[Global.Healthkit_Index] == 1);
						Modify Global Variable(Healthkits_Small, Append To Array, Global.Healthkit_Used[Global.Healthkits]);
					Else If(Global.Used_Healthkit_Type[Global.Healthkit_Index] == 2);
						Modify Global Variable(Healthkits_Large, Append To Array, Global.Healthkit_Used[Global.Healthkits]);
					Else;
						Modify Global Variable(Healthkits, Append To Array, Global.Healthkit_Used[Global.Healthkits]);
					End;
					Modify Global Variable(Healthkit_Used, Remove From Array By Index, Global.Healthkit_Index);
					Modify Global Variable(Healthkit_CD, Remove From Array By Index, Global.Healthkit_Index);
					Modify Global Variable(Used_Healthkit_Type, Remove From Array By Index, Global.Healthkit_Index);
				Else;
					Global.Healthkit_CD[Global.Healthkit_Index] -= 1;
				End;
			End;
			Wait(1, Ignore Condition);
		End;
	}
}

rule("Debug Huds And Effects")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(All Players(All Teams), Orb, Color(Blue), First Of(Sorted Array(Global.Healthkits, Distance Between(Event Player,
			Current Array Element))), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Orb, Color(Yellow), First Of(Sorted Array(Global.Healthkits_Small, Distance Between(
			Event Player, Current Array Element))), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Orb, Color(Green), First Of(Sorted Array(Global.Healthkits_Large, Distance Between(
			Event Player, Current Array Element))), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Orb, Color(Red), First Of(Sorted Array(Global.Healthkit_Used, Distance Between(Event Player,
			Current Array Element))), 1, Visible To Position and Radius);
		Create HUD Text(All Players(All Teams), Custom String("Closest Used Timer {0}\nClosest Used Type {2}\nAmount Used {1}",
			Global.Healthkit_CD[Index Of Array Value(Global.Healthkit_Used, First Of(Sorted Array(Global.Healthkit_Used, Distance Between(
			Event Player, Current Array Element))))], Count Of(Global.Healthkit_Used), Array(Custom String("Undefined"), Custom String(
			"Small"), Custom String("Large"))[Global.Used_Healthkit_Type[Index Of Array Value(Global.Healthkit_Used, First Of(Sorted Array(
			Global.Healthkit_Used, Distance Between(Event Player, Current Array Element))))]]), Null, Null, Left, 0, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Timer Count {0}\nUsed Count {1}\nUsed Type Count {2}", Count Of(
			Global.Healthkit_CD), Count Of(Global.Healthkit_Used), Count Of(Global.Used_Healthkit_Type)), Null, Null, Right, 0, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Debug Used Message")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Event Was Health Pack == True;
		Is In Spawn Room(Event Player) != True;
		(Hero Of(Healer) == Hero(Sombra) || !Entity Exists(Healer)) == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("Healthkit Used"));
	}
}

disabled rule("Hanamura - Without Medkit Type Data")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Healthkits = Array(Vector(25.659, 1.572, -23.521), Vector(2.024, 2.550, -22.003), Vector(-14.703, 5.429, 12.849), Vector(
			7.563, 5.550, 16.500), Vector(7.940, 0.389, 35.713), Vector(29.928, 4.550, -89.595), Vector(-13.098, 2.550, -61.352), Vector(
			-0.526, -3.550, -74.065), Vector(14.811, -3.450, -96.204), Vector(-0.999, 0.550, -97.554), Vector(29.831, -0.328, -65.271),
			Vector(38.656, -0.335, -38.688), Vector(12.915, 0.326, -49.037), Vector(0.574, 2.550, -36.499), Vector(45.192, 2.550, -0.798),
			Vector(40.854, 1.857, 34.598), Vector(52.121, 3.550, -27.883));
		Global.Healthkits_Small = Array();
		Global.Healthkits_Large = Array();
	}
}

rule("Hanamura - With Medkit Type Data")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Healthkits = Array();
		Global.Healthkits_Small = Array(Vector(-0.920, 0.550, -97.528), Vector(-0.534, -3.550, -74.194), Vector(29.825, -0.330, -65.219),
			Vector(38.744, -0.336, -38.670), Vector(0.568, 2.550, -36.561), Vector(2.002, 2.550, -22.023), Vector(25.679, 1.570, -23.364),
			Vector(-14.651, 5.420, 12.992), Vector(40.764, 1.856, 34.464), Vector(51.848, 3.550, -27.893));
		Global.Healthkits_Large = Array(Vector(45.226, 2.556, -0.794), Vector(7.416, 5.550, 16.474), Vector(7.854, 0.389, 35.625), Vector(
			12.752, 0.326, -48.909), Vector(29.909, 4.550, -89.704), Vector(14.867, -3.450, -96.184), Vector(-12.891, 2.550, -61.276));
	}
}
