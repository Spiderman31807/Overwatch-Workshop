settings
{
	main
	{
		Description: "Default Board Size 9x9 (91 grid tiles)\n\nThe max array size is 1000 in Overwatch,\nThe board will brake if size is set to values\nthat add up to more then 1000.\n\n32x32 is 1024, And 31x31 is 961\n\nAll Left and Right Grid Tiles are saved in an\narray, for gameplay uses.\n\n(Top/Bottom can be obtained with index checks)\n\n----------------------------------------------------------------\n\nVersion 2! Includes Mouse/WASD Controlled\nInterface with built-in settings menu"
		Mode Name: "Board Generator - 839C0"
	}

	lobby
	{
		Max Spectators: 0
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Workshop Expanse Night 972777519512064577
			}
		}

		General
		{
			Game Mode Start: Immediately
			Respawn As Random Hero: On
		}
	}
}

variables
{
	global:
		0: Starting_X
		1: Starting_Y
		2: Board_SizeX
		3: Board_SizeY
		4: Grid_Array
		5: Grid_IndexX
		6: Grid_IndexY
		7: Board_Edge_Left
		8: Board_Edge_Right
		9: Camera_Height
		10: Is_Ready
		11: Click_Area
		12: Click_Area_Size
		13: Click_Area_Color
		14: Click_Area_Hover_Color
		15: Click_Area_Page
		16: Click_Area_Text
		17: Click_Area_Text_Size
		18: Click_Area_ID
		19: Mouse_MaxX
		20: Mouse_MinX
		21: Mouse_MaxY
		22: Mouse_MinY
		23: Default_Sensitivity_Aim
		24: Default_Sensitivity_Throttle
		25: Debug_Dev
		26: Temp_Dev_Text_ID
		27: Temp_Index
		28: Tile_Click_Pos
		29: Temp_Tile

	player:
		0: Menu_Text_ID_Array
		1: Text_ID_Index
		2: Temp_Page
		3: Index
		4: Clicked_Area
		5: Page
		6: Init_Direction
		7: Mouse_Y
		8: Mouse_X
		9: Sensitivity
		10: Mouse_Input
		11: Enable_Menu
		12: Camera_Pos
		13: Facing_Pos
		14: Tile_Click
}

subroutines
{
	0: Disable_Bindings
	2: Setup_Click_Areas
	3: Detect_Click
	4: Destroy_Click_Areas
}

rule("Setup Global")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Built-In Game Mode Completion;
		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Music;
		Set Match Time(0);
	}
}

rule("Create Board Grid")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Is_Ready = False;
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Please Wait, Board Generating{0}", Array(Custom String(""),
			Custom String("."), Custom String(".."), Custom String("..."))[Round To Integer(Total Time Elapsed % 4, Down)]), Top, 0, Color(
			White), Color(White), Color(Black), Visible To and String, Default Visibility);
		Global.Board_SizeX = 8;
		Global.Board_SizeY = 8;
		Global.Starting_X = Global.Board_SizeX % 2 != 0 ? 2 : 0;
		Global.Starting_Y = Global.Board_SizeY % 2 != 0 ? 2 : 0;
		Global.Camera_Height = Max(Global.Board_SizeX * 1.750, Global.Board_SizeY * 3);
		Create Beam Effect(All Players(All Teams), Bad Beam, First Of(Global.Grid_Array) + Vector(-2, -0.500, -2),
			Global.Grid_Array[Global.Board_SizeX - 1] + Vector(2, -0.500, -2), Color(Green), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Bad Beam, Last Of(Global.Grid_Array) + Vector(2, -0.500, 2),
			Global.Grid_Array[Global.Board_SizeX - 1] + Vector(2, -0.500, -2), Color(Green), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Bad Beam, Last Of(Global.Grid_Array) + Vector(2, -0.500, 2), Global.Grid_Array[(
			Global.Board_SizeX - 1) * Global.Board_SizeY] + Vector(-2, -0.500, 2), Color(Green), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Bad Beam, First Of(Global.Grid_Array) + Vector(-2, -0.500, -2), Global.Grid_Array[(
			Global.Board_SizeX - 1) * Global.Board_SizeY] + Vector(-2, -0.500, 2), Color(Green), Visible To Position and Radius);
		Global.Grid_Array = Empty Array;
		Global.Board_Edge_Left = Empty Array;
		Global.Board_Edge_Right = Empty Array;
		For Global Variable(Grid_IndexY, Global.Board_SizeY * -0.500, Global.Board_SizeY * 0.500, 1);
			For Global Variable(Grid_IndexX, Global.Board_SizeX * -0.500, Global.Board_SizeX * 0.500, 1);
				Modify Global Variable(Grid_Array, Append To Array, Vector(Global.Starting_X + 2 + 4 * Global.Grid_IndexX, 0.500,
					Global.Starting_Y + 2 + 4 * Global.Grid_IndexY));
				Wait(0.010, Ignore Condition);
			End;
		End;
		For Global Variable(Grid_IndexX, 0, Global.Board_SizeX * Global.Board_SizeY, Global.Board_SizeX);
			Modify Global Variable(Board_Edge_Right, Append To Array, Global.Grid_Array[Global.Grid_IndexX]);
			Wait(0.010, Ignore Condition);
		End;
		For Global Variable(Grid_IndexX, 0, Count Of(Global.Board_Edge_Right), 1);
			Modify Global Variable(Board_Edge_Left, Append To Array, Vector(X Component Of(Global.Board_Edge_Right[Global.Grid_IndexX]) * -1,
				0.500, Z Component Of(Global.Board_Edge_Right[Global.Grid_IndexX])));
			Wait(0.010, Ignore Condition);
		End;
		Global.Tile_Click_Pos = Empty Array;
		Global.Temp_Tile = Vector(-3.500, 0, -3);
		For Global Variable(Grid_IndexY, 0, Global.Board_SizeY, 1);
			For Global Variable(Grid_IndexX, 0, Global.Board_SizeX, 1);
				Modify Global Variable(Tile_Click_Pos, Append To Array, Global.Temp_Tile);
				Global.Temp_Tile += Vector(1, 0, 0);
			End;
			Global.Temp_Tile = Vector(-3.500, 0, Z Component Of(Global.Temp_Tile) + 1);
		End;
		Destroy All HUD Text;
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Vector(0, Global.Camera_Height, 0), 75);
		Global.Is_Ready = True;
	}
}

rule("Setup Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Start Forcing Player Position(Event Player, Vector(0, Global.Camera_Height, 0), True);
		Set Invisible(Event Player, All);
		Disable Hero HUD(Event Player);
		Disable Game Mode HUD(Event Player);
		Disable Scoreboard(Event Player);
		Start Camera(Event Player, Vector(Global.Starting_X, Global.Camera_Height, Global.Starting_Y), Vector(Global.Starting_X, 0,
			Global.Starting_Y + 0.010), 0);
		Event Player.Camera_Pos = Vector(Global.Starting_X, Global.Camera_Height, Global.Starting_Y);
		Event Player.Facing_Pos = Down;
		Start Facing(Event Player, Direction From Angles(90, 0), 9999, To World, None);
		Call Subroutine(Disable_Bindings);
		Wait Until(Global.Is_Ready, 99999);
		Event Player.Page = Custom String("Default");
		Call Subroutine(Setup_Click_Areas);
		Event Player.Mouse_X = 0;
		Event Player.Mouse_Y = 0;
		Event Player.Init_Direction = Array(90, 0);
		If(Event Player.Mouse_Input == 0);
			Set Aim Speed(Event Player, Event Player.Sensitivity);
			Stop Facing(Event Player);
			Set Facing(Event Player, Direction From Angles(90, 0), To World);
		Else;
			Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
		End;
		Event Player.Enable_Menu = True;
	}
}

disabled rule("-------------------------------------------- In-Game Menu ----------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Global Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		disabled Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.Enable_Menu), Custom String(
			"{0}{1}{2}                                                                                                                       ",
			Custom String(
			"                                                                                                                                "),
			Custom String(
			"                                                                                                                               "),
			Custom String("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")), Null, Null, Left, 0, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Global.Mouse_MaxX = 7.200;
		Global.Mouse_MaxY = 4.100;
		Global.Mouse_MinX = 0 - 7.200;
		Global.Mouse_MinY = 0 - 3.500;
		Global.Default_Sensitivity_Aim = Workshop Setting Integer(Custom String("Mouse"), Custom String(
			"Default Sensitivity% (Mouse / Right Joystick)"), 0, 0, 20, 0);
		Global.Default_Sensitivity_Throttle = Workshop Setting Integer(Custom String("Mouse"), Custom String(
			"Default Sensitivity (WASD / Left Joystick)"), 8, 1, 20, 0);
		Wait(1, Ignore Condition);
		Log To Inspector(Custom String("Count Of Pos, {0}", Count Of(Global.Click_Area)));
		Log To Inspector(Custom String("Count Of Size, {0}", Count Of(Global.Click_Area_Size)));
		Log To Inspector(Custom String("Count Of Color, {0}", Count Of(Global.Click_Area_Color)));
		Log To Inspector(Custom String("Count Of Hover Color, {0}", Count Of(Global.Click_Area_Hover_Color)));
		Log To Inspector(Custom String("Count Of Page, {0}", Count Of(Global.Click_Area_Page)));
		Log To Inspector(Custom String("Count Of Text, {0}", Count Of(Global.Click_Area_Text)));
		Log To Inspector(Custom String("Count Of Text Size, {0}", Count Of(Global.Click_Area_Text_Size)));
		Log To Inspector(Custom String("Count Of ID, {0}", Count Of(Global.Click_Area_ID)));
	}
}

rule("Player Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.Mouse_Input = Workshop Setting Combo(Custom String("Mouse"), Custom String("Default Input"), 0, Array(Custom String(
			"Mouse / Right Joystick"), Custom String("WASD / Left Joystick")), 0);
		Chase Player Variable At Rate(Event Player, Tile_Click, First Of(Sorted Array(Filtered Array(Global.Tile_Click_Pos,
			Distance Between(Vector(Event Player.Mouse_X, 0, Event Player.Mouse_Y), Current Array Element) <= 1), Distance Between(Vector(
			Event Player.Mouse_X, 0, Event Player.Mouse_Y), Current Array Element))), 9999, Destination and Rate);
		If(Event Player.Mouse_Input == 0);
			Event Player.Sensitivity = Global.Default_Sensitivity_Aim;
			Chase Player Variable At Rate(Event Player, Mouse_X, Min(Max(Horizontal Facing Angle Of(Event Player) - First Of(
				Event Player.Init_Direction), Global.Mouse_MinX), Global.Mouse_MaxX), 999, Destination and Rate);
			Chase Player Variable At Rate(Event Player, Mouse_Y, Min(Max((Vertical Facing Angle Of(Event Player) - Last Of(
				Event Player.Init_Direction)) * -1, Global.Mouse_MinY), Global.Mouse_MaxY), 99, Destination and Rate);
		Else;
			Event Player.Sensitivity = Global.Default_Sensitivity_Throttle;
			Chase Player Variable At Rate(Event Player, Mouse_X, Min(Max(Event Player.Mouse_X + X Component Of(Throttle Of(Event Player)),
				Global.Mouse_MinX), Global.Mouse_MaxX), Event Player.Sensitivity, Destination and Rate);
			Chase Player Variable At Rate(Event Player, Mouse_Y, Min(Max(Event Player.Mouse_Y + Z Component Of(Throttle Of(Event Player)),
				Global.Mouse_MinY), Global.Mouse_MaxY), Event Player.Sensitivity, Destination and Rate);
		End;
		Create In-World Text(Filtered Array(Event Player, Event Player.Enable_Menu == True), Custom String("▲"), Update Every Frame(
			Event Player.Camera_Pos + 100 * (Event Player.Mouse_X * -1 / 2 * Cross Product(Event Player.Facing_Pos, Direction From Angles(
			Horizontal Angle From Direction(Event Player.Facing_Pos), Vertical Angle From Direction(Event Player.Facing_Pos) - 90)) + (
			Event Player.Mouse_Y / 2 - 0.200) * Direction From Angles(Horizontal Angle From Direction(Event Player.Facing_Pos),
			Vertical Angle From Direction(Event Player.Facing_Pos) - 90) + 3 * Event Player.Facing_Pos)), 3, Do Not Clip,
			Visible To Position and String, Color(Orange), Default Visibility);
		Create In-World Text(Filtered Array(Event Player, Update Every Frame(Array Contains(Global.Tile_Click_Pos,
			Event Player.Tile_Click))), Custom String("▲"), Update Every Frame(Event Player.Camera_Pos + 100 * (X Component Of(
			Event Player.Tile_Click) * -1 / 2 * Cross Product(Event Player.Facing_Pos, Direction From Angles(
			Horizontal Angle From Direction(Event Player.Facing_Pos), Vertical Angle From Direction(Event Player.Facing_Pos) - 90)) + (
			Z Component Of(Event Player.Tile_Click) / 2 - 0.200) * Direction From Angles(Horizontal Angle From Direction(
			Event Player.Facing_Pos), Vertical Angle From Direction(Event Player.Facing_Pos) - 90) + 3 * Event Player.Facing_Pos)), 3,
			Do Not Clip, Visible To Position and String, Custom Color(0, 0, 0, 20), Default Visibility);
		Wait Until(Has Spawned(Event Player), 99999);
		Wait(0.500, Ignore Condition);
		Small Message(Event Player, Custom String("Press {0} To Open Menu", Input Binding String(Button(Interact))));
	}
}

rule("Click Area Values")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Click_Area = Array(Vector(5.500, 0, 3.500), Vector(-7, 0, 4.100), Vector(2, 0, 1), Vector(2, 0, -1), Vector(-2, 0, -1),
			Vector(-2, 0, 1));
		Global.Click_Area_Size = Array(0.500, 1, 0.300, 1, 1, 4);
		Global.Click_Area_Color = Array(Color(White), 1, Color(Red), 1, Color(White), 4);
		Global.Click_Area_Hover_Color = Array(Color(Lime Green), 1, Color(Rose), 1, Color(Blue), 2, Color(Green), 1, Color(Red), 1);
		Global.Click_Area_Page = Array(Custom String("Default"), 1, Custom String("!Default"), 1, Custom String("Settings"), 4);
		Global.Click_Area_Text = Array(Custom String("Settings"), Custom String("X"), Custom String("Mouse / Right Joystick"),
			Custom String("WASD / Left Joystick"), Custom String("Increase Sensitivity"), Custom String("Decrease Sensitivity"));
		Global.Click_Area_Text_Size = Array(3, 1, 2.500, 1, 2, 4);
		Global.Click_Area_ID = Array(Custom String("Settings"), Custom String("Default Page"), Custom String("Aim"), Custom String(
			"Throttle"), Custom String("+Sensitivity"), Custom String("-Sensitivity"));
	}
}

rule("Click Area Value Decoder")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Temp_Dev_Text_ID = Empty Array;
		For Global Variable(Debug_Dev, 0, Count Of(Global.Click_Area_Size), 2);
			For Global Variable(Temp_Index, 0, Global.Click_Area_Size[Global.Debug_Dev + 1], 1);
				Modify Global Variable(Temp_Dev_Text_ID, Append To Array, Global.Click_Area_Size[Global.Debug_Dev]);
			End;
		End;
		Global.Click_Area_Size = Global.Temp_Dev_Text_ID;
		Global.Temp_Dev_Text_ID = Empty Array;
		For Global Variable(Debug_Dev, 0, Count Of(Global.Click_Area_Color), 2);
			For Global Variable(Temp_Index, 0, Global.Click_Area_Color[Global.Debug_Dev + 1], 1);
				Modify Global Variable(Temp_Dev_Text_ID, Append To Array, Global.Click_Area_Color[Global.Debug_Dev]);
			End;
		End;
		Global.Click_Area_Color = Global.Temp_Dev_Text_ID;
		Global.Temp_Dev_Text_ID = Empty Array;
		For Global Variable(Debug_Dev, 0, Count Of(Global.Click_Area_Hover_Color), 2);
			For Global Variable(Temp_Index, 0, Global.Click_Area_Hover_Color[Global.Debug_Dev + 1], 1);
				Modify Global Variable(Temp_Dev_Text_ID, Append To Array, Global.Click_Area_Hover_Color[Global.Debug_Dev]);
			End;
		End;
		Global.Click_Area_Hover_Color = Global.Temp_Dev_Text_ID;
		Global.Temp_Dev_Text_ID = Empty Array;
		For Global Variable(Debug_Dev, 0, Count Of(Global.Click_Area_Page), 2);
			For Global Variable(Temp_Index, 0, Global.Click_Area_Page[Global.Debug_Dev + 1], 1);
				Modify Global Variable(Temp_Dev_Text_ID, Append To Array, Global.Click_Area_Page[Global.Debug_Dev]);
			End;
		End;
		Global.Click_Area_Page = Global.Temp_Dev_Text_ID;
		Global.Temp_Dev_Text_ID = Empty Array;
		For Global Variable(Debug_Dev, 0, Count Of(Global.Click_Area_Text_Size), 2);
			For Global Variable(Temp_Index, 0, Global.Click_Area_Text_Size[Global.Debug_Dev + 1], 1);
				Modify Global Variable(Temp_Dev_Text_ID, Append To Array, Global.Click_Area_Text_Size[Global.Debug_Dev]);
			End;
		End;
		Global.Click_Area_Text_Size = Global.Temp_Dev_Text_ID;
	}
}

rule("Setup Click Areas")
{
	event
	{
		Subroutine;
		Setup_Click_Areas;
	}

	actions
	{
		Abort If(Is Dummy Bot(Event Player));
		Skip If(Event Player.Menu_Text_ID_Array == Empty Array, 2);
		Call Subroutine(Destroy_Click_Areas);
		Event Player.Menu_Text_ID_Array = Empty Array;
		For Player Variable(Event Player, Index, 0, Count Of(Global.Click_Area), 1);
			If(Char In String(Global.Click_Area_Page[Event Player.Index], 0) == Custom String("!"));
				Skip If(Global.Click_Area_Page[Event Player.Index] == Event Player.Page, 2);
				Create In-World Text(Filtered Array(Event Player, Event Player.Enable_Menu == True && Event Player.Page != String Slice(
					Global.Click_Area_Page[Evaluate Once(Event Player.Index)], 1, String Length(Global.Click_Area_Page[Evaluate Once(
					Event Player.Index)]))), Global.Click_Area_Text[Evaluate Once(Event Player.Index)], Update Every Frame(
					Event Player.Camera_Pos + 100 * (X Component Of(Global.Click_Area[Evaluate Once(Event Player.Index)]) * -1 / 2 * Cross Product(
					Event Player.Facing_Pos, Direction From Angles(Horizontal Angle From Direction(Event Player.Facing_Pos),
					Vertical Angle From Direction(Event Player.Facing_Pos) - 90)) + (Z Component Of(Global.Click_Area[Evaluate Once(
					Event Player.Index)]) / 2 - 0.200) * Direction From Angles(Horizontal Angle From Direction(Event Player.Facing_Pos),
					Vertical Angle From Direction(Event Player.Facing_Pos) - 90) + 3 * Event Player.Facing_Pos)),
					Global.Click_Area_Text_Size[Evaluate Once(Event Player.Index)], Do Not Clip, Visible To Position String and Color,
					Distance Between(Global.Click_Area[Evaluate Once(Event Player.Index)], Vector(Event Player.Mouse_X, 0, Event Player.Mouse_Y))
					<= Global.Click_Area_Size[Evaluate Once(Event Player.Index)] ? Global.Click_Area_Hover_Color[Evaluate Once(Event Player.Index)
					] : Global.Click_Area_Color[Evaluate Once(Event Player.Index)], Default Visibility);
				Modify Player Variable(Event Player, Menu_Text_ID_Array, Append To Array, Last Text ID);
			Else;
				Skip If(Global.Click_Area_Page[Event Player.Index] != Event Player.Page, 2);
				Create In-World Text(Filtered Array(Event Player,
					Event Player.Enable_Menu == True && Event Player.Page == Global.Click_Area_Page[Evaluate Once(Event Player.Index)]),
					Global.Click_Area_Text[Evaluate Once(Event Player.Index)], Update Every Frame(Event Player.Camera_Pos + 100 * (X Component Of(
					Global.Click_Area[Evaluate Once(Event Player.Index)]) * -1 / 2 * Cross Product(Event Player.Facing_Pos, Direction From Angles(
					Horizontal Angle From Direction(Event Player.Facing_Pos), Vertical Angle From Direction(Event Player.Facing_Pos) - 90)) + (
					Z Component Of(Global.Click_Area[Evaluate Once(Event Player.Index)]) / 2 - 0.200) * Direction From Angles(
					Horizontal Angle From Direction(Event Player.Facing_Pos), Vertical Angle From Direction(Event Player.Facing_Pos) - 90)
					+ 3 * Event Player.Facing_Pos)), Global.Click_Area_Text_Size[Evaluate Once(Event Player.Index)], Do Not Clip,
					Visible To Position String and Color, Distance Between(Global.Click_Area[Evaluate Once(Event Player.Index)], Vector(
					Event Player.Mouse_X, 0, Event Player.Mouse_Y)) <= Global.Click_Area_Size[Evaluate Once(Event Player.Index)
					] ? Global.Click_Area_Hover_Color[Evaluate Once(Event Player.Index)] : Global.Click_Area_Color[Evaluate Once(
					Event Player.Index)], Default Visibility);
				Modify Player Variable(Event Player, Menu_Text_ID_Array, Append To Array, Last Text ID);
			End;
			Wait(0.010, Ignore Condition);
		End;
	}
}

rule("Destroy Click Areas")
{
	event
	{
		Subroutine;
		Destroy_Click_Areas;
	}

	actions
	{
		For Player Variable(Event Player, Text_ID_Index, Count Of(Event Player.Menu_Text_ID_Array) - 1, -1, -1);
			Destroy In-World Text(Event Player.Menu_Text_ID_Array[Event Player.Text_ID_Index]);
		End;
		Event Player.Menu_Text_ID_Array = Empty Array;
	}
}

rule("Disable_Bindings")
{
	event
	{
		Subroutine;
		Disable_Bindings;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Disallow Button(Event Player, Button(Ultimate));
		Set Melee Enabled(Event Player, False);
		Set Jump Enabled(Event Player, False);
		Set Reload Enabled(Event Player, False);
	}
}

rule("Menu Click")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Enable_Menu == True;
		Has Spawned(Event Player) == True;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
	}

	actions
	{
		Event Player.Clicked_Area = First Of(Sorted Array(Filtered Array(Global.Click_Area_ID, Distance Between(
			Global.Click_Area[Current Array Index], Vector(Event Player.Mouse_X, 0, Event Player.Mouse_Y))
			<= Global.Click_Area_Size[Current Array Index] && (Char In String(Global.Click_Area_Page[Current Array Index], 0)
			== Custom String("!") ? Event Player.Page != String Slice(Global.Click_Area_Page[Current Array Index], 1, String Length(
			Global.Click_Area_Page[Current Array Index]) - 1) : Event Player.Page == Global.Click_Area_Page[Current Array Index])),
			Distance Between(Current Array Element, Vector(Event Player.Mouse_X, 0, Event Player.Mouse_Y))));
		If(Is True For All(Global.Click_Area_ID, Event Player.Clicked_Area != Current Array Element));
			Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 20);
		Else;
			Start Rule(Detect_Click, Restart Rule);
			Wait(0.250, Ignore Condition);
		End;
	}
}

rule("Update Menu Page")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Enable_Menu == True;
		Event Player.Temp_Page != Event Player.Page;
	}

	actions
	{
		Wait(0.016, Abort When False);
		Start Rule(Setup_Click_Areas, Restart Rule);
		Event Player.Temp_Page = Event Player.Page;
	}
}

rule("Detect Clicked Area")
{
	event
	{
		Subroutine;
		Detect_Click;
	}

	actions
	{
		If(Event Player.Clicked_Area == Custom String("Settings"));
			Event Player.Page = Custom String("Settings");
			Abort;
		Else If(Event Player.Clicked_Area == Custom String("Default Page"));
			Event Player.Page = Custom String("Default");
			Abort;
		Else If(Event Player.Clicked_Area == Custom String("Aim"));
			Event Player.Mouse_Input = 0;
			Event Player.Sensitivity = Global.Default_Sensitivity_Aim;
			Set Aim Speed(Event Player, Event Player.Sensitivity);
			Stop Facing(Event Player);
			Chase Player Variable At Rate(Event Player, Mouse_X, Min(Max(Horizontal Facing Angle Of(Event Player) - First Of(
				Event Player.Init_Direction), Global.Mouse_MinX), Global.Mouse_MaxX), 999, Destination and Rate);
			Chase Player Variable At Rate(Event Player, Mouse_Y, Min(Max((Vertical Facing Angle Of(Event Player) - Last Of(
				Event Player.Init_Direction)) * -1, Global.Mouse_MinY), Global.Mouse_MaxY), 99, Destination and Rate);
			Small Message(All Players(All Teams), Custom String("Mouse Input Set To Mouse / Right Joystick"));
			Abort;
		Else If(Event Player.Clicked_Area == Custom String("Throttle"));
			Event Player.Mouse_Input = 1;
			Event Player.Sensitivity = Global.Default_Sensitivity_Throttle;
			Start Facing(Event Player, Facing Direction Of(Event Player), 0, To World, None);
			Chase Player Variable At Rate(Event Player, Mouse_X, Min(Max(Event Player.Mouse_X + X Component Of(Throttle Of(Event Player)),
				Global.Mouse_MinX), Global.Mouse_MaxX), Event Player.Sensitivity, Destination and Rate);
			Chase Player Variable At Rate(Event Player, Mouse_Y, Min(Max(Event Player.Mouse_Y + Z Component Of(Throttle Of(Event Player)),
				Global.Mouse_MinY), Global.Mouse_MaxY), Event Player.Sensitivity, Destination and Rate);
			Small Message(All Players(All Teams), Custom String("Mouse Input Set To WASD / Left Joystick"));
			Abort;
		Else If(Event Player.Clicked_Area == Custom String("-Sensitivity"));
			Event Player.Sensitivity -= 1;
			Modify Player Variable(Event Player, Sensitivity, Max, 0);
			Set Aim Speed(Event Player, Event Player.Sensitivity);
			Small Message(Event Player, Custom String("Mouse Sensitivity Set To {0}{1}", Event Player.Sensitivity,
				Event Player.Mouse_Input == 0 ? Custom String("%") : Custom String("")));
			Abort;
		Else If(Event Player.Clicked_Area == Custom String("+Sensitivity"));
			Event Player.Sensitivity += 1;
			Modify Player Variable(Event Player, Sensitivity, Min, Event Player.Mouse_Input == 0 ? 100 : 20);
			Set Aim Speed(Event Player, Event Player.Sensitivity);
			Small Message(Event Player, Custom String("Mouse Sensitivity Set To {0}{1}", Event Player.Sensitivity,
				Event Player.Mouse_Input == 0 ? Custom String("%") : Custom String("")));
			Abort;
	}
}

disabled rule("-------------------------------------------- In-Game Menu ----------------------------------------------------")
{
	event
	{
		Ongoing - Global;
	}
}
